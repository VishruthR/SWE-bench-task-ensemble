{"instance_id":"astropy__astropy-12907","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..5714441fa9 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \n@@ -304,9 +304,16 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform.op == '&':\n+            # For nested compound models with & operator, handle each component separately\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _cstack(sepleft, sepright)\n+        else:\n+            # For other operators, compute separability recursively\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n@@ -315,3 +322,4 @@ def _separable(transform):\n # relationship of axes as an array of 0-es and 1-s\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n               '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n+\n"}
{"instance_id":"astropy__astropy-14995","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..b7d85e660c 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -512,16 +512,21 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n+        # If neither has a mask or handle_mask is None, return None\n         if (\n             self.mask is None and operand is not None and operand.mask is None\n         ) or handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n-            return deepcopy(operand.mask)\n+        # If operand is None (for collapse operations), return a copy of self.mask\n         elif operand is None:\n             return deepcopy(self.mask)\n+        # If self has no mask but operand does, return a copy of operand's mask\n+        elif self.mask is None and operand.mask is not None:\n+            return deepcopy(operand.mask)\n+        # If self has a mask but operand doesn't, return a copy of self's mask\n+        elif self.mask is not None and operand.mask is None:\n+            return deepcopy(self.mask)\n+        # If both have masks, apply the handle_mask operation\n         else:\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n"}
{"instance_id":"django__django-10914","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n"}
{"instance_id":"django__django-11099","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..dd15050813 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,9 +17,10 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n     flags = 0\n+\n"}
{"instance_id":"django__django-11133","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..d781a3f3c1 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -308,6 +308,9 @@ class HttpResponse(HttpResponseBase):\n \n     @content.setter\n     def content(self, value):\n+        # Handle memoryview objects by converting them to bytes\n+        if isinstance(value, memoryview):\n+            value = bytes(value)\n         # Consume iterators upon assignment to allow repeated iteration.\n         if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n"}
{"instance_id":"django__django-11179","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex f2560117d2..a5e2706962 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -916,7 +916,9 @@ class Model(metaclass=ModelBase):\n \n         collector = Collector(using=using)\n         collector.collect([self], keep_parents=keep_parents)\n-        return collector.delete()\n+        result = collector.delete()\n+        self.pk = None\n+        return result\n \n     delete.alters_data = True\n \n"}
{"instance_id":"django__django-11815","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..1a14afbfab 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n+        v_string, v_imports = serializer_factory(self.value.name).serialize()\n         imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        return \"%s.%s[%s]\" % (module, enum_class.__name__, v_string), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n@@ -337,3 +337,4 @@ def serializer_factory(value):\n         \"migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/\"\n         \"topics/migrations/#migration-serializing\" % (value, get_docs_version())\n     )\n+\n"}
{"instance_id":"django__django-11964","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6ab..faf262eceb 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -65,11 +65,18 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):\n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n-    pass\n+    \n+    def __str__(self):\n+        return str(self.value)\n \n \n class TextChoices(str, Choices):\n     \"\"\"Class for creating enumerated string choices.\"\"\"\n \n+    @staticmethod\n     def _generate_next_value_(name, start, count, last_values):\n         return name\n+        \n+    def __str__(self):\n+        return str(self.value)\n+\n"}
{"instance_id":"django__django-11999","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex ee45bb941e..aeb62e0a9a 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,8 +763,9 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            setattr(cls, 'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self))\n+            display_method = 'get_%s_display' % self.name\n+            if not hasattr(cls, display_method):\n+                setattr(cls, display_method, partialmethod(cls._get_FIELD_display, field=self))\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\n"}
{"instance_id":"django__django-12125","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..240c7caa34 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -268,6 +268,10 @@ class MigrationWriter:\n \n     @classmethod\n     def serialize(cls, value):\n+        # Handle inner classes by checking if the value is a type and has a __qualname__\n+        if isinstance(value, type) and hasattr(value, '__qualname__') and '.' in value.__qualname__:\n+            module = value.__module__\n+            return '%s.%s' % (module, value.__qualname__), {'import %s' % module}\n         return serializer_factory(value).serialize()\n \n     @classmethod\n"}
{"instance_id":"django__django-12308","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..021a086e65 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,11 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField) and value:\n+        try:\n+            return field.get_prep_value(value)\n+        except TypeError:\n+            return display_for_value(value, empty_value_display)\n     else:\n         return display_for_value(value, empty_value_display)\n \n"}
{"instance_id":"django__django-12708","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f88401ab..f7bc5db908 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,13 +407,25 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n+        if len(constraint_names) == 0:\n+            raise ValueError(\"Found no constraints for %s(%s)\" % (\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        # When both index_together and unique_together exist on the same fields,\n+        # we need to ensure we're deleting the correct one based on the constraint type\n+        for constraint_name in constraint_names:\n+            if constraint_kwargs.get('unique'):\n+                if constraint_name.endswith('_uniq'):\n+                    self.execute(self._delete_constraint_sql(sql, model, constraint_name))\n+                    break\n+            elif constraint_kwargs.get('index'):\n+                if constraint_name.endswith('_idx'):\n+                    self.execute(self._delete_constraint_sql(sql, model, constraint_name))\n+                    break\n+            else:\n+                self.execute(self._delete_constraint_sql(sql, model, constraint_name))\n+                break\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n"}
{"instance_id":"django__django-13028","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..cb2bd805a7 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -16,6 +16,7 @@ from collections import Counter, namedtuple\n from collections.abc import Iterator, Mapping\n from itertools import chain, count, product\n from string import ascii_uppercase\n+import logging\n \n from django.core.exceptions import (\n     EmptyResultSet, FieldDoesNotExist, FieldError,\n@@ -1121,13 +1122,15 @@ class Query(BaseExpression):\n             elif hasattr(value, '__iter__'):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n+    logger = logging.getLogger('django.db.models.sql')\n \n     def check_filterable(self, expression):\n-        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        \"\"\"Log a warning if expression cannot be used in a WHERE clause.\"\"\"\n         if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n+            self.logger.warning(\n+                '%s has filterable=False but was used in a filter clause. '\n+                'This will be allowed but may not be the intended behavior.',\n+                expression.__class__.__name__\n             )\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n"}
{"instance_id":"django__django-13315","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..f993bb9c98 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n"}
{"instance_id":"django__django-13401","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..d1ab3915d4 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,17 +516,33 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            # Compare creation_counter first\n+            if self.creation_counter != other.creation_counter:\n+                return False\n+            # Compare models only if both fields have a model\n+            if hasattr(self, 'model') and hasattr(other, 'model'):\n+                return self.model == other.model\n+            return True\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n-            return self.creation_counter < other.creation_counter\n+            # Compare by creation_counter first\n+            if self.creation_counter != other.creation_counter:\n+                return self.creation_counter < other.creation_counter\n+            # If creation_counter is equal and both have model, compare by model\n+            if hasattr(self, 'model') and hasattr(other, 'model'):\n+                return str(self.model) < str(other.model)\n+            return False\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        # Include both creation_counter and model in hash calculation\n+        h = hash(self.creation_counter)\n+        if hasattr(self, 'model'):\n+            h ^= hash(str(self.model))\n+        return h\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}
{"instance_id":"django__django-13590","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..8ed859bcaf 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,13 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = [\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n-            )\n+            ]\n+            if hasattr(value, '_fields'):  # Is namedtuple\n+                return type(value)(*resolved_values)\n+            return type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n"}
{"instance_id":"django__django-13658","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..e411e86348 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,7 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n"}
{"instance_id":"django__django-13925","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..95ff963d0f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1299,6 +1299,7 @@ class Model(metaclass=ModelBase):\n     def _check_default_pk(cls):\n         if (\n             cls._meta.pk.auto_created and\n+            not cls._meta.parents and  # Only warn if there are no parent models\n             not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n             not cls._meta.app_config._is_default_auto_field_overridden\n         ):\n"}
{"instance_id":"django__django-13933","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..bcf591593f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,7 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice', params={'value': value})\n         return value\n \n     def validate(self, value):\n"}
{"instance_id":"django__django-13964","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696..5bcb6b12b1 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -919,6 +919,10 @@ class Model(metaclass=ModelBase):\n                 obj = getattr(self, field.name, None)\n                 if not obj:\n                     continue\n+                # Update foreign key value if related object's primary key has been set\n+                if obj.pk is not None:\n+                    for lh_field, rh_field in field.related_fields:\n+                        setattr(self, lh_field.attname, getattr(obj, rh_field.attname))\n                 # A pk may have been assigned manually to a model instance not\n                 # saved to the database (or auto-generated in a case like\n                 # UUIDField), but we allow the save to proceed and rely on the\ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..2b9711361b 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -253,8 +253,15 @@ class ForwardManyToOneDescriptor:\n \n         # Set the values of the related field.\n         else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+            # Set the values of the related field\n+            if value.pk is not None:\n+                for lh_field, rh_field in self.field.related_fields:\n+                    setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+            else:\n+                # If the related object doesn't have a primary key yet,\n+                # we need to track that this attribute has been set\n+                for lh_field, rh_field in self.field.related_fields:\n+                    setattr(instance, lh_field.attname, None)\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n"}
{"instance_id":"django__django-14017","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..f1d6b075ea 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,6 +40,13 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n+        from django.db.models.expressions import Exists\n+        if isinstance(other, Exists):\n+            obj = type(self)()\n+            obj.connector = conn\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n@@ -64,6 +71,16 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        from django.db.models.expressions import Exists\n+        if isinstance(other, Exists):\n+            obj = type(self)()\n+            obj.connector = self.AND\n+            obj.add(other, self.AND)\n+            obj.add(self, self.AND)\n+            return obj\n+        return self._combine(other, self.AND)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n@@ -322,3 +339,4 @@ class FilteredRelation:\n         query = compiler.query\n         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))\n         return compiler.compile(where)\n+\n"}
{"instance_id":"django__django-14238","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..1fb36ef79c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2524,7 +2524,7 @@ class AutoFieldMeta(type):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+        return any(issubclass(subclass, base) for base in (BigAutoField, SmallAutoField)) or super().__subclasscheck__(subclass)\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n"}
{"instance_id":"django__django-14608","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..1b0d4554e0 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,7 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n \n     def clean(self):\n         \"\"\"\ndiff --git a/django/forms/utils.py b/django/forms/utils.py\nindex 50412f414b..41e59107dd 100644\n--- a/django/forms/utils.py\n+++ b/django/forms/utils.py\n@@ -84,11 +84,9 @@ class ErrorList(UserList, list):\n     def __init__(self, initlist=None, error_class=None):\n         super().__init__(initlist)\n \n-        if error_class is None:\n-            self.error_class = 'errorlist'\n-        else:\n-            self.error_class = 'errorlist {}'.format(error_class)\n-\n+        self.error_class = 'errorlist'\n+        if error_class:\n+            self.error_class = f'errorlist {error_class}'\n     def as_data(self):\n         return ValidationError(self.data).error_list\n \n"}
{"instance_id":"django__django-14672","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..8d20374085 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n@@ -328,3 +328,4 @@ class ManyToManyRel(ForeignObjectRel):\n                 if rel and rel.model == self.model:\n                     break\n         return field.foreign_related_fields[0]\n+\n"}
{"instance_id":"django__django-14752","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..2e2088738c 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,20 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+                self.serialize_result(obj, to_field_name)\n                 for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"\n+        Convert the provided model instance to a dictionary for JSON serialization.\n+        \n+        Subclasses may override this method to customize the serialization of each result.\n+        \"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n@@ -100,3 +108,4 @@ class AutocompleteJsonView(BaseListView):\n     def has_perm(self, request, obj=None):\n         \"\"\"Check if user has permission to access the related model.\"\"\"\n         return self.model_admin.has_view_permission(request, obj=obj)\n+\n"}
{"instance_id":"django__django-14787","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..393659dc6f 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,10 +37,11 @@ def _multi_decorate(decorators, method):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = method.__get__(self, type(self))\n+        wrapped = wraps(method)(partial(bound_method))\n         for dec in decorators:\n-            bound_method = dec(bound_method)\n-        return bound_method(*args, **kwargs)\n+            wrapped = dec(wrapped)\n+        return wrapped(*args, **kwargs)\n \n     # Copy any attributes that a decorator adds to the function it decorates.\n     for dec in decorators:\n@@ -177,3 +178,4 @@ def async_only_middleware(func):\n     func.sync_capable = False\n     func.async_capable = True\n     return func\n+\n"}
{"instance_id":"django__django-14855","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..35108cc359 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,7 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(url_name, args=[quote(remote_obj.pk)], current_app=self.model_admin.admin_site.name)\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n"}
{"instance_id":"django__django-14915","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923c12..bc7e6959e7 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n"}
{"instance_id":"django__django-14999","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..a5d9b0f3bf 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -318,9 +318,12 @@ class RenameModel(ModelOperation):\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n+        old_model = from_state.apps.get_model(app_label, self.old_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n-            old_model = from_state.apps.get_model(app_label, self.old_name)\n-            # Move the main table\n+            # If both models have the same db_table, this operation is a noop\n+            if (getattr(old_model._meta, 'db_table', None) and\n+                old_model._meta.db_table == new_model._meta.db_table):\n+                return\n             schema_editor.alter_db_table(\n                 new_model,\n                 old_model._meta.db_table,\n"}
{"instance_id":"django__django-15814","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636b22..5036335bec 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -748,7 +748,7 @@ class Query(BaseExpression):\n                     cur_model = source.related_model\n                 else:\n                     cur_model = source.remote_field.model\n-                opts = cur_model._meta\n+                opts = cur_model._meta.concrete_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n                 # (if it's not a reverse relation) to the things we select.\n"}
{"instance_id":"django__django-15851","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 4c9bd63546..99b6fb51d1 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n@@ -62,3 +62,4 @@ class DatabaseClient(BaseDatabaseClient):\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n+\n"}
{"instance_id":"django__django-16139","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n"}
{"instance_id":"django__django-16255","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..f3b7425c81 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n@@ -256,3 +256,4 @@ class GenericSitemap(Sitemap):\n                 .first()\n             )\n         return None\n+\n"}
{"instance_id":"django__django-16527","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb..02cfa2384d 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\n@@ -148,3 +149,4 @@ def cell_count(inline_admin_form):\n         # Delete checkbox\n         count += 1\n     return count\n+\n"}
{"instance_id":"django__django-16595","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab43ad..c3015a447f 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -247,6 +247,8 @@ class AlterField(FieldOperation):\n         return \"alter_%s_%s\" % (self.model_name_lower, self.name_lower)\n \n     def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterField) and self.is_same_field_operation(operation):\n+            return [operation]\n         if isinstance(operation, RemoveField) and self.is_same_field_operation(\n             operation\n         ):\n@@ -355,3 +357,4 @@ class RenameField(FieldOperation):\n             operation.references_field(self.model_name, self.old_name, app_label)\n             or operation.references_field(self.model_name, self.new_name, app_label)\n         )\n+\n"}
{"instance_id":"django__django-17087","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..001a446117 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -8,6 +8,7 @@ import math\n import os\n import pathlib\n import re\n+import sys\n import types\n import uuid\n \n@@ -167,10 +168,27 @@ class FunctionTypeSerializer(BaseSerializer):\n             self.value.__self__, type\n         ):\n             klass = self.value.__self__\n+            # Get the parent model class name from the class's qualname\n+            parent_name = klass.__qualname__.split('.')[0]\n+            # Get the parent model class from the module\n+            try:\n+                parent_model = getattr(sys.modules[klass.__module__], parent_name)\n+                if issubclass(parent_model, models.Model):\n+                    # Use the app label from the model's Meta class\n+                    module = parent_model._meta.app_label\n+                    # Keep the full nested class path from __qualname__\n+                    return \"%s.models.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n+                        \"import %s.models\" % module\n+                    }\n+            except (AttributeError, KeyError):\n+                pass\n+\n+            # Fallback to the original module if parent model is not found\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n+\n         # Further error checking\n         if self.value.__name__ == \"<lambda>\":\n             raise ValueError(\"Cannot serialize function: lambda\")\n@@ -398,3 +416,4 @@ def serializer_factory(value):\n         \"migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/\"\n         \"topics/migrations/#migration-serializing\" % (value, get_docs_version())\n     )\n+\n"}
{"instance_id":"matplotlib__matplotlib-23314","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..74ec359c22 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -388,6 +388,8 @@ class Axes3D(Axes):\n     @martist.allow_rasterization\n     def draw(self, renderer):\n         self._unstale_viewLim()\n+        if not self.get_visible():\n+            return\n \n         # draw the background patch\n         self.patch.draw(renderer)\n"}
{"instance_id":"matplotlib__matplotlib-24149","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..6b8a40b16a 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        try:\n+            return next(val for val in obj if safe_isfinite(val))\n+        except StopIteration:\n+            return np.nan\n \n \n def sanitize_sequence(data):\n"}
{"instance_id":"matplotlib__matplotlib-24970","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 2d3072da04..f1025bd836 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -727,9 +727,9 @@ class Colormap:\n                 xa = xa.astype(int)\n         # Set the over-range indices before the under-range;\n         # otherwise the under-range values get converted to over-range.\n-        xa[xa > self.N - 1] = self._i_over\n-        xa[xa < 0] = self._i_under\n-        xa[mask_bad] = self._i_bad\n+        xa[xa > self.N - 1] = np.array(self._i_over).astype(xa.dtype)\n+        xa[xa < 0] = np.array(self._i_under).astype(xa.dtype)\n+        xa[mask_bad] = np.array(self._i_bad).astype(xa.dtype)\n \n         lut = self._lut\n         if bytes:\n"}
{"instance_id":"matplotlib__matplotlib-25311","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex ff6abdb958..6d678d8818 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -79,6 +79,16 @@ class DraggableLegend(DraggableOffsetBox):\n         elif self._update == \"bbox\":\n             self._bbox_to_anchor(self.get_loc_in_canvas())\n \n+    def __getstate__(self):\n+        \"\"\"\n+        Return a pickleable state for the draggable legend.\n+        Excludes non-pickleable attributes like FigureCanvasQTAgg.\n+        \"\"\"\n+        state = self.__dict__.copy()\n+        # Remove the non-pickleable canvas reference\n+        state['canvas'] = None\n+        return state\n+\n     def _update_loc(self, loc_in_canvas):\n         bbox = self.legend.get_bbox_to_anchor()\n         # if bbox has zero width or height, the transformation is\n"}
{"instance_id":"psf__requests-2317","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/sessions.py b/requests/sessions.py\nindex d701ff2e..c23e376b 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -425,7 +425,7 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n-        method = builtin_str(method)\n+        method = method.decode('utf-8') if isinstance(method, bytes) else builtin_str(method)\n \n         # Create the Request.\n         req = Request(\n"}
{"instance_id":"pylint-dev__pylint-7080","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 5cacc0371..d28b8728e 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -53,10 +53,11 @@ def _is_ignored_file(\n     ignore_list_paths_re: list[Pattern[str]],\n ) -> bool:\n     basename = os.path.basename(element)\n+    normalized_path = os.path.normpath(element)\n     return (\n         basename in ignore_list\n         or _is_in_ignore_list_re(basename, ignore_list_re)\n-        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n+        or _is_in_ignore_list_re(normalized_path, ignore_list_paths_re)\n     )\n \n \n@@ -140,9 +141,9 @@ def expand_modules(\n             ):\n                 if filepath == subfilepath:\n                     continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n+                if _is_ignored_file(\n+                    subfilepath, ignore_list, ignore_list_re, ignore_list_paths_re\n+                ):\n                     continue\n \n                 modpath = _modpath_from_file(\n@@ -159,3 +160,4 @@ def expand_modules(\n                     }\n                 )\n     return result, errors\n+\n"}
{"instance_id":"pytest-dev__pytest-7432","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..624f17cc0 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -1,4 +1,4 @@\n-\"\"\" support for skip/xfail functions and markers. \"\"\"\n+\"\"\"\" support for skip/xfail functions and markers. \"\"\"\n import os\n import platform\n import sys\n@@ -270,13 +270,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n-    elif item.config.option.runxfail:\n-        pass  # don't interfere\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n+    elif not rep.skipped and xfailed and not item.config.option.runxfail:\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n@@ -312,3 +310,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n     return None\n+\n"}
{"instance_id":"scikit-learn__scikit-learn-10297","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n"}
{"instance_id":"scikit-learn__scikit-learn-13142","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex bd34333c0..bf2ea2511 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -257,9 +257,15 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                 best_params = self._get_parameters()\n                 best_n_iter = n_iter\n \n-        # Always do a final e-step to guarantee that the labels returned by\n-        # fit_predict(X) are always consistent with fit(X).predict(X)\n-        # for any value of max_iter and tol (and any random_state).\n+        # Set the best parameters found before doing a final e-step\n+        # This ensures that the labels returned by fit_predict(X) are always\n+        # consistent with fit(X).predict(X) for any value of max_iter and tol\n+        # (and any random_state)\n+        self._set_parameters(best_params)\n+        self.n_iter_ = best_n_iter\n+        self.lower_bound_ = max_lower_bound\n+\n+        # Do a final e-step with the best parameters\n         _, log_resp = self._e_step(X)\n \n         if not self.converged_:\n@@ -269,10 +275,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n-        self._set_parameters(best_params)\n-        self.n_iter_ = best_n_iter\n-        self.lower_bound_ = max_lower_bound\n-\n         return log_resp.argmax(axis=1)\n \n     def _e_step(self, X):\n"}
{"instance_id":"scikit-learn__scikit-learn-13439","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 7eaf9a46f..c60f8e695 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -561,6 +561,17 @@ class Pipeline(_BaseComposition):\n         # check if first estimator expects pairwise input\n         return getattr(self.steps[0][1], '_pairwise', False)\n \n+    def __len__(self):\n+        \"\"\"Returns the length of the pipeline.\n+\n+        Returns\n+        -------\n+        length : int\n+            The number of steps in the pipeline.\n+        \"\"\"\n+        return len(self.steps)\n+\n+\n \n def _name_estimators(estimators):\n     \"\"\"Generate names for estimators.\"\"\"\n"}
{"instance_id":"scikit-learn__scikit-learn-13496","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..61f98f4c5 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -173,7 +173,63 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n+        \"\"\"Initialize IsolationForest.\n+\n+        Parameters\n+        ----------\n+        n_estimators : int, optional (default=100)\n+            The number of base estimators in the ensemble.\n+\n+        max_samples : int or float, optional (default=\"auto\")\n+            The number of samples to draw from X to train each base estimator.\n+                - If int, then draw `max_samples` samples.\n+                - If float, then draw `max_samples * X.shape[0]` samples.\n+                - If \"auto\", then `max_samples=min(256, n_samples)`.\n+\n+        contamination : float in (0., 0.5), optional (default=0.1)\n+            The amount of contamination of the data set, i.e. the proportion\n+            of outliers in the data set. Used when fitting to define the threshold\n+            on the decision function. If 'auto', the decision function threshold is\n+            determined as in the original paper.\n+\n+        max_features : int or float, optional (default=1.0)\n+            The number of features to draw from X to train each base estimator.\n+                - If int, then draw `max_features` features.\n+                - If float, then draw `max_features * X.shape[1]` features.\n+\n+        bootstrap : boolean, optional (default=False)\n+            If True, individual trees are fit on random subsets of the training\n+            data sampled with replacement. If False, sampling without replacement\n+            is performed.\n+\n+        n_jobs : int or None, optional (default=None)\n+            The number of jobs to run in parallel for both `fit` and `predict`.\n+            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n+            ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n+            for more details.\n+\n+        behaviour : str, default='old'\n+            Behaviour of the ``decision_function`` which can be either 'old' or\n+            'new'. Passing ``behaviour='new'`` makes the ``decision_function``\n+            change to match other anomaly detection algorithm API which will be\n+            the default behaviour in the future.\n+\n+        random_state : int, RandomState instance or None, optional (default=None)\n+            If int, random_state is the seed used by the random number generator;\n+            If RandomState instance, random_state is the random number generator;\n+            If None, the random number generator is the RandomState instance used\n+            by `np.random`.\n+\n+        verbose : int, optional (default=0)\n+            Controls the verbosity of the tree building process.\n+\n+        warm_start : bool, optional (default=False)\n+            When set to ``True``, reuse the solution of the previous call to fit\n+            and add more estimators to the ensemble, otherwise, just fit a whole\n+            new forest. See :term:`the Glossary <warm_start>`.\n+        \"\"\"\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n@@ -187,7 +243,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n             max_features=max_features,\n             n_jobs=n_jobs,\n             random_state=random_state,\n-            verbose=verbose)\n+            verbose=verbose,\n+            warm_start=warm_start)\n \n         self.behaviour = behaviour\n         self.contamination = contamination\n"}
{"instance_id":"scikit-learn__scikit-learn-13779","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..3030c2203 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -29,6 +29,8 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n+    if estimator is None:\n+        return None\n     if sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n@@ -78,21 +80,19 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n-                    raise ValueError('Underlying estimator \\'%s\\' does not'\n-                                     ' support sample weights.' % name)\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n+                    raise ValueError('Underlying estimator \\'%s\\' does not support sample weights.' % name)\n \n         names, clfs = zip(*self.estimators)\n         self._validate_names(names)\n \n         n_isnone = np.sum([clf is None for _, clf in self.estimators])\n         if n_isnone == len(self.estimators):\n-            raise ValueError('All estimators are None. At least one is '\n-                             'required!')\n+            raise ValueError('All estimators are None. At least one is required!')\n \n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n-                                                 sample_weight=sample_weight)\n+                                                sample_weight=sample_weight)\n                 for clf in clfs if clf is not None)\n \n         self.named_estimators_ = Bunch()\n"}
{"instance_id":"scikit-learn__scikit-learn-14894","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe837..e8f1a493b 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -278,6 +278,14 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n                 int(self.shrinking), int(self.probability), self.max_iter,\n                 random_seed)\n \n+        if self.support_vectors_.shape[0] == 0:\n+            if hasattr(self, \"classes_\"):\n+                n_class = len(self.classes_) - 1\n+            else:  # regression\n+                n_class = 1\n+            self.dual_coef_ = sp.csr_matrix((0, 0))\n+            return\n+\n         self._warn_from_fit_status()\n \n         if hasattr(self, \"classes_\"):\n"}
{"instance_id":"sphinx-doc__sphinx-8595","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..3d769f9c7 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,16 +1074,19 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+            if hasattr(self.object, '__all__'):\n+                if not self.__all__:\n+                    # empty __all__ means no members should be documented\n+                    return False, []\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n+                    return False, list(members.values())\n+            else:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n-\n-                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n"}
{"instance_id":"sphinx-doc__sphinx-8721","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..618c69307 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -118,8 +118,8 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:\n             inline = nodes.inline('', _('[source]'), classes=['viewcode-link'])\n             onlynode = addnodes.only(expr='html')\n             onlynode += addnodes.pending_xref('', inline, reftype='viewcode', refdomain='std',\n-                                              refexplicit=False, reftarget=pagename,\n-                                              refid=fullname, refdoc=env.docname)\n+                                          refexplicit=False, reftarget=pagename,\n+                                          refid=fullname, refdoc=env.docname)\n             signode += onlynode\n \n \n@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n@@ -293,3 +295,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'env_version': 1,\n         'parallel_read_safe': True\n     }\n+\n"}
{"instance_id":"sympy__sympy-12419","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex b4d759836e..cd6770d69b 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -476,10 +476,8 @@ def conjugate(self):\n         return self\n \n     def _entry(self, i, j):\n-        if i == j:\n-            return S.One\n-        else:\n-            return S.Zero\n+        from sympy import KroneckerDelta\n+        return KroneckerDelta(i, j)\n \n     def _eval_determinant(self):\n         return S.One\n"}
{"instance_id":"sympy__sympy-12481","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..4854a07853 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -896,10 +896,7 @@ def __new__(cls, *args, **kwargs):\n \n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n"}
{"instance_id":"sympy__sympy-13031","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..534157853b 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -378,6 +378,11 @@ def hstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        # Special handling for zero-row matrices\n+        if all(arg.rows == 0 for arg in args):\n+            total_cols = sum(arg.cols for arg in args)\n+            return kls._new(0, total_cols, [])\n+\n         return reduce(kls.row_join, args)\n \n     def reshape(self, rows, cols):\n@@ -601,6 +606,11 @@ def vstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        # Special handling for zero-column matrices\n+        if all(arg.cols == 0 for arg in args):\n+            total_rows = sum(arg.rows for arg in args)\n+            return kls._new(total_rows, 0, [])\n+\n         return reduce(kls.col_join, args)\n \n \n"}
{"instance_id":"sympy__sympy-13480","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d919..5fbb73c786 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\n"}
{"instance_id":"sympy__sympy-13647","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 056d9bc497..f96e7248eb 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -79,14 +79,13 @@ def entry(i, j):\n         return self._new(self.rows, self.cols - 1, entry)\n \n     def _eval_col_insert(self, pos, other):\n-        cols = self.cols\n-\n         def entry(i, j):\n             if j < pos:\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            else:\n+                return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\n"}
{"instance_id":"sympy__sympy-16792","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..0e54a20830 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -441,9 +441,9 @@ def _prototype_arg(self, arg):\n         np_types = {'double': 'np.double_t',\n                     'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, (InputArgument, InOutArgument)) and hasattr(arg, 'shape'):\n             self._need_numpy = True\n-            ndim = len(arg.dimensions)\n+            ndim = len(arg.dimensions) if arg.dimensions else len(arg.shape)\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\ndiff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd7..c27978fc54 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -910,7 +910,7 @@ def get_prototype(self, routine):\n         type_args = []\n         for arg in routine.arguments:\n             name = self.printer.doprint(arg.name)\n-            if arg.dimensions or isinstance(arg, ResultBase):\n+            if arg.dimensions or isinstance(arg, ResultBase) or hasattr(arg.name, 'shape'):\n                 type_args.append((arg.get_datatype('C'), \"*%s\" % name))\n             else:\n                 type_args.append((arg.get_datatype('C'), name))\n"}
{"instance_id":"sympy__sympy-17139","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..d0c3cb1f8f 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,7 +501,7 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n-        if (rv.exp < 0) == True:\n+        if not rv.exp.is_real or (rv.exp < 0) == True:\n             return rv\n         if (rv.exp > max) == True:\n             return rv\n"}
{"instance_id":"sympy__sympy-17655","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..03bca76fa8 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,14 +213,21 @@ def __add__(self, other):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy.core.mul import Mul\n         try:\n+            if isinstance(other, Mul):\n+                # Extract point from Mul expression (e.g., 2*Point)\n+                points = [arg for arg in other.args if isinstance(arg, Point)]\n+                if points:\n+                    point = points[0]\n+                    scalar = Mul(*[arg for arg in other.args if arg != point])\n+                    return self + point.__mul__(scalar)\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n-\n     def __contains__(self, item):\n         return item in self.args\n \n@@ -278,6 +285,21 @@ def __mul__(self, factor):\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, factor):\n+        \"\"\"Multiply point's coordinates by a factor.\n+\n+        This method is called when the scalar is on the left side of the\n+        multiplication operator, e.g., 2 * point.\n+\n+        See Also\n+        ========\n+\n+        __mul__\n+        \"\"\"\n+        factor = sympify(factor)\n+        coords = [simplify(x*factor) for x in self.args]\n+        return Point(coords, evaluate=False)\n+\n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]\n"}
{"instance_id":"sympy__sympy-18698","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f..d11b39aa22 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -5875,7 +5875,7 @@ def sqf_part(f, *gens, **args):\n \n \n def _sorted_factors(factors, method):\n-    \"\"\"Sort a list of ``(expr, exp)`` pairs. \"\"\"\n+    \"\"\"Sort a list of ``(expr, exp)`` pairs and combine factors with same multiplicity.\"\"\"\n     if method == 'sqf':\n         def key(obj):\n             poly, exp = obj\n@@ -5887,7 +5887,39 @@ def key(obj):\n             rep = poly.rep.rep\n             return (len(rep), len(poly.gens), exp, rep)\n \n-    return sorted(factors, key=key)\n+    # First sort the factors\n+    sorted_factors = sorted(factors, key=key)\n+\n+    # Then combine factors with same multiplicity\n+    if method == 'sqf':\n+        combined = []\n+        current_exp = None\n+        current_factors = []\n+\n+        for factor in sorted_factors:\n+            poly, exp = factor\n+            if exp == current_exp:\n+                current_factors.append(poly)\n+            else:\n+                if current_factors:\n+                    # Convert each Poly to expression before multiplication\n+                    combined_expr = Mul(*[p.as_expr() for p in current_factors])\n+                    # Convert back to Poly to maintain consistency\n+                    combined_poly = PurePoly(combined_expr, *current_factors[0].gens)\n+                    combined.append((combined_poly, current_exp))\n+                current_exp = exp\n+                current_factors = [poly]\n+\n+        if current_factors:\n+            # Convert each Poly to expression before multiplication\n+            combined_expr = Mul(*[p.as_expr() for p in current_factors])\n+            # Convert back to Poly to maintain consistency\n+            combined_poly = PurePoly(combined_expr, *current_factors[0].gens)\n+            combined.append((combined_poly, current_exp))\n+\n+        return combined\n+\n+    return sorted_factors\n \n \n def _factors_product(factors):\n"}
{"instance_id":"sympy__sympy-20154","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..3e46d5bf16 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1802,9 +1802,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n@@ -1842,9 +1842,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield sum(ms.values()), ms\n+            yield sum(ms.values()), ms.copy()\n         else:\n-            yield ms\n+            yield ms.copy()\n \n \n def ordered_partitions(n, m=None, sort=True):\n"}
{"instance_id":"sympy__sympy-21847","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..2ff762f563 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if min_degree <= sum(powers.values()) <= max_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if min_degree <= sum(powers.values()) <= max_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n"}
{"instance_id":"sympy__sympy-22714","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..ad06668efe 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n+        if evaluate and any(a.is_number and im(a) for a in coords):\n             raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n"}
{"instance_id":"sympy__sympy-23262","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py\nindex b9227d8d7a..60b1d9c857 100644\n--- a/sympy/printing/lambdarepr.py\n+++ b/sympy/printing/lambdarepr.py\n@@ -24,6 +24,15 @@ class LambdaPrinter(PythonCodePrinter):\n     \"\"\"\n     printmethod = \"_lambdacode\"\n \n+    def _print_seq(self, seq, delimiter=', '):\n+        s = [self._print(item) for item in seq]\n+        if len(s) == 1:\n+            return '(%s,)' % s[0]\n+        elif s:\n+            return '(%s)' % delimiter.join(s)\n+        else:\n+            return '()'\n+\n \n     def _print_And(self, expr):\n         result = ['(']\ndiff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex da67263b19..21dcc17fda 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -957,11 +957,14 @@ def _recursive_to_string(doprint, arg):\n     elif iterable(arg):\n         if isinstance(arg, list):\n             left, right = \"[]\"\n+            return left + ', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n         elif isinstance(arg, tuple):\n             left, right = \"()\"\n+            if len(arg) == 1:\n+                return left + _recursive_to_string(doprint, arg[0]) + \",\" + right\n+            return left + ', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n         else:\n             raise NotImplementedError(\"unhandled type: %s, %s\" % (type(arg), arg))\n-        return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n     elif isinstance(arg, str):\n         return arg\n     else:\n"}
{"instance_id":"sympy__sympy-24066","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c108..233fa328b4 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -190,6 +190,14 @@ def _collect_factor_and_dimension(self, expr):\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n+            if expr.func.__name__ == 'exp':\n+                arg_factor, arg_dim = self._collect_factor_and_dimension(expr.args[0])\n+                if not self.get_dimension_system().is_dimensionless(arg_dim):\n+                    raise ValueError(\n+                        'Dimension of \"{}\" is {}, '\n+                        'but it should be {}'.format(\n+                            expr, arg_dim, Dimension(1)))\n+                return expr.func(arg_factor), Dimension(1)\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n             return (expr.func(*(f[0] for f in fds)),\n@@ -204,3 +212,4 @@ def get_units_non_prefixed(self) -> tSet[Quantity]:\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n         return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+\n"}
{"instance_id":"sympy__sympy-24213","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..e0b73376d0 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,10 +175,10 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n+                        'but it should be equivalent to {}'.format(\n                             addend, addend_dim, dim))\n                 factor += addend_factor\n             return factor, dim\n@@ -203,3 +203,4 @@ def get_units_non_prefixed(self) -> tSet[Quantity]:\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n         return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+\n"}
{"instance_id":"astropy__astropy-14365","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..f20299cf3a 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -68,7 +68,7 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _line_type_re = re.compile(_type_re, flags=re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n"}
{"instance_id":"scikit-learn__scikit-learn-14087","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..7b27010cf 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2173,8 +2173,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 if self.multi_class == 'ovr':\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n-                else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[:, i, best_indices[i]]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n"}
{"instance_id":"astropy__astropy-14182","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..f17f3a6429 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -3,7 +3,6 @@\n :Author: Simon Gibbons (simongibbons@gmail.com)\n \"\"\"\n \n-\n from .core import DefaultSplitter\n from .fixedwidth import (\n     FixedWidth,\n@@ -14,11 +13,17 @@ from .fixedwidth import (\n \n \n class SimpleRSTHeader(FixedWidthHeader):\n-    position_line = 0\n-    start_line = 1\n-    splitter_class = DefaultSplitter\n     position_char = \"=\"\n \n+    def __init__(self, **kwargs):\n+        super().__init__(**kwargs)\n+        header_rows = getattr(self, 'header_rows', ['name'])\n+        if 'name' in header_rows:\n+            self.position_line = 0\n+        else:\n+            self.position_line = None\n+        self.start_line = len(header_rows)\n+\n     def get_fixedwidth_params(self, line):\n         vals, starts, ends = super().get_fixedwidth_params(line)\n         # The right hand column can be unbounded\n@@ -27,10 +32,14 @@ class SimpleRSTHeader(FixedWidthHeader):\n \n \n class SimpleRSTData(FixedWidthData):\n-    start_line = 3\n-    end_line = -1\n     splitter_class = FixedWidthTwoLineDataSplitter\n \n+    def __init__(self, **kwargs):\n+        super().__init__(**kwargs)\n+        header_rows = getattr(self, 'header_rows', ['name'])\n+        num_header_lines = len(header_rows)\n+        self.start_line = num_header_lines + 1  # +1 for separator line\n+\n \n class RST(FixedWidth):\n     \"\"\"reStructuredText simple format table.\n@@ -57,10 +66,11 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n         return lines\n+\n"}
{"instance_id":"django__django-14534","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..c36fc30020 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,8 +277,9 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs']['id']\n \n     @property\n     def choice_label(self):\n         return self.data['label']\n+\n"}
{"instance_id":"django__django-13551","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..4d79e8fff4 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -94,7 +94,7 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        return str(user.pk) + user.password + (user.email or '') + str(login_timestamp) + str(timestamp)\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n@@ -105,3 +105,4 @@ class PasswordResetTokenGenerator:\n \n \n default_token_generator = PasswordResetTokenGenerator()\n+\n"}
{"instance_id":"pydata__xarray-4094","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..ef019321 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k})\n \n         # unstacked dataset\n         return Dataset(data_dict)\n"}
{"instance_id":"django__django-13158","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..7a6cf4a0ed 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -920,6 +920,9 @@ class QuerySet:\n         \"\"\"Return an empty QuerySet.\"\"\"\n         clone = self._chain()\n         clone.query.set_empty()\n+        if clone.query.combinator:\n+            clone.query.combined_queries = ()\n+            clone.query.combinator = None\n         return clone\n \n     ##################################################################\n"}
{"instance_id":"django__django-15252","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..3b90ca7a30 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,5 @@\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -52,6 +52,13 @@ class MigrationRecorder:\n \n     def has_table(self):\n         \"\"\"Return True if the django_migrations table exists.\"\"\"\n+        # Check if migrations are allowed on this database for the Migration model\n+        if not router.allow_migrate(\n+            self.connection.alias,\n+            self.Migration._meta.app_label,\n+            model_name=self.Migration._meta.model_name\n+        ):\n+            return False\n         with self.connection.cursor() as cursor:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n@@ -62,6 +69,13 @@ class MigrationRecorder:\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if migrations are allowed on this database for the Migration model\n+        if not router.allow_migrate(\n+            self.connection.alias,\n+            self.Migration._meta.app_label,\n+            model_name=self.Migration._meta.model_name\n+        ):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -74,6 +88,13 @@ class MigrationRecorder:\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        # Check if migrations are allowed on this database for the Migration model\n+        if not router.allow_migrate(\n+            self.connection.alias,\n+            self.Migration._meta.app_label,\n+            model_name=self.Migration._meta.model_name\n+        ):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -83,14 +104,29 @@ class MigrationRecorder:\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        # Check if migrations are allowed on this database for the Migration model\n+        if not router.allow_migrate(\n+            self.connection.alias,\n+            self.Migration._meta.app_label,\n+            model_name=self.Migration._meta.model_name\n+        ):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        # Check if migrations are allowed on this database for the Migration model\n+        if not router.allow_migrate(\n+            self.connection.alias,\n+            self.Migration._meta.app_label,\n+            model_name=self.Migration._meta.model_name\n+        ):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n         self.migration_qs.all().delete()\n+\n"}
{"instance_id":"scikit-learn__scikit-learn-14983","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..8b70c9bf1 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1216,6 +1216,13 @@ class RepeatedKFold(_RepeatedSplits):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return \"%s(n_splits=%d, n_repeats=%d, random_state=%s)\" % (\n+            self.__class__.__name__,\n+            self.cvargs['n_splits'],\n+            self.n_repeats,\n+            repr(self.random_state)\n+        )\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1269,6 +1276,13 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return \"%s(n_splits=%d, n_repeats=%d, random_state=%s)\" % (\n+            self.__class__.__name__,\n+            self.cvargs['n_splits'],\n+            self.n_repeats,\n+            repr(self.random_state)\n+        )\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n"}
{"instance_id":"django__django-14580","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..2d96e2bb8f 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -273,7 +273,7 @@ class TupleSerializer(BaseSequenceSerializer):\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+    (models.Model, \"models.Model\", ['from django.db import models']),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n"}
{"instance_id":"matplotlib__matplotlib-25332","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex b4c38368bf..b548e1a03e 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3158,18 +3158,16 @@ None}, default: None\n \n     def __getstate__(self):\n         state = super().__getstate__()\n-\n+        # Exclude _align_label_groups from pickling\n+        state.pop('_align_label_groups', None)\n         # The canvas cannot currently be pickled, but this has the benefit\n         # of meaning that a figure can be detached from one canvas, and\n         # re-attached to another.\n         state.pop(\"canvas\")\n-\n         # discard any changes to the dpi due to pixel ratio changes\n         state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])\n-\n         # add version information to the state\n         state['__mpl_version__'] = mpl.__version__\n-\n         # check whether the figure manager (if any) is registered with pyplot\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n@@ -3179,17 +3177,15 @@ None}, default: None\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n-\n         if version != mpl.__version__:\n             _api.warn_external(\n                 f\"This figure was saved with matplotlib version {version} and \"\n                 f\"is unlikely to function correctly.\")\n-\n         self.__dict__ = state\n-\n-        # re-initialise some of the unstored state information\n+        # Reinitialize _align_label_groups after unpickling\n+        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n+        # Re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n-\n         if restore_to_pylab:\n             # lazy import to avoid circularity\n             import matplotlib.pyplot as plt\n@@ -3200,9 +3196,7 @@ None}, default: None\n             mgr = backend.new_figure_manager_given_figure(num, self)\n             pylab_helpers.Gcf._set_new_active_manager(mgr)\n             plt.draw_if_interactive()\n-\n         self.stale = True\n-\n     def add_axobserver(self, func):\n         \"\"\"Whenever the Axes state change, ``func(self)`` will be called.\"\"\"\n         # Connect a wrapper lambda and not func itself, to avoid it being\n"}
{"instance_id":"sympy__sympy-18199","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 9a3052d4c3..c901623c09 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -771,6 +771,9 @@ def nthroot_mod(a, n, p, all_roots=False):\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n+    res = []\n+    if a % p == 0:\n+        res.append(0)\n     if not is_nthpow_residue(a, n, p):\n         return None\n     if not isprime(p):\n"}
{"instance_id":"matplotlib__matplotlib-23476","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex c55864243a..bd5bcae639 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3045,6 +3045,7 @@ class Figure(FigureBase):\n \n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n+        self.set_dpi(state['dpi'])\n \n         if restore_to_pylab:\n             # lazy import to avoid circularity\n"}
{"instance_id":"django__django-11848","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..b43b12e88e 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,11 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            current_year = datetime.datetime.utcnow().year\n+            century = (current_year // 100) * 100\n+            year += century\n+            if year - current_year > 50:\n+                year -= 100\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n"}
{"instance_id":"sympy__sympy-21612","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 2e4a45ad20..acfc609751 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -382,7 +382,7 @@ def convert_frac(frac):\n \n     expr_top = convert_expr(frac.upper)\n     expr_bot = convert_expr(frac.lower)\n-    inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)\n+    inverse_denom = sympy.Pow(sympy.UnevaluatedExpr(expr_bot), -1, evaluate=False)\n     if expr_top == 1:\n         return inverse_denom\n     else:\n@@ -392,7 +392,6 @@ def convert_binom(binom):\n     expr_n = convert_expr(binom.n)\n     expr_k = convert_expr(binom.k)\n     return sympy.binomial(expr_n, expr_k, evaluate=False)\n-\n def convert_floor(floor):\n     val = convert_expr(floor.val)\n     return sympy.floor(val, evaluate=False)\n"}
{"instance_id":"pytest-dev__pytest-7490","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 335e10996..8ec125866 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -1,254 +1,156 @@\n-\"\"\" support for skip/xfail functions and markers. \"\"\"\n+\"\"\"\n+handle skipping and xfail of tests\n+\"\"\"\n import os\n-import platform\n import sys\n-import traceback\n from typing import Generator\n from typing import Optional\n-from typing import Tuple\n \n import attr\n \n-from _pytest.compat import TYPE_CHECKING\n-from _pytest.config import Config\n+import pytest\n from _pytest.config import hookimpl\n-from _pytest.config.argparsing import Parser\n-from _pytest.mark.structures import Mark\n+from _pytest.main import Session\n from _pytest.nodes import Item\n-from _pytest.outcomes import fail\n-from _pytest.outcomes import skip\n-from _pytest.outcomes import xfail\n-from _pytest.reports import BaseReport\n+from _pytest.reports import CollectReport\n+from _pytest.reports import TestReport\n from _pytest.runner import CallInfo\n from _pytest.store import StoreKey\n+from _pytest.terminal import TerminalReporter\n+from _pytest.warning_types import PytestWarning\n \n-if TYPE_CHECKING:\n-    from typing import Type\n+# Exposed helper for unit tests and downstream external plugins.\n+from _pytest.outcomes import fail  # noqa: F401 (unused import)\n+from _pytest.outcomes import skip  # noqa: F401 (unused import)\n+from _pytest.outcomes import xfail  # noqa: F401 (unused import)\n \n \n-def pytest_addoption(parser: Parser) -> None:\n-    group = parser.getgroup(\"general\")\n-    group.addoption(\n-        \"--runxfail\",\n-        action=\"store_true\",\n-        dest=\"runxfail\",\n-        default=False,\n-        help=\"report the results of xfail tests as if they were not marked\",\n-    )\n-\n-    parser.addini(\n-        \"xfail_strict\",\n-        \"default for the strict parameter of xfail \"\n-        \"markers when not given explicitly (default: False)\",\n-        default=False,\n-        type=\"bool\",\n-    )\n+@attr.s(frozen=True)\n+class MarkEvaluator:\n+    \"\"\"Experimental, only for internal use!\n \n+    **Note** all evaluators are deprecated and will be removed in a future version.\n+    \"\"\"\n \n-def pytest_configure(config: Config) -> None:\n-    if config.option.runxfail:\n-        # yay a hack\n-        import pytest\n-\n-        old = pytest.xfail\n-        config._cleanup.append(lambda: setattr(pytest, \"xfail\", old))\n+    item = attr.ib(type=Item)\n+    name = attr.ib(type=str)\n+    _marks = attr.ib(init=False, repr=False)\n+    _keywords = attr.ib(init=False, repr=False)\n+    _skipped_by_mark = attr.ib(default=False)\n \n-        def nop(*args, **kwargs):\n-            pass\n+    def __attrs_post_init__(self):\n+        object.__setattr__(self, \"_marks\", self.item.iter_markers(name=self.name))\n+        object.__setattr__(self, \"_keywords\", self.item.keywords)\n \n-        nop.Exception = xfail.Exception  # type: ignore[attr-defined]\n-        setattr(pytest, \"xfail\", nop)\n+    def __bool__(self) -> bool:\n+        return self.wasvalid()\n \n-    config.addinivalue_line(\n-        \"markers\",\n-        \"skip(reason=None): skip the given test function with an optional reason. \"\n-        'Example: skip(reason=\"no way of currently testing this\") skips the '\n-        \"test.\",\n-    )\n-    config.addinivalue_line(\n-        \"markers\",\n-        \"skipif(condition, ..., *, reason=...): \"\n-        \"skip the given test function if any of the conditions evaluate to True. \"\n-        \"Example: skipif(sys.platform == 'win32') skips the test if we are on the win32 platform. \"\n-        \"See https://docs.pytest.org/en/stable/reference.html#pytest-mark-skipif\",\n-    )\n-    config.addinivalue_line(\n-        \"markers\",\n-        \"xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict): \"\n-        \"mark the test function as an expected failure if any of the conditions \"\n-        \"evaluate to True. Optionally specify a reason for better reporting \"\n-        \"and run=False if you don't even want to execute the test function. \"\n-        \"If only specific exception(s) are expected, you can list them in \"\n-        \"raises, and if the test fails in other ways, it will be reported as \"\n-        \"a true failure. See https://docs.pytest.org/en/stable/reference.html#pytest-mark-xfail\",\n-    )\n+    def wasvalid(self) -> bool:\n+        return any(True for x in self._marks)\n \n+    wasValid = wasvalid\n \n-def evaluate_condition(item: Item, mark: Mark, condition: object) -> Tuple[bool, str]:\n-    \"\"\"Evaluate a single skipif/xfail condition.\n+    def invalidraise(self, message: Optional[str] = None) -> None:\n+        if message is None:\n+            message = \"you cannot use %r outside of a test function\" % (self.name,)\n+        fail(message, pytrace=False)\n \n-    If an old-style string condition is given, it is eval()'d, otherwise the\n-    condition is bool()'d. If this fails, an appropriately formatted pytest.fail\n-    is raised.\n+    def istrue(self) -> bool:\n+        \"\"\"check if condition has a True outcome\"\"\"\n+        return any(self.istrue_single(mark) for mark in self._marks)\n \n-    Returns (result, reason). The reason is only relevant if the result is True.\n-    \"\"\"\n-    # String condition.\n-    if isinstance(condition, str):\n-        globals_ = {\n-            \"os\": os,\n-            \"sys\": sys,\n-            \"platform\": platform,\n-            \"config\": item.config,\n-        }\n-        if hasattr(item, \"obj\"):\n-            globals_.update(item.obj.__globals__)  # type: ignore[attr-defined]\n-        try:\n-            filename = \"<{} condition>\".format(mark.name)\n-            condition_code = compile(condition, filename, \"eval\")\n-            result = eval(condition_code, globals_)\n-        except SyntaxError as exc:\n-            msglines = [\n-                \"Error evaluating %r condition\" % mark.name,\n-                \"    \" + condition,\n-                \"    \" + \" \" * (exc.offset or 0) + \"^\",\n-                \"SyntaxError: invalid syntax\",\n-            ]\n-            fail(\"\\n\".join(msglines), pytrace=False)\n-        except Exception as exc:\n-            msglines = [\n-                \"Error evaluating %r condition\" % mark.name,\n-                \"    \" + condition,\n-                *traceback.format_exception_only(type(exc), exc),\n-            ]\n-            fail(\"\\n\".join(msglines), pytrace=False)\n-\n-    # Boolean condition.\n-    else:\n+    def istrue_single(self, mark) -> bool:\n         try:\n-            result = bool(condition)\n-        except Exception as exc:\n-            msglines = [\n-                \"Error evaluating %r condition as a boolean\" % mark.name,\n-                *traceback.format_exception_only(type(exc), exc),\n-            ]\n-            fail(\"\\n\".join(msglines), pytrace=False)\n-\n-    reason = mark.kwargs.get(\"reason\", None)\n-    if reason is None:\n-        if isinstance(condition, str):\n-            reason = \"condition: \" + condition\n+            return eval_markers(self.item, mark)\n+        except Exception as e:\n+            if not hasattr(e, \"silent_print\"):\n+                sys.stderr.write(\"Error evaluating %r expression\\n\" % self.name)\n+                sys.stderr.write(\n+                    \"    %s\\n\" % (getattr(mark, \"args\", None) or getattr(mark, \"reason\", None))\n+                )\n+                sys.stderr.write(\"    %s: %s\\n\" % (e.__class__.__name__, e))\n+            e.silent_print = True\n+            raise\n+\n+    isTrue = istrue\n+\n+    def getexplanation(self) -> Optional[str]:\n+        expl = []\n+        for mark in self._marks:\n+            reason = getattr(mark, \"reason\", None)\n+            if reason:\n+                expl.append(reason)\n+        if expl:\n+            return \"\\n\".join(expl)\n         else:\n-            # XXX better be checked at collection time\n-            msg = (\n-                \"Error evaluating %r: \" % mark.name\n-                + \"you need to specify reason=STRING when using booleans as conditions.\"\n-            )\n-            fail(msg, pytrace=False)\n+            return None\n \n-    return result, reason\n+    def getwhen(self):\n+        for mark in self._marks:\n+            when = mark.kwargs.get(\"when\", None)\n+            if when:\n+                return when\n+        return None\n \n+    def get(self):\n+        return self.name\n \n-@attr.s(slots=True, frozen=True)\n-class Skip:\n-    \"\"\"The result of evaluate_skip_marks().\"\"\"\n-\n-    reason = attr.ib(type=str)\n-\n-\n-def evaluate_skip_marks(item: Item) -> Optional[Skip]:\n-    \"\"\"Evaluate skip and skipif marks on item, returning Skip if triggered.\"\"\"\n-    for mark in item.iter_markers(name=\"skipif\"):\n-        if \"condition\" not in mark.kwargs:\n-            conditions = mark.args\n-        else:\n-            conditions = (mark.kwargs[\"condition\"],)\n-\n-        # Unconditional.\n-        if not conditions:\n-            reason = mark.kwargs.get(\"reason\", \"\")\n-            return Skip(reason)\n-\n-        # If any of the conditions are true.\n-        for condition in conditions:\n-            result, reason = evaluate_condition(item, mark, condition)\n-            if result:\n-                return Skip(reason)\n-\n-    for mark in item.iter_markers(name=\"skip\"):\n-        if \"reason\" in mark.kwargs:\n-            reason = mark.kwargs[\"reason\"]\n-        elif mark.args:\n-            reason = mark.args[0]\n-        else:\n-            reason = \"unconditional skip\"\n-        return Skip(reason)\n-\n-    return None\n \n+def pytest_addoption(parser):\n+    group = parser.getgroup(\"general\")\n+    group.addoption(\n+        \"--runxfail\", action=\"store_true\", help=\"run tests even if they are marked xfail\"\n+    )\n \n-@attr.s(slots=True, frozen=True)\n-class Xfail:\n-    \"\"\"The result of evaluate_xfail_marks().\"\"\"\n \n-    reason = attr.ib(type=str)\n-    run = attr.ib(type=bool)\n-    strict = attr.ib(type=bool)\n-    raises = attr.ib(type=Optional[Tuple[\"Type[BaseException]\", ...]])\n+def pytest_configure(config):\n+    if config.option.runxfail:\n+        # yay a hack\n+        import pytest\n \n+        old = pytest.xfail\n \n-def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n-    \"\"\"Evaluate xfail marks on item, returning Xfail if triggered.\"\"\"\n-    for mark in item.iter_markers(name=\"xfail\"):\n-        run = mark.kwargs.get(\"run\", True)\n-        strict = mark.kwargs.get(\"strict\", item.config.getini(\"xfail_strict\"))\n-        raises = mark.kwargs.get(\"raises\", None)\n-        if \"condition\" not in mark.kwargs:\n-            conditions = mark.args\n-        else:\n-            conditions = (mark.kwargs[\"condition\"],)\n+        def noop(*args, **kwargs):\n+            pass\n \n-        # Unconditional.\n-        if not conditions:\n-            reason = mark.kwargs.get(\"reason\", \"\")\n-            return Xfail(reason, run, strict, raises)\n+        setattr(pytest, \"xfail\", noop)\n+        setattr(sys.modules[\"pytest\"], \"xfail\", noop)\n \n-        # If any of the conditions are true.\n-        for condition in conditions:\n-            result, reason = evaluate_condition(item, mark, condition)\n-            if result:\n-                return Xfail(reason, run, strict, raises)\n \n-    return None\n+def pytest_report_teststatus(report):\n+    if report.skipped and report.wasxfail:\n+        return \"xfailed\", \"x\", \"xfail\"\n+    elif report.skipped:\n+        return \"skipped\", \"s\", \"SKIP\"\n+    elif report.failed and report.wasxfail:\n+        return \"xpassed\", \"X\", \"XPASS\"\n+    elif report.passed and report.wasxfail:\n+        return \"xpassed\", \"X\", \"XPASS\"\n \n \n-# Whether skipped due to skip or skipif marks.\n-skipped_by_mark_key = StoreKey[bool]()\n-# Saves the xfail mark evaluation. Can be refreshed during call if None.\n-xfailed_key = StoreKey[Optional[Xfail]]()\n-unexpectedsuccess_key = StoreKey[str]()\n+@hookimpl(hookwrapper=True)\n+def pytest_terminal_summary(\n+    terminalreporter: TerminalReporter,\n+) -> Generator[None, None, None]:\n+    yield\n+    terminalreporter.summary_stats()\n \n \n @hookimpl(tryfirst=True)\n def pytest_runtest_setup(item: Item) -> None:\n-    item._store[skipped_by_mark_key] = False\n-\n     skipped = evaluate_skip_marks(item)\n     if skipped:\n-        item._store[skipped_by_mark_key] = True\n-        skip(skipped.reason)\n+        skip(skipped.reason, allow_module_level=True)\n \n     if not item.config.option.runxfail:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+        xfailed = evaluate_xfail_marks(item)\n         if xfailed and not xfailed.run:\n             xfail(\"[NOTRUN] \" + xfailed.reason)\n \n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n-    xfailed = item._store.get(xfailed_key, None)\n-    if xfailed is None:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    xfailed = evaluate_xfail_marks(item)\n \n     if not item.config.option.runxfail:\n         if xfailed and not xfailed.run:\n@@ -260,19 +162,9 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n @hookimpl(hookwrapper=True)\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = yield\n-    rep = outcome.get_result()\n-    xfailed = item._store.get(xfailed_key, None)\n-    # unittest special case, see setting of unexpectedsuccess_key\n-    if unexpectedsuccess_key in item._store and rep.when == \"call\":\n-        reason = item._store[unexpectedsuccess_key]\n-        if reason:\n-            rep.longrepr = \"Unexpected success: {}\".format(reason)\n-        else:\n-            rep.longrepr = \"Unexpected success\"\n-        rep.outcome = \"failed\"\n-    elif item.config.option.runxfail:\n-        pass  # don't interfere\n-    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n+    rep: TestReport = outcome.get_result()\n+    xfailed = evaluate_xfail_marks(item)\n+    if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n@@ -281,35 +173,99 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             raises = xfailed.raises\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n                 rep.outcome = \"failed\"\n-            else:\n-                rep.outcome = \"skipped\"\n-                rep.wasxfail = xfailed.reason\n-        elif call.when == \"call\":\n-            if xfailed.strict:\n-                rep.outcome = \"failed\"\n-                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n+                rep.wasxfail = f\"Expected exception: {raises.__name__}\"\n             else:\n                 rep.outcome = \"passed\"\n-                rep.wasxfail = xfailed.reason\n-\n-    if (\n-        item._store.get(skipped_by_mark_key, True)\n-        and rep.skipped\n-        and type(rep.longrepr) is tuple\n-    ):\n-        # skipped by mark.skipif; change the location of the failure\n-        # to point to the item definition, otherwise it will display\n-        # the location of where the skip exception was raised within pytest\n-        _, _, reason = rep.longrepr\n-        filename, line = item.reportinfo()[:2]\n-        assert line is not None\n-        rep.longrepr = str(filename), line + 1, reason\n-\n-\n-def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:\n-    if hasattr(report, \"wasxfail\"):\n-        if report.skipped:\n-            return \"xfailed\", \"x\", \"XFAIL\"\n-        elif report.passed:\n-            return \"xpassed\", \"X\", \"XPASS\"\n+                rep.wasxfail = \"reason: \" + xfailed.reason\n+        else:\n+            rep.outcome = \"passed\"\n+            rep.wasxfail = \"reason: \" + xfailed.reason\n+\n+\n+@hookimpl(tryfirst=True)\n+def pytest_collection_modifyitems(items):\n+    \"\"\"\n+    Handle skip and xfail markers that cannot be determined during test\n+    collection because they require fixtures (e.g. \"skipif\" with a\n+    condition that uses a fixture).\n+    \"\"\"\n+    for item in items:\n+        # This attribute is set to True if the item is an instance of a\n+        # class that raises an exception in its __getattr__() implementation.\n+        # For details, see Issue #4714.\n+        if getattr(item, \"_unrepr_failure\", False):\n+            continue\n+        skipped = evaluate_skip_marks(item)\n+        if skipped:\n+            item.add_marker('skip', reason=skipped.reason)\n+\n+\n+def evaluate_skip_marks(item):\n+    for mark in item.iter_markers(name=\"skipif\"):\n+        result = eval_markers(item, mark)\n+        if result:\n+            reason = getattr(mark, \"reason\", None)\n+            if not reason:\n+                try:\n+                    reason = \"{}\".format(mark.args[0])\n+                except IndexError:\n+                    reason = \"\"\n+            return Skipped(reason)  # noqa\n+    for mark in item.iter_markers(name=\"skip\"):\n+        reason = getattr(mark, \"reason\", None)\n+        if not reason:\n+            reason = \"\"\n+        return Skipped(reason)  # noqa\n+    return None\n+\n+\n+def evaluate_xfail_marks(item):\n+    for mark in item.iter_markers(name=\"xfail\"):\n+        result = eval_markers(item, mark)\n+        if result:\n+            reason = getattr(mark, \"reason\", None)\n+            if not reason:\n+                reason = \"\"\n+            run = getattr(mark, \"run\", True)\n+            raises = getattr(mark, \"raises\", None)\n+            return XFailed(reason, run, raises)\n     return None\n+\n+\n+def eval_markers(item, mark):\n+    if \"condition\" in mark.kwargs:\n+        condition = mark.kwargs[\"condition\"]\n+    elif mark.args:\n+        condition = mark.args[0]\n+    else:\n+        condition = True\n+    if callable(condition):\n+        return condition()\n+    elif isinstance(condition, str):\n+        # Use of _metadata is deprecated, this will fail with an internal error\n+        # in a future version:\n+        import warnings\n+\n+        warnings.warn(\n+            PytestWarning(\n+                \"The use of strings as conditions is deprecated and will be\"\n+                \" removed in a future version.\"\n+            )\n+        )\n+        return eval(condition, {}, item._metadata)\n+    else:\n+        return bool(condition)\n+\n+\n+@attr.s\n+class Skipped:\n+    reason = attr.ib(type=str)\n+\n+\n+@attr.s\n+class XFailed:\n+    reason = attr.ib(type=str)\n+    run = attr.ib(type=bool)\n+    raises = attr.ib(type=Optional[Exception])\n+\n+\n"}
{"instance_id":"sphinx-doc__sphinx-11445","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..b0a3beeef 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -94,8 +94,24 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n+        # insert a blank line after prolog\n         content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n+        # Check if the next content starts with a heading that could be affected\n+        index = pos + lineno + 2  # position after the blank line we just inserted\n+        # Skip any blank lines\n+        while index < len(content) and content[index].strip() == '':\n+            index += 1\n+\n+        # Now, check if there is a heading at index\n+        if index + 1 < len(content):\n+            line1 = content[index].strip()\n+            line2 = content[index + 1].strip()\n+            # Check if line2 is a heading underline\n+            if len(line2) >= len(line1) and len(line2) >= 3 and all(c == line2[0] for c in line2):\n+                # Insert an extra blank line before line1 to prevent heading parsing issues\n+                content.insert(index, '', '<generated>', 0)\n+\n \n def append_epilog(content: StringList, epilog: str) -> None:\n     \"\"\"Append a string to content body as epilog.\"\"\"\n@@ -108,3 +124,4 @@ def append_epilog(content: StringList, epilog: str) -> None:\n         content.append('', source, lineno + 1)\n         for lineno, line in enumerate(epilog.splitlines()):\n             content.append(line, '<rst_epilog>', lineno)\n+\n"}
{"instance_id":"django__django-14155","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..141531b806 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,9 +31,14 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n-        self.args = args\n-        self.kwargs = kwargs\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.args = func.args + args\n+            self.kwargs = {**func.keywords, **kwargs}\n+        else:\n+            self.func = func\n+            self.args = args\n+            self.kwargs = kwargs\n         self.url_name = url_name\n         self.route = route\n         self.tried = tried\n"}
{"instance_id":"matplotlib__matplotlib-23299","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..f3e79a4ff6 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -222,7 +222,8 @@ def switch_backend(newbackend):\n     global _backend_mod\n     # make sure the init is pulled up so we can assign to it later\n     import matplotlib.backends\n-    close(\"all\")\n+    if newbackend.lower() != rcParams[\"backend\"].lower():\n+        close(\"all\")\n \n     if newbackend is rcsetup._auto_backend_sentinel:\n         current_framework = cbook._get_running_interactive_framework()\n"}
{"instance_id":"scikit-learn__scikit-learn-25747","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..20d309682 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -55,11 +55,15 @@ def _wrap_in_pandas_container(\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(data_to_wrap) == len(index):\n             data_to_wrap.index = index\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    # For data that is not a DataFrame, create a new DataFrame\n+    if index is not None and len(data_to_wrap) == len(index):\n+        return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    else:\n+        return pd.DataFrame(data_to_wrap, columns=columns)\n \n \n def _get_output_config(method, estimator=None):\n@@ -277,3 +281,4 @@ def _safe_set_output(estimator, *, transform=None):\n             \"is not available.\"\n         )\n     return estimator.set_output(transform=transform)\n+\n"}
{"instance_id":"django__django-13033","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d65141b834..bb03ffc44b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1928,11 +1928,10 @@ class Query(BaseExpression):\n         if errors:\n             raise FieldError('Invalid order_by arguments: %s' % errors)\n         if ordering:\n-            self.order_by += ordering\n+            self.order_by = ordering\n         else:\n-            self.default_ordering = False\n-\n-    def clear_ordering(self, force_empty):\n+            self.order_by = ()\n+        self.default_ordering = False\n         \"\"\"\n         Remove any ordering settings. If 'force_empty' is True, there will be\n         no ordering in the resulting query (not even the model's default).\n"}
{"instance_id":"django__django-15695","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..a92ee14dc0 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -967,23 +967,29 @@ class RenameIndex(IndexOperation):\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+            # Reconstruct the old index name based on the model's table name and fields\n+            from_model = from_state.apps.get_model(app_label, self.model_name)\n+            old_index = models.Index(fields=self.old_fields)\n+            old_index.set_name_with_model(from_model)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            new_index = to_model_state.get_index_by_name(self.new_name)\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+            schema_editor.rename_index(from_model, new_index, old_index)\n+        else:\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n     def describe(self):\n         if self.old_name:\n             return (\n"}
{"instance_id":"sympy__sympy-15345","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..e8ecede740 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -31,7 +31,7 @@\n     \"asech\": [(lambda x: True, \"ArcSech\")],\n     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n-\n+    \"Max\": [(lambda *args: True, \"Max\")],\n }\n \n \n@@ -61,7 +61,7 @@ def __init__(self, settings={}):\n         for k, v in userfuncs.items():\n             if not isinstance(v, list):\n                 userfuncs[k] = [(lambda *x: True, v)]\n-                self.known_functions.update(userfuncs)\n+            self.known_functions.update(userfuncs)\n \n     doprint = StrPrinter.doprint\n \n@@ -129,3 +129,4 @@ def mathematica_code(expr, **settings):\n     '(1/120)*x^5 - 1/6*x^3 + x'\n     \"\"\"\n     return MCodePrinter(settings).doprint(expr)\n+\n"}
{"instance_id":"sympy__sympy-18189","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..fb09e5fa58 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -176,13 +176,12 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n         var.sort(key=default_sort_key)\n         if syms:\n             if not is_sequence(syms):\n-                raise TypeError(\n-                    'syms should be given as a sequence, e.g. a list')\n-            syms = [i for i in syms if i in var]\n+                raise TypeError('syms should be given as a sequence, e.g. a list')\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                dict_var_index = dict(zip(var, range(len(var))))\n+                sol_set = diophantine(eq, param, syms=None, permute=permute)\n+                return {tuple([t[dict_var_index[s]] for s in syms])\n+                        for t in sol_set}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n"}
{"instance_id":"sympy__sympy-20590","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 9f609177dd..c03956e346 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -26,6 +26,7 @@ def as_Basic(expr):\n \n \n class Basic(Printable, metaclass=ManagedProperties):\n+    __slots__ = ()\n     \"\"\"\n     Base class for all SymPy objects.\n \n"}
{"instance_id":"sympy__sympy-21379","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex bfec61de64..ffee3508ea 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4354,6 +4354,7 @@ def _parallel_poly_from_expr(exprs, opt):\n             f, g = f.unify(g)\n \n             opt.gens = f.gens\n+            opt.gens = tuple(gen for gen in opt.gens if not isinstance(gen, Piecewise))\n             opt.domain = f.domain\n \n             if opt.polys is None:\n"}
{"instance_id":"sympy__sympy-17630","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..3fbf784d77 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,8 +164,16 @@ def structurally_equal(self, other):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n-\n+            result_blocks = (self.blocks * other.blocks).as_mutable()\n+            from sympy import S, ZeroMatrix\n+            # Wrap scalar zeros into ZeroMatrix instances\n+            for i in range(result_blocks.rows):\n+                for j in range(result_blocks.cols):\n+                    element = result_blocks[i, j]\n+                    if element == S.Zero:\n+                        shape = (self.rowblocksizes[i], other.colblocksizes[j])\n+                        result_blocks[i, j] = ZeroMatrix(*shape)\n+            return BlockMatrix(result_blocks)\n         return self * other\n \n     def _blockadd(self, other):\n"}
{"instance_id":"astropy__astropy-13033","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..fa2ea4524b 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -61,27 +61,15 @@ class BaseTimeSeries(QTable):\n \n         if self._required_columns is not None:\n \n-            if self._required_columns_relax:\n-                required_columns = self._required_columns[:len(self.colnames)]\n-            else:\n-                required_columns = self._required_columns\n+            missing_columns = [col for col in self._required_columns if col not in self.colnames]\n \n-            plural = 's' if len(required_columns) > 1 else ''\n-\n-            if not self._required_columns_relax and len(self.colnames) == 0:\n-\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but time series has no columns\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural))\n-\n-            elif self.colnames[:len(required_columns)] != required_columns:\n-\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+            if missing_columns:\n+                plural = 's' if len(missing_columns) > 1 else ''\n+                raise ValueError(\"{} object is invalid - missing required column{}: {}\"\n+                                 .format(self.__class__.__name__, plural, ', '.join(missing_columns)))\n \n             if (self._required_columns_relax\n-                    and self._required_columns == self.colnames[:len(self._required_columns)]):\n+                    and all(col in self.colnames for col in self._required_columns)):\n                 self._required_columns_relax = False\n \n     @contextmanager\n@@ -90,3 +78,4 @@ class BaseTimeSeries(QTable):\n         yield\n         self._required_columns_enabled = True\n         self._check_required_columns()\n+\n"}
{"instance_id":"astropy__astropy-13236","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/table/ndarray_mixin.py b/astropy/table/ndarray_mixin.py\nindex c6f2aa6222..68ce6e42a3 100644\n--- a/astropy/table/ndarray_mixin.py\n+++ b/astropy/table/ndarray_mixin.py\n@@ -3,6 +3,7 @@\n import numpy as np\n \n from astropy.utils.data_info import ParentDtypeInfo\n+import warnings\n \n \n class NdarrayMixinInfo(ParentDtypeInfo):\n@@ -30,6 +31,7 @@ class NdarrayMixin(np.ndarray):\n     info = NdarrayMixinInfo()\n \n     def __new__(cls, obj, *args, **kwargs):\n+        warnings.warn(\"NdarrayMixin is planned to be deprecated for structured arrays in future versions (5.2). Please use Column for structured arrays instead.\", FutureWarning)\n         self = np.array(obj, *args, **kwargs).view(cls)\n         if 'info' in getattr(obj, '__dict__', ()):\n             self.info = obj.info\ndiff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe2127a3..6e383dbd28 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1241,9 +1241,6 @@ class Table:\n \n         # Structured ndarray gets viewed as a mixin unless already a valid\n         # mixin class\n-        if (not isinstance(data, Column) and not data_is_mixin\n-                and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n-            data = data.view(NdarrayMixin)\n             data_is_mixin = True\n \n         # Get the final column name using precedence.  Some objects may not\n"}
{"instance_id":"astropy__astropy-13398","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py b/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\nindex a15248c38d..120a56c44e 100644\n--- a/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\n+++ b/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\n@@ -7,19 +7,22 @@ rotations without aberration corrections or offsets.\n \n import numpy as np\n import erfa\n+from astropy import units as u\n \n from astropy.coordinates.baseframe import frame_transform_graph\n from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference\n-from astropy.coordinates.matrix_utilities import matrix_transpose\n+from astropy.coordinates.matrix_utilities import matrix_transpose, rotation_matrix\n \n from .icrs import ICRS\n from .gcrs import GCRS, PrecessedGeocentric\n from .cirs import CIRS\n from .itrs import ITRS\n from .equatorial import TEME, TETE\n-from .utils import get_polar_motion, get_jd12, EARTH_CENTER\n+from .altaz import AltAz\n+from .hadec import HADec\n+from .utils import get_polar_motion, get_jd12, EARTH_CENTER, PIOVER2\n \n-# # first define helper functions\n+# first define helper functions\n \n \n def teme_to_itrs_mat(time):\n@@ -277,3 +280,56 @@ frame_transform_graph._add_merged_transform(ITRS, CIRS, ITRS)\n frame_transform_graph._add_merged_transform(PrecessedGeocentric, GCRS, PrecessedGeocentric)\n frame_transform_graph._add_merged_transform(TEME, ITRS, TEME)\n frame_transform_graph._add_merged_transform(TETE, ICRS, TETE)\n+\n+\n+def itrs_to_observed_mat(observed_frame):\n+\n+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n+    elong = lon.to_value(u.radian)\n+\n+    if isinstance(observed_frame, AltAz):\n+        # form ITRS to AltAz matrix\n+        elat = lat.to_value(u.radian)\n+        # AltAz frame is left handed\n+        minus_x = np.eye(3)\n+        minus_x[0][0] = -1.0\n+        mat = (minus_x\n+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)\n+               @ rotation_matrix(elong, 'z', unit=u.radian))\n+\n+    else:\n+        # form ITRS to HADec matrix\n+        # HADec frame is left handed\n+        minus_y = np.eye(3)\n+        minus_y[1][1] = -1.0\n+        mat = (minus_y\n+               @ rotation_matrix(elong, 'z', unit=u.radian))\n+    return mat\n+\n+\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)\n+def itrs_to_observed(itrs_coo, observed_frame):\n+    # Trying to synchronize the obstimes here makes no sense. In fact,\n+    # it's a real gotcha as doing an ITRS->ITRS transform references\n+    # ITRS coordinates, which should be tied to the Earth, to the SSB.\n+    # Instead, we treat ITRS coordinates as time invariant here.\n+\n+    # form the Topocentric ITRS position\n+    topocentric_itrs_repr = (itrs_coo.cartesian\n+                             - observed_frame.location.get_itrs().cartesian)\n+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))\n+    return observed_frame.realize_frame(rep)\n+\n+\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)\n+def observed_to_itrs(observed_coo, itrs_frame):\n+\n+    # form the Topocentric ITRS position\n+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(\n+                            itrs_to_observed_mat(observed_coo)))\n+    # form the Geocentric ITRS position\n+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian\n+    return itrs_frame.realize_frame(rep)\n+\n"}
{"instance_id":"astropy__astropy-13453","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf229cc..0fe09c6670 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -330,6 +330,7 @@ class HTML(core.BaseReader):\n         if 'table_id' not in htmldict:\n             self.html['table_id'] = 1\n         self.inputter.html = self.html\n+        self.formats = {}\n \n     def read(self, table):\n         \"\"\"\n@@ -430,20 +431,32 @@ class HTML(core.BaseReader):\n                                     # Split up multicolumns into separate columns\n                                     new_col = Column([el[i] for el in col])\n \n-                                    new_col_iter_str_vals = self.fill_values(\n-                                        col, new_col.info.iter_str_vals())\n+                        for col, col_escaped in zip(cols, cols_escaped):\n+                            if len(col.shape) > 1 and self.html['multicol']:\n+                                span = col.shape[1]\n+                                for i in range(span):\n+                                    # Split up multicolumns into separate columns\n+                                    new_col = Column([el[i] for el in col])\n+                                    new_col_iter_str_vals = self._format_col(new_col)\n                                     col_str_iters.append(new_col_iter_str_vals)\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n \n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                col_iter_str_vals = self._format_col(col)\n                                 col_str_iters.append(col_iter_str_vals)\n-\n                                 new_cols_escaped.append(col_escaped)\n \n-                    for row in zip(*col_str_iters):\n-                        with w.tag('tr'):\n+                        # Iterate over the rows\n+                        for row in zip(*col_str_iters):\n+                            with w.tag('tr'):\n+                                for el, col_escaped in zip(row, new_cols_escaped):\n+                                    # Potentially disable HTML escaping for column\n+                                    method = ('escape_xml' if col_escaped else 'bleach_clean')\n+                                    with w.xml_cleaning_method(method, **raw_html_clean_kwargs):\n+                                        w.start('td')\n+                                        w.data(el.strip())\n+                                        w.end(indent=False)\n                             for el, col_escaped in zip(row, new_cols_escaped):\n                                 # Potentially disable HTML escaping for column\n                                 method = ('escape_xml' if col_escaped else 'bleach_clean')\n@@ -451,9 +464,20 @@ class HTML(core.BaseReader):\n                                     w.start('td')\n                                     w.data(el.strip())\n                                     w.end(indent=False)\n-\n-        # Fixes XMLWriter's insertion of unwanted line breaks\n-        return [''.join(lines)]\n+    def _format_col(self, col):\n+        \"\"\"\n+        Format the column values using the formats argument.\n+        \"\"\"\n+    def _format_col(self, col):\n+        \"\"\"\n+        Format the column values using the formats argument.\n+        \"\"\"\n+        format_func = self.formats.get(col.info.name, None)\n+        if format_func is None:\n+            col_str_vals = col.info.iter_str_vals()\n+        else:\n+            col_str_vals = (format_func(x) for x in col)\n+        return col_str_vals\n \n     def fill_values(self, col, col_str_iters):\n         \"\"\"\n"}
{"instance_id":"astropy__astropy-13579","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\nindex d7605b078c..9b8c34b4e0 100644\n--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n@@ -132,7 +132,7 @@ class SlicedLowLevelWCS(BaseWCSWrapper):\n                 ipixel_orig = wcs._wcs.pixel_n_dim - 1 - wcs._pixel_keep[ipixel]\n                 ipixel_new = wcs.pixel_n_dim - 1 - ipixel\n                 slices_original[ipixel_orig] = combine_slices(slices_original[ipixel_orig],\n-                                                              slices[ipixel_new])\n+                                                          slices[ipixel_new])\n             self._slices_array = slices_original\n         else:\n             self._wcs = wcs\n@@ -143,7 +143,7 @@ class SlicedLowLevelWCS(BaseWCSWrapper):\n         # figure out which pixel dimensions have been kept, then use axis correlation\n         # matrix to figure out which world dims are kept\n         self._pixel_keep = np.nonzero([not isinstance(self._slices_pixel[ip], numbers.Integral)\n-                                       for ip in range(self._wcs.pixel_n_dim)])[0]\n+                                   for ip in range(self._wcs.pixel_n_dim)])[0]\n \n         # axis_correlation_matrix[world, pixel]\n         self._world_keep = np.nonzero(\n@@ -151,7 +151,7 @@ class SlicedLowLevelWCS(BaseWCSWrapper):\n \n         if len(self._pixel_keep) == 0 or len(self._world_keep) == 0:\n             raise ValueError(\"Cannot slice WCS: the resulting WCS should have \"\n-                             \"at least one pixel and one world dimension.\")\n+                         \"at least one pixel and one world dimension.\")\n \n     @lazyproperty\n     def dropped_world_dimensions(self):\n@@ -246,23 +246,28 @@ class SlicedLowLevelWCS(BaseWCSWrapper):\n         world_arrays = tuple(map(np.asanyarray, world_arrays))\n         world_arrays_new = []\n         iworld_curr = -1\n+\n+        # Create a complete set of world coordinates including dropped dimensions\n         for iworld in range(self._wcs.world_n_dim):\n             if iworld in self._world_keep:\n                 iworld_curr += 1\n                 world_arrays_new.append(world_arrays[iworld_curr])\n             else:\n-                world_arrays_new.append(1.)\n+                # For dropped dimensions, use the values from dropped_world_dimensions\n+                world_arrays_new.append(self.dropped_world_dimensions['value'][len(world_arrays_new) - iworld_curr - 1])\n \n+        # Ensure arrays are properly broadcast\n         world_arrays_new = np.broadcast_arrays(*world_arrays_new)\n+\n+        # Transform to pixel coordinates using the full WCS\n         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))\n \n+        # Apply slice offsets\n         for ipixel in range(self._wcs.pixel_n_dim):\n             if isinstance(self._slices_pixel[ipixel], slice) and self._slices_pixel[ipixel].start is not None:\n                 pixel_arrays[ipixel] -= self._slices_pixel[ipixel].start\n \n-        # Detect the case of a length 0 array\n-        if isinstance(pixel_arrays, np.ndarray) and not pixel_arrays.shape:\n-            return pixel_arrays\n+        # Return only the kept dimensions\n         pixel = tuple(pixel_arrays[ip] for ip in self._pixel_keep)\n         if self.pixel_n_dim == 1 and self._wcs.pixel_n_dim > 1:\n             pixel = pixel[0]\n@@ -306,3 +311,4 @@ class SlicedLowLevelWCS(BaseWCSWrapper):\n     @property\n     def axis_correlation_matrix(self):\n         return self._wcs.axis_correlation_matrix[self._world_keep][:, self._pixel_keep]\n+\n"}
{"instance_id":"astropy__astropy-13977","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex b98abfafb0..d7774266e1 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -667,8 +667,10 @@ class Quantity(np.ndarray):\n         arrays = []\n         for input_, converter in zip(inputs, converters):\n             input_ = getattr(input_, \"value\", input_)\n-            arrays.append(converter(input_) if converter else input_)\n-\n+            try:\n+                arrays.append(converter(input_) if converter else input_)\n+            except ValueError:\n+                return NotImplemented\n         # Call our superclass's __array_ufunc__\n         result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n         # If unit is None, a plain array is expected (e.g., comparisons), which\n"}
{"instance_id":"astropy__astropy-14096","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex ab475f7d0d..50160929fd 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,12 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # First check if this is a property defined on the class\n+        prop = getattr(type(self), attr, None)\n+        if isinstance(prop, property):\n+            # Let the property raise its own AttributeError if needed\n+            return prop.__get__(self, type(self))\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n"}
{"instance_id":"astropy__astropy-14309","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 4b6150f4ac..1f51fe4835 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -69,7 +69,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n             (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n         ):\n             return True\n-    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n+    return len(args) > 0 and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n \n \n def _decode_mixins(tbl):\ndiff --git a/astropy/io/registry/base.py b/astropy/io/registry/base.py\nindex 0ac2a20cce..a533c5964d 100644\n--- a/astropy/io/registry/base.py\n+++ b/astropy/io/registry/base.py\n@@ -311,7 +311,7 @@ class _UnifiedIORegistryBase(metaclass=abc.ABCMeta):\n         for data_format, data_class in self._identifiers:\n             if self._is_best_match(data_class_required, data_class, self._identifiers):\n                 if self._identifiers[(data_format, data_class)](\n-                    origin, path, fileobj, *args, **kwargs\n+                    origin, path, fileobj, *(args if args else []), **kwargs\n                 ):\n                     valid_formats.append(data_format)\n \n"}
{"instance_id":"astropy__astropy-14369","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..f61de0ec56 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -164,30 +164,31 @@ class CDS(Base):\n \n         def p_combined_units(p):\n             \"\"\"\n-            combined_units : product_of_units\n-                           | division_of_units\n+            combined_units : unit_expression rest_units\n             \"\"\"\n             p[0] = p[1]\n+            for op, unit in p[2]:\n+                if op == '.':\n+                    p[0] *= unit\n+                elif op == '/':\n+                    p[0] /= unit\n \n-        def p_product_of_units(p):\n+        def p_rest_units(p):\n             \"\"\"\n-            product_of_units : unit_expression PRODUCT combined_units\n-                             | unit_expression\n+            rest_units : rest_units op_unit\n+                       |\n             \"\"\"\n-            if len(p) == 4:\n-                p[0] = p[1] * p[3]\n+            if len(p) == 3:\n+                p[0] = p[1] + [p[2]]\n             else:\n-                p[0] = p[1]\n+                p[0] = []\n \n-        def p_division_of_units(p):\n+        def p_op_unit(p):\n             \"\"\"\n-            division_of_units : DIVISION unit_expression\n-                              | unit_expression DIVISION combined_units\n+            op_unit : PRODUCT unit_expression\n+                    | DIVISION unit_expression\n             \"\"\"\n-            if len(p) == 3:\n-                p[0] = p[2] ** -1\n-            else:\n-                p[0] = p[1] / p[3]\n+            p[0] = (p[1], p[2])\n \n         def p_unit_expression(p):\n             \"\"\"\n@@ -356,3 +357,4 @@ class CDS(Base):\n             s = cls._get_unit_name(unit)\n \n         return s\n+\ndiff --git a/astropy/units/format/cds_parsetab.py b/astropy/units/format/cds_parsetab.py\nindex 741d41643c..42067fd808 100644\n--- a/astropy/units/format/cds_parsetab.py\n+++ b/astropy/units/format/cds_parsetab.py\n@@ -1,14 +1,3 @@\n-# -*- coding: utf-8 -*-\n-# Licensed under a 3-clause BSD style license - see LICENSE.rst\n-\n-# This file was automatically generated from ply. To re-generate this file,\n-# remove it from this folder, then build astropy and run the tests in-place:\n-#\n-#   python setup.py build_ext --inplace\n-#   pytest astropy/units\n-#\n-# You can then commit the changes to this file.\n-\n \n # cds_parsetab.py\n # This file is automatically generated. Do not edit.\n@@ -17,9 +6,9 @@ _tabversion = '3.10'\n \n _lr_method = 'LALR'\n \n-_lr_signature = 'CLOSE_BRACKET CLOSE_PAREN DIMENSIONLESS DIVISION OPEN_BRACKET OPEN_PAREN PRODUCT SIGN UFLOAT UINT UNIT X\\n            main : factor combined_units\\n                 | combined_units\\n                 | DIMENSIONLESS\\n                 | OPEN_BRACKET combined_units CLOSE_BRACKET\\n                 | OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET\\n                 | factor\\n            \\n            combined_units : product_of_units\\n                           | division_of_units\\n            \\n            product_of_units : unit_expression PRODUCT combined_units\\n                             | unit_expression\\n            \\n            division_of_units : DIVISION unit_expression\\n                              | unit_expression DIVISION combined_units\\n            \\n            unit_expression : unit_with_power\\n                            | OPEN_PAREN combined_units CLOSE_PAREN\\n            \\n            factor : signed_float X UINT signed_int\\n                   | UINT X UINT signed_int\\n                   | UINT signed_int\\n                   | UINT\\n                   | signed_float\\n            \\n            unit_with_power : UNIT numeric_power\\n                            | UNIT\\n            \\n            numeric_power : sign UINT\\n            \\n            sign : SIGN\\n                 |\\n            \\n            signed_int : SIGN UINT\\n            \\n            signed_float : sign UINT\\n                         | sign UFLOAT\\n            '\n+_lr_signature = 'CLOSE_BRACKET CLOSE_PAREN DIMENSIONLESS DIVISION OPEN_BRACKET OPEN_PAREN PRODUCT SIGN UFLOAT UINT UNIT X\\n            main : factor combined_units\\n                 | combined_units\\n                 | DIMENSIONLESS\\n                 | OPEN_BRACKET combined_units CLOSE_BRACKET\\n                 | OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET\\n                 | factor\\n            \\n            combined_units : unit_expression rest_units\\n            \\n            rest_units : rest_units op_unit\\n                       |\\n            \\n            op_unit : PRODUCT unit_expression\\n                    | DIVISION unit_expression\\n            \\n            unit_expression : unit_with_power\\n                            | OPEN_PAREN combined_units CLOSE_PAREN\\n            \\n            factor : signed_float X UINT signed_int\\n                   | UINT X UINT signed_int\\n                   | UINT signed_int\\n                   | UINT\\n                   | signed_float\\n            \\n            unit_with_power : UNIT numeric_power\\n                            | UNIT\\n            \\n            numeric_power : sign UINT\\n            \\n            sign : SIGN\\n                 |\\n            \\n            signed_int : SIGN UINT\\n            \\n            signed_float : sign UINT\\n                         | sign UFLOAT\\n            '\n     \n-_lr_action_items = {'DIMENSIONLESS':([0,5,],[4,19,]),'OPEN_BRACKET':([0,],[5,]),'UINT':([0,10,13,16,20,21,23,31,],[7,24,-23,-24,34,35,36,40,]),'DIVISION':([0,2,5,6,7,11,14,15,16,22,24,25,26,27,30,36,39,40,41,42,],[12,12,12,-19,-18,27,-13,12,-21,-17,-26,-27,12,12,-20,-25,-14,-22,-15,-16,]),'SIGN':([0,7,16,34,35,],[13,23,13,23,23,]),'UFLOAT':([0,10,13,],[-24,25,-23,]),'OPEN_PAREN':([0,2,5,6,7,12,15,22,24,25,26,27,36,41,42,],[15,15,15,-19,-18,15,15,-17,-26,-27,15,15,-25,-15,-16,]),'UNIT':([0,2,5,6,7,12,15,22,24,25,26,27,36,41,42,],[16,16,16,-19,-18,16,16,-17,-26,-27,16,16,-25,-15,-16,]),'$end':([1,2,3,4,6,7,8,9,11,14,16,17,22,24,25,28,30,32,33,36,37,38,39,40,41,42,],[0,-6,-2,-3,-19,-18,-7,-8,-10,-13,-21,-1,-17,-26,-27,-11,-20,-4,-5,-25,-9,-12,-14,-22,-15,-16,]),'X':([6,7,24,25,],[20,21,-26,-27,]),'CLOSE_BRACKET':([8,9,11,14,16,18,19,28,30,37,38,39,40,],[-7,-8,-10,-13,-21,32,33,-11,-20,-9,-12,-14,-22,]),'CLOSE_PAREN':([8,9,11,14,16,28,29,30,37,38,39,40,],[-7,-8,-10,-13,-21,-11,39,-20,-9,-12,-14,-22,]),'PRODUCT':([11,14,16,30,39,40,],[26,-13,-21,-20,-14,-22,]),}\n+_lr_action_items = {'DIMENSIONLESS':([0,5,],[4,16,]),'OPEN_BRACKET':([0,],[5,]),'UINT':([0,9,12,13,17,18,20,26,],[7,22,-22,-23,29,30,31,36,]),'OPEN_PAREN':([0,2,5,6,7,11,19,22,23,31,33,34,37,38,],[11,11,11,-18,-17,11,-16,-25,-26,-24,11,11,-14,-15,]),'SIGN':([0,7,13,29,30,],[12,20,12,20,20,]),'UFLOAT':([0,9,12,],[-23,23,-22,]),'UNIT':([0,2,5,6,7,11,19,22,23,31,33,34,37,38,],[13,13,13,-18,-17,13,-16,-25,-26,-24,13,13,-14,-15,]),'$end':([1,2,3,4,6,7,8,10,13,14,19,21,22,23,25,27,28,31,32,35,36,37,38,39,40,],[0,-6,-2,-3,-18,-17,-9,-12,-20,-1,-16,-7,-25,-26,-19,-4,-5,-24,-8,-13,-21,-14,-15,-10,-11,]),'X':([6,7,22,23,],[17,18,-25,-26,]),'PRODUCT':([8,10,13,21,25,32,35,36,39,40,],[-9,-12,-20,33,-19,-8,-13,-21,-10,-11,]),'DIVISION':([8,10,13,21,25,32,35,36,39,40,],[-9,-12,-20,34,-19,-8,-13,-21,-10,-11,]),'CLOSE_BRACKET':([8,10,13,15,16,21,25,32,35,36,39,40,],[-9,-12,-20,27,28,-7,-19,-8,-13,-21,-10,-11,]),'CLOSE_PAREN':([8,10,13,21,24,25,32,35,36,39,40,],[-9,-12,-20,-7,35,-19,-8,-13,-21,-10,-11,]),}\n \n _lr_action = {}\n for _k, _v in _lr_action_items.items():\n@@ -28,7 +17,7 @@ for _k, _v in _lr_action_items.items():\n       _lr_action[_x][_k] = _y\n del _lr_action_items\n \n-_lr_goto_items = {'main':([0,],[1,]),'factor':([0,],[2,]),'combined_units':([0,2,5,15,26,27,],[3,17,18,29,37,38,]),'signed_float':([0,],[6,]),'product_of_units':([0,2,5,15,26,27,],[8,8,8,8,8,8,]),'division_of_units':([0,2,5,15,26,27,],[9,9,9,9,9,9,]),'sign':([0,16,],[10,31,]),'unit_expression':([0,2,5,12,15,26,27,],[11,11,11,28,11,11,11,]),'unit_with_power':([0,2,5,12,15,26,27,],[14,14,14,14,14,14,14,]),'signed_int':([7,34,35,],[22,41,42,]),'numeric_power':([16,],[30,]),}\n+_lr_goto_items = {'main':([0,],[1,]),'factor':([0,],[2,]),'combined_units':([0,2,5,11,],[3,14,15,24,]),'signed_float':([0,],[6,]),'unit_expression':([0,2,5,11,33,34,],[8,8,8,8,39,40,]),'sign':([0,13,],[9,26,]),'unit_with_power':([0,2,5,11,33,34,],[10,10,10,10,10,10,]),'signed_int':([7,29,30,],[19,37,38,]),'rest_units':([8,],[21,]),'numeric_power':([13,],[25,]),'op_unit':([21,],[32,]),}\n \n _lr_goto = {}\n for _k, _v in _lr_goto_items.items():\n@@ -38,31 +27,30 @@ for _k, _v in _lr_goto_items.items():\n del _lr_goto_items\n _lr_productions = [\n   (\"S' -> main\",\"S'\",1,None,None,None),\n-  ('main -> factor combined_units','main',2,'p_main','cds.py',156),\n-  ('main -> combined_units','main',1,'p_main','cds.py',157),\n-  ('main -> DIMENSIONLESS','main',1,'p_main','cds.py',158),\n-  ('main -> OPEN_BRACKET combined_units CLOSE_BRACKET','main',3,'p_main','cds.py',159),\n-  ('main -> OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET','main',3,'p_main','cds.py',160),\n-  ('main -> factor','main',1,'p_main','cds.py',161),\n-  ('combined_units -> product_of_units','combined_units',1,'p_combined_units','cds.py',174),\n-  ('combined_units -> division_of_units','combined_units',1,'p_combined_units','cds.py',175),\n-  ('product_of_units -> unit_expression PRODUCT combined_units','product_of_units',3,'p_product_of_units','cds.py',181),\n-  ('product_of_units -> unit_expression','product_of_units',1,'p_product_of_units','cds.py',182),\n-  ('division_of_units -> DIVISION unit_expression','division_of_units',2,'p_division_of_units','cds.py',191),\n-  ('division_of_units -> unit_expression DIVISION combined_units','division_of_units',3,'p_division_of_units','cds.py',192),\n-  ('unit_expression -> unit_with_power','unit_expression',1,'p_unit_expression','cds.py',201),\n-  ('unit_expression -> OPEN_PAREN combined_units CLOSE_PAREN','unit_expression',3,'p_unit_expression','cds.py',202),\n-  ('factor -> signed_float X UINT signed_int','factor',4,'p_factor','cds.py',211),\n-  ('factor -> UINT X UINT signed_int','factor',4,'p_factor','cds.py',212),\n-  ('factor -> UINT signed_int','factor',2,'p_factor','cds.py',213),\n-  ('factor -> UINT','factor',1,'p_factor','cds.py',214),\n-  ('factor -> signed_float','factor',1,'p_factor','cds.py',215),\n-  ('unit_with_power -> UNIT numeric_power','unit_with_power',2,'p_unit_with_power','cds.py',232),\n-  ('unit_with_power -> UNIT','unit_with_power',1,'p_unit_with_power','cds.py',233),\n-  ('numeric_power -> sign UINT','numeric_power',2,'p_numeric_power','cds.py',242),\n-  ('sign -> SIGN','sign',1,'p_sign','cds.py',248),\n-  ('sign -> <empty>','sign',0,'p_sign','cds.py',249),\n-  ('signed_int -> SIGN UINT','signed_int',2,'p_signed_int','cds.py',258),\n-  ('signed_float -> sign UINT','signed_float',2,'p_signed_float','cds.py',264),\n-  ('signed_float -> sign UFLOAT','signed_float',2,'p_signed_float','cds.py',265),\n+  ('main -> factor combined_units','main',2,'p_main','cds.py',148),\n+  ('main -> combined_units','main',1,'p_main','cds.py',149),\n+  ('main -> DIMENSIONLESS','main',1,'p_main','cds.py',150),\n+  ('main -> OPEN_BRACKET combined_units CLOSE_BRACKET','main',3,'p_main','cds.py',151),\n+  ('main -> OPEN_BRACKET DIMENSIONLESS CLOSE_BRACKET','main',3,'p_main','cds.py',152),\n+  ('main -> factor','main',1,'p_main','cds.py',153),\n+  ('combined_units -> unit_expression rest_units','combined_units',2,'p_combined_units','cds.py',167),\n+  ('rest_units -> rest_units op_unit','rest_units',2,'p_rest_units','cds.py',178),\n+  ('rest_units -> <empty>','rest_units',0,'p_rest_units','cds.py',179),\n+  ('op_unit -> PRODUCT unit_expression','op_unit',2,'p_op_unit','cds.py',188),\n+  ('op_unit -> DIVISION unit_expression','op_unit',2,'p_op_unit','cds.py',189),\n+  ('unit_expression -> unit_with_power','unit_expression',1,'p_unit_expression','cds.py',195),\n+  ('unit_expression -> OPEN_PAREN combined_units CLOSE_PAREN','unit_expression',3,'p_unit_expression','cds.py',196),\n+  ('factor -> signed_float X UINT signed_int','factor',4,'p_factor','cds.py',205),\n+  ('factor -> UINT X UINT signed_int','factor',4,'p_factor','cds.py',206),\n+  ('factor -> UINT signed_int','factor',2,'p_factor','cds.py',207),\n+  ('factor -> UINT','factor',1,'p_factor','cds.py',208),\n+  ('factor -> signed_float','factor',1,'p_factor','cds.py',209),\n+  ('unit_with_power -> UNIT numeric_power','unit_with_power',2,'p_unit_with_power','cds.py',224),\n+  ('unit_with_power -> UNIT','unit_with_power',1,'p_unit_with_power','cds.py',225),\n+  ('numeric_power -> sign UINT','numeric_power',2,'p_numeric_power','cds.py',234),\n+  ('sign -> SIGN','sign',1,'p_sign','cds.py',240),\n+  ('sign -> <empty>','sign',0,'p_sign','cds.py',241),\n+  ('signed_int -> SIGN UINT','signed_int',2,'p_signed_int','cds.py',250),\n+  ('signed_float -> sign UINT','signed_float',2,'p_signed_float','cds.py',256),\n+  ('signed_float -> sign UFLOAT','signed_float',2,'p_signed_float','cds.py',257),\n ]\n"}
{"instance_id":"astropy__astropy-14508","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..d9e52ea525 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1298,32 +1298,26 @@ def _format_value(value):\n \n \n def _format_float(value):\n-    \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n-    if \".\" not in value_str and \"E\" not in value_str:\n-        value_str += \".0\"\n-    elif \"E\" in value_str:\n-        # On some Windows builds of Python (and possibly other platforms?) the\n-        # exponent is zero-padded out to, it seems, three digits.  Normalize\n-        # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"E\")\n-        if exponent[0] in (\"+\", \"-\"):\n-            sign = exponent[0]\n-            exponent = exponent[1:]\n-        else:\n-            sign = \"\"\n-        value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n-\n+    \"\"\"Format a floating number to ensure it gets the decimal point.\"\"\"\n+    value_str = str(value)\n+    if len(value_str) > 20:\n+        value_str = f\"{value:.16G}\"\n+        if \".\" not in value_str and \"E\" not in value_str:\n+            value_str += \".0\"\n+        elif \"E\" in value_str:\n+            # On some Windows builds of Python (and possibly other platforms?) the\n+            # exponent is zero-padded out to, it seems, three digits. Normalize\n+            # the format to pad only to two digits.\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n     # Limit the value string to at most 20 characters.\n-    str_len = len(value_str)\n-\n-    if str_len > 20:\n-        idx = value_str.find(\"E\")\n-\n-        if idx < 0:\n-            value_str = value_str[:20]\n-        else:\n-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n+    value_str = value_str[:20]\n+    return value_str\n \n     return value_str\n \n"}
{"instance_id":"astropy__astropy-14539","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 100cdf1b8c..d3608ef01d 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1449,7 +1449,7 @@ class TableDataDiff(_BaseDiff):\n                 arrb.dtype, np.floating\n             ):\n                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n-            elif \"P\" in col.format:\n+            elif \"P\" in col.format or \"Q\" in col.format:\n                 diffs = (\n                     [\n                         idx\ndiff --git a/astropy/io/fits/hdu/table.py b/astropy/io/fits/hdu/table.py\nindex 997f504f70..c1cf22a8d2 100644\n--- a/astropy/io/fits/hdu/table.py\n+++ b/astropy/io/fits/hdu/table.py\n@@ -190,6 +190,11 @@ class _TableLikeHDU(_ValidHDU):\n             raw_data = self._get_raw_data(self._data_size, np.uint8, self._data_offset)\n             tbsize = self._header[\"NAXIS1\"] * self._header[\"NAXIS2\"]\n             data = raw_data[:tbsize].view(dtype=columns.dtype, type=np.rec.recarray)\n+            for idx, col in enumerate(columns):\n+                if isinstance(col.format, (_FormatP, _FormatQ)):\n+                    col.array = np.array([np.array(x) for x in data.field(idx)])\n+                else:\n+                    col.array = data.field(idx)\n         else:\n             raw_data = self._get_raw_data(self._nrows, columns.dtype, self._data_offset)\n             if raw_data is None:\n"}
{"instance_id":"astropy__astropy-14598","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 1b3285ddce..ff5c4f192e 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -768,7 +768,7 @@ class Card(_Verify):\n         if m.group(\"bool\") is not None:\n             value = m.group(\"bool\") == \"T\"\n         elif m.group(\"strg\") is not None:\n-            value = re.sub(\"''\", \"'\", m.group(\"strg\"))\n+            value = m.group(\"strg\")\n         elif m.group(\"numr\") is not None:\n             #  Check for numbers with leading 0s.\n             numr = self._number_NFSC_RE.match(m.group(\"numr\"))\n@@ -778,7 +778,6 @@ class Card(_Verify):\n             else:\n                 sign = numr.group(\"sign\")\n             value = _str_to_num(sign + digt)\n-\n         elif m.group(\"cplx\") is not None:\n             #  Check for numbers with leading 0s.\n             real = self._number_NFSC_RE.match(m.group(\"real\"))\n@@ -797,7 +796,6 @@ class Card(_Verify):\n             value += _str_to_num(isign + idigt) * 1j\n         else:\n             value = UNDEFINED\n-\n         if not self._valuestring:\n             self._valuestring = m.group(\"valu\")\n         return value\n"}
{"instance_id":"astropy__astropy-7166","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..73fa5daf2a 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,9 +528,29 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n-                val.__doc__ is None):\n+            if not is_public_member(key):\n+                continue\n+\n+            # Handle properties\n+            if isinstance(val, property):\n+                # Inherit property's docstring\n+                if val.__doc__ is None:\n+                    for base in cls.__mro__[1:]:\n+                        super_property = getattr(base, key, None)\n+                        if isinstance(super_property, property):\n+                            val.__doc__ = super_property.__doc__\n+                            break\n+\n+                # Inherit property's fget docstring if it exists\n+                if val.fget is not None and val.fget.__doc__ is None:\n+                    for base in cls.__mro__[1:]:\n+                        super_property = getattr(base, key, None)\n+                        if isinstance(super_property, property) and super_property.fget is not None:\n+                            val.fget.__doc__ = super_property.fget.__doc__\n+                            break\n+\n+            # Handle regular functions\n+            elif inspect.isfunction(val) and val.__doc__ is None:\n                 for base in cls.__mro__[1:]:\n                     super_method = getattr(base, key, None)\n                     if super_method is not None:\n"}
{"instance_id":"astropy__astropy-7336","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py\nindex 8bece5a850..833d8bdf33 100644\n--- a/astropy/units/decorators.py\n+++ b/astropy/units/decorators.py\n@@ -220,7 +220,7 @@ class QuantityInput:\n             # Call the original function with any equivalencies in force.\n             with add_enabled_equivalencies(self.equivalencies):\n                 return_ = wrapped_function(*func_args, **func_kwargs)\n-            if wrapped_signature.return_annotation is not inspect.Signature.empty:\n+            if return_ is not None and wrapped_signature.return_annotation is not inspect.Signature.empty:\n                 return return_.to(wrapped_signature.return_annotation)\n             else:\n                 return return_\n@@ -229,3 +229,4 @@ class QuantityInput:\n \n \n quantity_input = QuantityInput.as_decorator\n+\n"}
{"instance_id":"astropy__astropy-7606","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..1b202395e9 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1710,6 +1710,8 @@ class UnrecognizedUnit(IrreducibleUnit):\n         _unrecognized_operator\n \n     def __eq__(self, other):\n+        if other is None:\n+            return False\n         other = Unit(other, parse_strict='silent')\n         return isinstance(other, UnrecognizedUnit) and self.name == other.name\n \n"}
{"instance_id":"astropy__astropy-7671","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex 3e784f9fc3..85094f04d5 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -6,7 +6,7 @@\n import inspect\n import types\n import importlib\n-from distutils.version import LooseVersion\n+from packaging import version as packaging_version\n \n \n __all__ = ['resolve_name', 'minversion', 'find_current_module',\n@@ -140,9 +140,9 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n         have_version = resolve_name(module.__name__, version_path)\n \n     if inclusive:\n-        return LooseVersion(have_version) >= LooseVersion(version)\n+        return packaging_version.parse(have_version) >= packaging_version.parse(version)\n     else:\n-        return LooseVersion(have_version) > LooseVersion(version)\n+        return packaging_version.parse(have_version) > packaging_version.parse(version)\n \n \n def find_current_module(depth=1, finddiff=False):\n@@ -383,3 +383,4 @@ def _isinstancemethod(cls, obj):\n     # This shouldn't happen, though this is the most sensible response if\n     # it does.\n     raise AttributeError(name)\n+\n"}
{"instance_id":"astropy__astropy-8707","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d738..2706579301 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -553,6 +553,8 @@ class Card(_Verify):\n         card(s).\n         \"\"\"\n \n+        if isinstance(image, bytes):\n+            image = image.decode('ascii')\n         card = cls()\n         card._image = _pad(image)\n         card._verified = False\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex ad07e6d52d..06e6fde9d7 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -348,6 +348,8 @@ class Header:\n             A new `Header` instance.\n         \"\"\"\n \n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n         cards = []\n \n         # If the card separator contains characters that may validly appear in\n"}
{"instance_id":"astropy__astropy-8872","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex ded609cbe9..903aae0b3e 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -377,9 +377,8 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n                             \"Numpy numeric type.\")\n \n         # by default, cast any integer, boolean, etc., to float\n-        if dtype is None and (not (np.can_cast(np.float32, value.dtype)\n-                                   or value.dtype.fields)\n-                              or value.dtype.kind == 'O'):\n+        # By default, cast integer, boolean, or object types to float, but preserve float16\n+        if dtype is None and (value.dtype.kind in 'iubO'):\n             value = value.astype(float)\n \n         value = value.view(cls)\n"}
{"instance_id":"django__django-10097","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/validators.py b/django/core/validators.py\nindex 92394a7eae..909388f5ab 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -94,7 +94,7 @@ class URLValidator(RegexValidator):\n \n     regex = _lazy_re_compile(\n         r'^(?:[a-z0-9\\.\\-\\+]*)://'  # scheme is validated separately\n-        r'(?:\\S+(?::\\S*)?@)?'  # user:pass authentication\n+        r'(?:(?:[a-z0-9\\.\\-\\+]|%[0-9a-f]{2})+(?::(?:[a-z0-9\\.\\-\\+]|%[0-9a-f]{2})*)?@)?'  # user:pass authentication\n         r'(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')'\n         r'(?::\\d{2,5})?'  # port\n         r'(?:[/?#][^\\s]*)?'  # resource path\n"}
{"instance_id":"django__django-10554","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a791908caf..6d5fd7a48a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -434,6 +434,8 @@ class SQLCompiler:\n                     ))\n                 part_sql, part_args = compiler.as_sql()\n                 if compiler.query.combinator:\n+                    # Adjust the select list to include ordering columns\n+                    compiler.query._adjust_set_operation_ordering()\n                     # Wrap in a subquery if wrapping in parentheses isn't\n                     # supported.\n                     if not features.supports_parentheses_in_compound:\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..3a87a65e71 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -637,6 +637,9 @@ class Query(BaseExpression):\n         # the current ordering is used.\n         self.order_by = rhs.order_by or self.order_by\n         self.extra_order_by = rhs.extra_order_by or self.extra_order_by\n+        # If combining with set operations, adjust the select list to include ordering columns\n+        if self.combinator:\n+            self._adjust_set_operation_ordering(rhs)\n \n     def deferred_to_data(self, target, callback):\n         \"\"\"\n"}
{"instance_id":"django__django-10880","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex ac0b62d0bf..8fa177b3e5 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -68,7 +68,7 @@ class Aggregate(Func):\n         return []\n \n     def as_sql(self, compiler, connection, **extra_context):\n-        extra_context['distinct'] = 'DISTINCT' if self.distinct else ''\n+        extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''\n         if self.filter:\n             if connection.features.supports_aggregate_filter_clause:\n                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)\n@@ -153,3 +153,4 @@ class Variance(NumericOutputFieldMixin, Aggregate):\n \n     def _get_repr_options(self):\n         return {**super()._get_repr_options(), 'sample': self.function == 'VAR_SAMP'}\n+\n"}
{"instance_id":"django__django-10973","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7fca6eff30..abdc79fe7b 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -2,7 +2,6 @@ import os\n import signal\n import subprocess\n \n-from django.core.files.temp import NamedTemporaryFile\n from django.db.backends.base.client import BaseDatabaseClient\n \n \n@@ -34,38 +33,21 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n-        temp_pgpass = None\n+        env = os.environ.copy()\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n             if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n+                env['PGPASSWORD'] = passwd\n+\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, env=env, check=True)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n+            if 'PGPASSWORD' in env:\n+                del env['PGPASSWORD']\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n+\n"}
{"instance_id":"django__django-10999","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\nindex 8d08b7d1d3..dcef10ba7f 100644\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -29,7 +29,7 @@ datetime_re = re.compile(\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n+    r'((?:(?P<hours>-?\\d+):)(?=-?\\d+:-?\\d+))?'\n     r'(?:(?P<minutes>-?\\d+):)?'\n     r'(?P<seconds>-?\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n@@ -144,3 +144,4 @@ def parse_duration(value):\n             kw['microseconds'] = '-' + kw['microseconds']\n         kw = {k: float(v) for k, v in kw.items() if v is not None}\n         return days + sign * datetime.timedelta(**kw)\n+\n"}
{"instance_id":"django__django-11066","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 2b5f688136..3a2845de71 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -24,7 +24,7 @@ class RenameContentType(migrations.RunPython):\n             content_type.model = new_model\n             try:\n                 with transaction.atomic(using=db):\n-                    content_type.save(update_fields={'model'})\n+                    content_type.save(using=db, update_fields={'model'})\n             except IntegrityError:\n                 # Gracefully fallback if a stale content type causes a\n                 # conflict as remove_stale_contenttypes will take care of\n@@ -132,3 +132,4 @@ def create_contenttypes(app_config, verbosity=2, interactive=True, using=DEFAULT\n     if verbosity >= 2:\n         for ct in cts:\n             print(\"Adding content type '%s | %s'\" % (ct.app_label, ct.model))\n+\n"}
{"instance_id":"django__django-11087","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..6f19cceb11 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -234,7 +234,7 @@ class Collector:\n         \"\"\"\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only('pk')\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 84236107f3..731c3e49a1 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -684,6 +684,7 @@ class QuerySet:\n             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n \n         del_query = self._chain()\n+        del_query = del_query.only('pk')\n \n         # The delete is actually 2 queries - one to find related objects,\n         # and one to delete. Make sure that the discovery of related\n"}
{"instance_id":"django__django-11095","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f9a0..f3a0368966 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -554,6 +554,22 @@ class ModelAdmin(BaseModelAdmin):\n     preserve_filters = True\n     inlines = []\n \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook for specifying custom inlines based on the request or model instance.\n+\n+        Default implementation returns :attr:`self.inlines`.\n+\n+        Args:\n+            request: The current request.\n+            obj: The object being edited, or None if adding a new object.\n+\n+        Returns:\n+            list: A list of inline classes to be used for this request and object.\n+        \"\"\"\n+        return self.inlines\n+\n+\n     # Custom templates (designed to be over-ridden in subclasses)\n     add_form_template = None\n     change_form_template = None\n@@ -582,7 +598,7 @@ class ModelAdmin(BaseModelAdmin):\n \n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n"}
{"instance_id":"django__django-11119","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/engine.py b/django/template/engine.py\nindex dfaa67ba12..4a81c425b9 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -160,7 +160,7 @@ class Engine:\n         if isinstance(context, Context):\n             return t.render(context)\n         else:\n-            return t.render(Context(context))\n+            return t.render(Context(context, autoescape=self.autoescape))\n \n     def select_template(self, template_name_list):\n         \"\"\"\n@@ -178,3 +178,4 @@ class Engine:\n                 continue\n         # If we get here, none of the templates could be loaded\n         raise TemplateDoesNotExist(', '.join(not_found))\n+\n"}
{"instance_id":"django__django-11138","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..e1d78267cb 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -70,7 +70,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            from_tz = self.connection.settings_dict.get('TIME_ZONE', 'UTC')\n+            field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, from_tz, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..639049617e 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -99,9 +99,10 @@ END;\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n+        from_tz = self.connection.settings_dict.get('TIME_ZONE', '0:00')\n+        # Convert from database timezone to local time, returning TIMESTAMP WITH TIME ZONE\n         # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, from_tz, tzname)\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex c4b02e5c60..375942204f 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -85,9 +85,11 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return \"django_time_trunc('%s', %s)\" % (lookup_type.lower(), field_name)\n \n     def _convert_tzname_to_sql(self, tzname):\n-        return \"'%s'\" % tzname if settings.USE_TZ else 'NULL'\n-\n-    def datetime_cast_date_sql(self, field_name, tzname):\n+        if settings.USE_TZ:\n+            tzname = self.connection.settings_dict.get('TIME_ZONE', tzname)\n+            return \"'%s'\" % tzname\n+        else:\n+            return 'NULL'\n         return \"django_datetime_cast_date(%s, %s)\" % (\n             field_name, self._convert_tzname_to_sql(tzname),\n         )\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 7a582aa404..3f27c930bc 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -22,7 +22,7 @@ class TimezoneMixin:\n         tzname = None\n         if settings.USE_TZ:\n             if self.tzinfo is None:\n-                tzname = timezone.get_current_timezone_name()\n+                tzname = settings.DATABASES.get('default', {}).get('TIME_ZONE') or timezone.get_current_timezone_name()\n             else:\n                 tzname = timezone._get_timezone_name(self.tzinfo)\n         return tzname\n"}
{"instance_id":"django__django-11141","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 8c308621d2..7050f88bf9 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -86,9 +86,6 @@ class MigrationLoader:\n             else:\n                 # Empty directories are namespaces.\n                 # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n-                    self.unmigrated_apps.add(app_config.label)\n-                    continue\n                 # Module is not a package (e.g. migrations.py).\n                 if not hasattr(module, '__path__'):\n                     self.unmigrated_apps.add(app_config.label)\n@@ -322,3 +319,4 @@ class MigrationLoader:\n         See graph.make_state() for the meaning of \"nodes\" and \"at_end\".\n         \"\"\"\n         return self.graph.make_state(nodes=nodes, at_end=at_end, real_apps=list(self.unmigrated_apps))\n+\ndiff --git a/django/db/migrations/questioner.py b/django/db/migrations/questioner.py\nindex 47a3052c80..5019bdd185 100644\n--- a/django/db/migrations/questioner.py\n+++ b/django/db/migrations/questioner.py\n@@ -44,14 +44,14 @@ class MigrationQuestioner:\n         except ImportError:\n             return self.defaults.get(\"ask_initial\", False)\n         else:\n-            # getattr() needed on PY36 and older (replace with attribute access).\n-            if getattr(migrations_module, \"__file__\", None):\n-                filenames = os.listdir(os.path.dirname(migrations_module.__file__))\n-            elif hasattr(migrations_module, \"__path__\"):\n+            if hasattr(migrations_module, \"__path__\"):\n                 if len(migrations_module.__path__) > 1:\n                     return False\n                 filenames = os.listdir(list(migrations_module.__path__)[0])\n-            return not any(x.endswith(\".py\") for x in filenames if x != \"__init__.py\")\n+                return not any(x.endswith(\".py\") for x in filenames if x != \"__init__.py\")\n+            else:\n+                # Module is not a package.\n+                return False\n \n     def ask_not_null_addition(self, field_name, model_name):\n         \"\"\"Adding a NOT NULL field to a model.\"\"\"\n@@ -237,3 +237,4 @@ class NonInteractiveMigrationQuestioner(MigrationQuestioner):\n     def ask_auto_now_add_addition(self, field_name, model_name):\n         # We can't ask the user, so act like the user aborted.\n         sys.exit(3)\n+\n"}
{"instance_id":"django__django-11149","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b..711f1e5d6f 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2113,31 +2113,18 @@ class InlineModelAdmin(BaseModelAdmin):\n \n     def has_add_permission(self, request, obj):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            return False\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n-        return super().has_change_permission(request)\n+            return False\n+        return super().has_change_permission(request, obj)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            return False\n         return super().has_delete_permission(request, obj)\n-\n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             opts = self.opts\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex eda09c2ebe..ef6f3f36b7 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1053,7 +1053,7 @@ def create_many_to_many_intermediary_model(field, klass):\n         'auto_created': klass,\n         'app_label': klass._meta.app_label,\n         'db_tablespace': klass._meta.db_tablespace,\n-        'unique_together': (from_, to),\n+        'default_permissions': (),\n         'verbose_name': _('%(from)s-%(to)s relationship') % {'from': from_, 'to': to},\n         'verbose_name_plural': _('%(from)s-%(to)s relationships') % {'from': from_, 'to': to},\n         'apps': field.model._meta.apps,\ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2b426c37a5..fb4d79299e 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -69,6 +69,7 @@ from django.db.models import Q, signals\n from django.db.models.query import QuerySet\n from django.utils.functional import cached_property\n \n+from django.core.exceptions import PermissionDenied\n \n class ForwardManyToOneDescriptor:\n     \"\"\"\n@@ -956,44 +957,24 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n             constrained_target = self.constrained_target\n             return constrained_target.count() if constrained_target else super().count()\n \n+        from django.core.exceptions import PermissionDenied\n+\n         def add(self, *objs, through_defaults=None):\n-            self._remove_prefetched_objects()\n-            db = router.db_for_write(self.through, instance=self.instance)\n-            with transaction.atomic(using=db, savepoint=False):\n-                self._add_items(\n-                    self.source_field_name, self.target_field_name, *objs,\n-                    through_defaults=through_defaults,\n-                )\n-                # If this is a symmetrical m2m relation to self, add the mirror\n-                # entry in the m2m table. `through_defaults` aren't used here\n-                # because of the system check error fields.E332: Many-to-many\n-                # fields with intermediate tables must not be symmetrical.\n-                if self.symmetrical:\n-                    self._add_items(self.target_field_name, self.source_field_name, *objs)\n+            if self.through._meta.auto_created:\n+                raise PermissionDenied(\"Cannot modify relationships for auto-created ManyToManyFields.\")\n+            super().add(*objs, through_defaults=through_defaults)\n         add.alters_data = True\n \n         def remove(self, *objs):\n-            self._remove_prefetched_objects()\n-            self._remove_items(self.source_field_name, self.target_field_name, *objs)\n+            if self.through._meta.auto_created:\n+                raise PermissionDenied(\"Cannot modify relationships for auto-created ManyToManyFields.\")\n+            super().remove(*objs)\n         remove.alters_data = True\n \n         def clear(self):\n-            db = router.db_for_write(self.through, instance=self.instance)\n-            with transaction.atomic(using=db, savepoint=False):\n-                signals.m2m_changed.send(\n-                    sender=self.through, action=\"pre_clear\",\n-                    instance=self.instance, reverse=self.reverse,\n-                    model=self.model, pk_set=None, using=db,\n-                )\n-                self._remove_prefetched_objects()\n-                filters = self._build_remove_filters(super().get_queryset().using(db))\n-                self.through._default_manager.using(db).filter(filters).delete()\n-\n-                signals.m2m_changed.send(\n-                    sender=self.through, action=\"post_clear\",\n-                    instance=self.instance, reverse=self.reverse,\n-                    model=self.model, pk_set=None, using=db,\n-                )\n+            if self.through._meta.auto_created:\n+                raise PermissionDenied(\"Cannot modify relationships for auto-created ManyToManyFields.\")\n+            super().clear()\n         clear.alters_data = True\n \n         def set(self, objs, *, clear=False, through_defaults=None):\n"}
{"instance_id":"django__django-11163","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex d157c291ef..5edbbd376f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\n"}
{"instance_id":"django__django-11206","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435..a2e004f157 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -27,8 +27,15 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     # sign\n     sign = ''\n     if isinstance(number, Decimal):\n+        # Handle numbers that are too small to represent with the given decimal_pos\n+        if decimal_pos is not None and abs(number) < Decimal('1e-{}'.format(decimal_pos)):\n+            sign = '-' if number.is_signed() else ''\n+            int_part = '0'\n+            dec_part = '0' * decimal_pos\n+            dec_part = dec_part and decimal_sep + dec_part\n+            return sign + int_part + dec_part\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n-        # scientific notation to avoid high memory usage in {:f}'.format().\n+        # scientific notation to avoid high memory usage in '{:f}'.format().\n         _, digits, exponent = number.as_tuple()\n         if abs(exponent) + len(digits) > 200:\n             number = '{:e}'.format(number)\n@@ -77,3 +84,4 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n             cnt += 1\n         int_part = int_part_gd[::-1]\n     return sign + int_part + dec_part\n+\n"}
{"instance_id":"django__django-11211","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb48c..703c3583b0 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -1,4 +1,5 @@\n from collections import defaultdict\n+import uuid\n \n from django.contrib.contenttypes.models import ContentType\n from django.core import checks\n@@ -184,6 +185,9 @@ class GenericForeignKey(FieldCacheMixin):\n             if ct_id is not None:\n                 fk_val = getattr(instance, self.fk_field)\n                 if fk_val is not None:\n+                    # Convert UUID to string if necessary\n+                    if isinstance(fk_val, uuid.UUID):\n+                        fk_val = str(fk_val)\n                     fk_dict[ct_id].add(fk_val)\n                     instance_dict[ct_id] = instance\n \n@@ -194,20 +198,21 @@ class GenericForeignKey(FieldCacheMixin):\n             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n \n         # For doing the join in Python, we have to match both the FK val and the\n-        # content type, so we use a callable that returns a (fk, class) pair.\n         def gfk_key(obj):\n             ct_id = getattr(obj, ct_attname)\n             if ct_id is None:\n                 return None\n             else:\n                 model = self.get_content_type(id=ct_id,\n-                                              using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                                             using=obj._state.db).model_class()\n+                fk_val = getattr(obj, self.fk_field)\n+                if isinstance(fk_val, uuid.UUID):\n+                    fk_val = str(fk_val)\n+                return (fk_val, model)\n \n         return (\n             ret_val,\n-            lambda obj: (obj.pk, obj.__class__),\n+            lambda obj: (str(obj.pk) if isinstance(obj.pk, uuid.UUID) else obj.pk, obj.__class__),\n             gfk_key,\n             True,\n             self.name,\n@@ -229,7 +234,9 @@ class GenericForeignKey(FieldCacheMixin):\n         rel_obj = self.get_cached_value(instance, default=None)\n         if rel_obj is not None:\n             ct_match = ct_id == self.get_content_type(obj=rel_obj, using=instance._state.db).id\n-            pk_match = rel_obj._meta.pk.to_python(pk_val) == rel_obj.pk\n+            pk_val = pk_val if not isinstance(pk_val, uuid.UUID) else str(pk_val)\n+            rel_pk = rel_obj.pk if not isinstance(rel_obj.pk, uuid.UUID) else str(rel_obj.pk)\n+            pk_match = rel_obj._meta.pk.to_python(pk_val) == rel_pk\n             if ct_match and pk_match:\n                 return rel_obj\n             else:\n"}
{"instance_id":"django__django-11239","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex cf4df76882..492fea4b5b 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,6 +1,7 @@\n import os\n import signal\n import subprocess\n+import shlex\n \n from django.db.backends.base.client import BaseDatabaseClient\n \n@@ -17,19 +18,44 @@ class DatabaseClient(BaseDatabaseClient):\n         dbname = conn_params.get('database', '')\n         user = conn_params.get('user', '')\n         passwd = conn_params.get('password', '')\n+        options = conn_params.get('options', {})\n+        ssl_options = {}\n \n-        if user:\n-            args += ['-U', user]\n-        if host:\n-            args += ['-h', host]\n-        if port:\n-            args += ['-p', str(port)]\n-        args += [dbname]\n+        # Collect SSL options\n+        for ssl_opt in ['sslmode', 'sslrootcert', 'sslcert', 'sslkey']:\n+            value = options.get(ssl_opt)\n+            if value:\n+                ssl_options[ssl_opt] = value\n+\n+        # Build the connection string\n+        conninfo = ''\n+\n+        def add_param(name, value):\n+            nonlocal conninfo\n+            if value:\n+                conninfo += f\"{name}={shlex.quote(str(value))} \"\n+\n+        add_param('dbname', dbname)\n+        add_param('user', user)\n+        add_param('host', host)\n+        add_param('port', port)\n+        # Do not include password for security reasons\n+\n+        # Add SSL options\n+        for key, value in ssl_options.items():\n+            add_param(key, value)\n+\n+        # Strip trailing space\n+        conninfo = conninfo.strip()\n+\n+        if conninfo:\n+            args += ['-d', conninfo]\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\n+\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n@@ -40,3 +66,4 @@ class DatabaseClient(BaseDatabaseClient):\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n+\n"}
{"instance_id":"django__django-11265","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 90289d0da2..ff53affa80 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -330,6 +330,8 @@ class FilteredRelation:\n         raise NotImplementedError('FilteredRelation.resolve_expression() is unused.')\n \n     def as_sql(self, compiler, connection):\n+        # Ensure the alias is correctly set and used in the query.\n+        self.alias = compiler.query.alias_map[self.path[-1]].lhs_alias\n         # Resolve the condition in Join.filtered_relation.\n         query = compiler.query\n         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d69c24419b..7f799cf9ac 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1344,7 +1344,7 @@ class Query(BaseExpression):\n                 child_clause, needed_inner = self.build_filter(\n                     child, can_reuse=used_aliases, branch_negated=branch_negated,\n                     current_negated=current_negated, allow_joins=allow_joins,\n-                    split_subq=split_subq, simple_col=simple_col,\n+                    split_subq=not branch_negated, simple_col=simple_col,\n                 )\n                 joinpromoter.add_votes(needed_inner)\n             if child_clause:\n@@ -1668,6 +1668,7 @@ class Query(BaseExpression):\n         query = Query(self.model)\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n+        query.annotations = self.annotations.copy()\n         # Try to have as simple as possible subquery -> trim leading joins from\n         # the subquery.\n         trimmed_prefix, contains_louter = query.trim_start(names_with_path)\n"}
{"instance_id":"django__django-11276","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/html.py b/django/utils/html.py\nindex 9c519978f5..36bb77f93f 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -1,5 +1,6 @@\n \"\"\"HTML utilities suitable for global use.\"\"\"\n \n+import html\n import json\n import re\n from html.parser import HTMLParser\n@@ -24,14 +25,6 @@ word_split_re = re.compile(r'''([\\s<>\"']+)''')\n simple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\n simple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)\n \n-_html_escapes = {\n-    ord('&'): '&amp;',\n-    ord('<'): '&lt;',\n-    ord('>'): '&gt;',\n-    ord('\"'): '&quot;',\n-    ord(\"'\"): '&#39;',\n-}\n-\n \n @keep_lazy(str, SafeString)\n def escape(text):\n@@ -43,7 +36,7 @@ def escape(text):\n     This may result in double-escaping. If this is a concern, use\n     conditional_escape() instead.\n     \"\"\"\n-    return mark_safe(str(text).translate(_html_escapes))\n+    return mark_safe(html.escape(str(text)))\n \n \n _js_escapes = {\n@@ -388,3 +381,4 @@ def html_safe(klass):\n     klass.__str__ = lambda self: mark_safe(klass_str(self))\n     klass.__html__ = lambda self: str(self)\n     return klass\n+\n"}
{"instance_id":"django__django-11292","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 0c3a981290..118dc38a5c 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -286,6 +286,10 @@ class BaseCommand:\n             '--force-color', action='store_true',\n             help='Force colorization of the command output.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         self.add_arguments(parser)\n         return parser\n \n"}
{"instance_id":"django__django-11299","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex e7f81d3ee9..024d62ed0d 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -1,3 +1,4 @@\n+from django.db.models.expressions import Col, SimpleCol\n from django.db.models.query_utils import Q\n from django.db.models.sql.query import Query\n \n@@ -37,6 +38,9 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n+        sql = sql.replace(\n+            ' %s.' % compiler.quote_name_unless_alias(query.get_initial_alias()), ' '\n+        )\n         return sql % tuple(schema_editor.quote_value(p) for p in params)\n \n     def constraint_sql(self, model, schema_editor):\n@@ -119,3 +123,4 @@ class UniqueConstraint(BaseConstraint):\n         if self.condition:\n             kwargs['condition'] = self.condition\n         return path, args, kwargs\n+\n"}
{"instance_id":"django__django-11333","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 2304e7761d..53e0e61672 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -21,6 +21,7 @@ class BaseHandler:\n     _middleware_chain = None\n \n     def load_middleware(self):\n+        set_urlconf(settings.ROOT_URLCONF)\n         \"\"\"\n         Populate middleware lists from settings.MIDDLEWARE.\n \ndiff --git a/django/urls/base.py b/django/urls/base.py\nindex 0e1c3d909c..03e100374d 100644\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -6,6 +6,7 @@ from django.utils.encoding import iri_to_uri\n from django.utils.functional import lazy\n from django.utils.translation import override\n \n+from django.conf import settings\n from .exceptions import NoReverseMatch, Resolver404\n from .resolvers import get_ns_resolver, get_resolver\n from .utils import get_callable\n@@ -28,6 +29,8 @@ def resolve(path, urlconf=None):\n def reverse(viewname, urlconf=None, args=None, kwargs=None, current_app=None):\n     if urlconf is None:\n         urlconf = get_urlconf()\n+        if urlconf is None:\n+            urlconf = settings.ROOT_URLCONF\n     resolver = get_resolver(urlconf)\n     args = args or []\n     kwargs = kwargs or {}\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 247e3680c0..e913a127f7 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -63,10 +63,13 @@ class ResolverMatch:\n         )\n \n \n-@functools.lru_cache(maxsize=None)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n+    return _get_cached_resolver(urlconf)\n+\n+@functools.lru_cache(maxsize=None)\n+def _get_cached_resolver(urlconf):\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n \n"}
{"instance_id":"django__django-11400","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..42fd687193 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -198,6 +198,8 @@ class RelatedFieldListFilter(FieldListFilter):\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +421,20 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+        ordering = ()\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering\n+        return field.get_choices(\n+            include_blank=False,\n+            limit_choices_to={'pk__in': pk_qs},\n+            ordering=ordering\n+        )\n+        return field.get_choices(\n+            include_blank=False,\n+            limit_choices_to={'pk__in': pk_qs},\n+            ordering=ordering\n+        )\n         return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n"}
{"instance_id":"django__django-11433","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..5bdd4b84c6 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -48,9 +48,6 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n-            continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n         if isinstance(f, models.FileField):\n@@ -80,6 +77,9 @@ def model_to_dict(instance, fields=None, exclude=None):\n     \"\"\"\n     opts = instance._meta\n     data = {}\n+    for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n+        if not getattr(f, 'editable', False):\n+            continue\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n@@ -87,10 +87,9 @@ def model_to_dict(instance, fields=None, exclude=None):\n             continue\n         if exclude and f.name in exclude:\n             continue\n+        if f.has_default() and f.value_from_object(instance) == f.get_default():\n+            continue\n         data[f.name] = f.value_from_object(instance)\n-    return data\n-\n-\n def apply_limit_choices_to_to_formfield(formfield):\n     \"\"\"Apply limit_choices_to to the formfield's queryset if needed.\"\"\"\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n@@ -287,9 +286,11 @@ class BaseModelForm(BaseForm):\n             object_data = {}\n         else:\n             self.instance = instance\n-            object_data = model_to_dict(instance, opts.fields, opts.exclude)\n-        # if initial was provided, it should override the values from instance\n-        if initial is not None:\n+            instance_data = model_to_dict(instance, opts.fields, opts.exclude)\n+            object_data = {\n+                k: v for k, v in instance_data.items()\n+                if not (instance._meta.get_field(k).has_default() and v == instance._meta.get_field(k).get_default())\n+            }\n             object_data.update(initial)\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n         # It is False by default so overriding self.clean() and failing to call\n"}
{"instance_id":"django__django-11451","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722757..1c1cec8b33 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):\n     def authenticate(self, request, username=None, password=None, **kwargs):\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n+        if username is None or password is None:\n+            return None\n         try:\n             user = UserModel._default_manager.get_by_natural_key(username)\n         except UserModel.DoesNotExist:\n"}
{"instance_id":"django__django-11477","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/urls/base.py b/django/urls/base.py\nindex 0e1c3d909c..23dbac7451 100644\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -171,10 +171,13 @@ def translate_url(url, lang_code):\n     else:\n         to_be_reversed = \"%s:%s\" % (match.namespace, match.url_name) if match.namespace else match.url_name\n         with override(lang_code):\n+            # Remove None values from kwargs to avoid 'None' in URL when optional parameters are missing\n+            new_kwargs = {k: v for k, v in match.kwargs.items() if v is not None}\n             try:\n-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)\n+                url = reverse(to_be_reversed, args=match.args, kwargs=new_kwargs)\n             except NoReverseMatch:\n                 pass\n             else:\n                 url = urlunsplit((parsed.scheme, parsed.netloc, url, parsed.query, parsed.fragment))\n     return url\n+\n"}
{"instance_id":"django__django-11490","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1544beb613..c6a0ec6afd 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -789,6 +789,8 @@ class QuerySet:\n             clone = clone.annotate(**expressions)\n         clone._fields = fields\n         clone.query.set_values(fields)\n+        clone.query.set_annotation_mask(None)\n+        clone.query.set_extra_mask(None)\n         return clone\n \n     def values(self, *fields, **expressions):\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..c2e43c2867 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,12 +425,14 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n-                    compiler.query.set_values((\n-                        *self.query.extra_select,\n-                        *self.query.values_select,\n-                        *self.query.annotation_select,\n-                    ))\n+                # Ensure that the columns list is the same for all combined queries.\n+                compiler.query.set_values((\n+                    *self.query.extra_select,\n+                    *self.query.values_select,\n+                    *self.query.annotation_select,\n+                ))\n+                compiler.query.set_annotation_mask(self.query.annotation_select_mask)\n+                compiler.query.set_extra_mask(self.query.extra_select_mask)\n                 part_sql, part_args = compiler.as_sql()\n                 if compiler.query.combinator:\n                     # Wrap in a subquery if wrapping in parentheses isn't\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 08d7faf194..1e9cea8d9c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2031,6 +2031,8 @@ class Query(BaseExpression):\n         self.select_related = False\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n+        self.set_annotation_mask(None)\n+        self.set_extra_mask(None)\n \n         if self.group_by is True:\n             self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n"}
{"instance_id":"django__django-11532","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex e393b4cf5c..33f1331dd3 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -257,7 +257,13 @@ class EmailMessage:\n             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)\n         if 'message-id' not in header_names:\n             # Use cached DNS_NAME for performance\n-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)\n+            domain = str(DNS_NAME)\n+            try:\n+                domain.encode('ascii')\n+            except UnicodeEncodeError:\n+                domain = domain.encode('idna').decode('ascii')\n+            msgid = make_msgid(domain=domain)\n+            msg['Message-ID'] = msgid\n         for name, value in self.extra_headers.items():\n             if name.lower() != 'from':  # From is already handled\n                 msg[name] = value\ndiff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex d18dfe4667..598a059b4e 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -13,7 +13,13 @@ class CachedDnsName:\n \n     def get_fqdn(self):\n         if not hasattr(self, '_fqdn'):\n-            self._fqdn = socket.getfqdn()\n+            fqdn = socket.getfqdn()\n+            # Convert non-ASCII characters to Punycode using idna encoding\n+            try:\n+                fqdn.encode('ascii')\n+            except UnicodeEncodeError:\n+                fqdn = fqdn.encode('idna').decode('ascii')\n+            self._fqdn = fqdn\n         return self._fqdn\n \n \n"}
{"instance_id":"django__django-11551","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex f82c20c2f1..9fd77b5d41 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n-        elif hasattr(obj.model, item):\n+        else:\n             try:\n                 field = obj.model._meta.get_field(item)\n             except FieldDoesNotExist:\n-                return []\n-            else:\n-                if isinstance(field, models.ManyToManyField):\n+                try:\n+                    field = getattr(obj.model, item)\n+                except AttributeError:\n                     return [\n                         checks.Error(\n-                            \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                            \"The value of '%s' refers to '%s', which is not a callable, \"\n+                            \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n+                                label, item, obj.__class__.__name__,\n+                                obj.model._meta.app_label, obj.model._meta.object_name,\n+                            ),\n                             obj=obj.__class__,\n-                            id='admin.E109',\n+                            id='admin.E108',\n                         )\n                     ]\n-                return []\n-        else:\n-            return [\n-                checks.Error(\n-                    \"The value of '%s' refers to '%s', which is not a callable, \"\n-                    \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n-                        label, item, obj.__class__.__name__,\n-                        obj.model._meta.app_label, obj.model._meta.object_name,\n-                    ),\n-                    obj=obj.__class__,\n-                    id='admin.E108',\n-                )\n-            ]\n+            if isinstance(field, models.ManyToManyField):\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                        obj=obj.__class__,\n+                        id='admin.E109',\n+                    )\n+                ]\n+            return []\n \n     def _check_list_display_links(self, obj):\n         \"\"\" Check that list_display_links is a unique subset of list_display.\n"}
{"instance_id":"django__django-11555","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..6f9644dabc 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -16,6 +16,7 @@ from collections.abc import Iterator, Mapping\n from itertools import chain, count, product\n from string import ascii_uppercase\n \n+from django.db.models.expressions import OrderBy\n from django.core.exceptions import (\n     EmptyResultSet, FieldDoesNotExist, FieldError,\n )\n@@ -2217,6 +2218,13 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+    if isinstance(field, OrderBy):\n+        descending = field.descending\n+        field = field.expression.name\n+        if descending:\n+            return field, ORDER_DIR[default][1]\n+        else:\n+            return field, ORDER_DIR[default][0]\n     dirn = ORDER_DIR[default]\n     if field[0] == '-':\n         return field[1:], dirn[1]\n"}
{"instance_id":"django__django-11603","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex da4ff928aa..d263cab55c 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -99,6 +99,7 @@ class Aggregate(Func):\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -142,6 +143,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):\n class Sum(FixDurationInputMixin, Aggregate):\n     function = 'SUM'\n     name = 'Sum'\n+    allow_distinct = True\n \n \n class Variance(NumericOutputFieldMixin, Aggregate):\n@@ -153,3 +155,4 @@ class Variance(NumericOutputFieldMixin, Aggregate):\n \n     def _get_repr_options(self):\n         return {**super()._get_repr_options(), 'sample': self.function == 'VAR_SAMP'}\n+\n"}
{"instance_id":"django__django-11728","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..dd2bc5b4ac 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -146,7 +146,7 @@ if docutils_is_available:\n         create_reference_role(name, urlbase)\n \n # Match the beginning of a named or unnamed group.\n-named_group_matcher = re.compile(r'\\(\\?P(<\\w+>)')\n+named_group_matcher = re.compile(r'\\(\\?P<(\\w+)>')\n unnamed_group_matcher = re.compile(r'\\(')\n \n \n@@ -166,13 +166,9 @@ def replace_named_groups(pattern):\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n         unmatched_open_brackets, prev_char = 1, None\n-        for idx, val in enumerate(pattern[end:]):\n-            # If brackets are balanced, the end of the string for the current\n-            # named capture group pattern has been reached.\n-            if unmatched_open_brackets == 0:\n-                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n-                break\n-\n+        idx = end\n+        while idx < len(pattern):\n+            val = pattern[idx]\n             # Check for unescaped `(` and `)`. They mark the start and end of a\n             # nested group.\n             if val == '(' and prev_char != '\\\\':\n@@ -180,7 +176,20 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n-\n+            idx += 1\n+            # If brackets are balanced, the end of the string for the current\n+            # named capture group pattern has been reached.\n+            if unmatched_open_brackets == 0:\n+                group_pattern_and_name.append((pattern[start:idx], '<%s>' % group_name))\n+                break\n+        else:\n+            # If we reach the end, check if brackets are balanced\n+            if unmatched_open_brackets == 0:\n+                group_pattern_and_name.append((pattern[start:], '<%s>' % group_name))\n+            else:\n+                # Handle unbalanced parentheses\n+                group_pattern_and_name.append((pattern[start:], '<%s>' % group_name))\n+                break\n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n         pattern = pattern.replace(group_pattern, group_name)\n@@ -200,38 +209,35 @@ def replace_unnamed_groups(pattern):\n     for start in unnamed_group_indices:\n         # Handle nested parentheses, e.g. '^b/((x|y)\\w+)$'.\n         unmatched_open_brackets, prev_char = 1, None\n-        for idx, val in enumerate(pattern[start + 1:]):\n-            if unmatched_open_brackets == 0:\n-                group_indices.append((start, start + 1 + idx))\n-                break\n-\n-            # Check for unescaped `(` and `)`. They mark the start and end of\n-            # a nested group.\n+        idx = start + 1\n+        while idx < len(pattern):\n+            val = pattern[idx]\n             if val == '(' and prev_char != '\\\\':\n                 unmatched_open_brackets += 1\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+            idx += 1\n+            if unmatched_open_brackets == 0:\n+                group_indices.append((start, idx))\n+                break\n+        else:\n+            # Handle unbalanced parentheses if necessary\n+            group_indices.append((start, len(pattern)))\n+            break\n \n-    # Remove unnamed group matches inside other unnamed capture groups.\n-    group_start_end_indices = []\n-    prev_end = None\n-    for start, end in group_indices:\n-        if prev_end and start > prev_end or not prev_end:\n-            group_start_end_indices.append((start, end))\n-        prev_end = end\n-\n-    if group_start_end_indices:\n+    if group_indices:\n         # Replace unnamed groups with <var>. Handle the fact that replacing the\n         # string between indices will change string length and thus indices\n         # will point to the wrong substring if not corrected.\n-        final_pattern, prev_end = [], None\n-        for start, end in group_start_end_indices:\n-            if prev_end:\n-                final_pattern.append(pattern[prev_end:start])\n-            final_pattern.append(pattern[:start] + '<var>')\n-            prev_end = end\n-        final_pattern.append(pattern[prev_end:])\n-        return ''.join(final_pattern)\n+        final_pattern = ''\n+        last_end = 0\n+        for start, end in group_indices:\n+            final_pattern += pattern[last_end:start]\n+            final_pattern += '<var>'\n+            last_end = end\n+        final_pattern += pattern[last_end:]\n+        return final_pattern\n     else:\n         return pattern\n+\n"}
{"instance_id":"django__django-11734","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 2b59dd301a..77a1e945bf 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -565,9 +565,7 @@ class ResolvedOuterRef(F):\n class OuterRef(F):\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None,\n                            summarize=False, for_save=False, simple_col=False):\n-        if isinstance(self.name, self.__class__):\n-            return self.name\n-        return ResolvedOuterRef(self.name)\n+        return self\n \n \n class Func(SQLiteNumericMixin, Expression):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 35f3c5e1ea..f580c11d07 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1707,6 +1707,7 @@ class Query(BaseExpression):\n         # Generate the inner query.\n         query = Query(self.model)\n         query._filtered_relations = self._filtered_relations\n+        query.external_aliases = self.external_aliases.copy()\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n"}
{"instance_id":"django__django-11740","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 0dc1c77c53..e5d53aed71 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1064,8 +1064,14 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n-            dep_object_name = field.remote_field.model._meta.object_name\n+            if isinstance(field.remote_field.model, str):\n+                model = self.to_state.resolve_model_relation(\n+                    field.remote_field.model, model_hint=field.model\n+                )\n+            else:\n+                model = field.remote_field.model\n+            dep_app_label = model._meta.app_label\n+            dep_object_name = model._meta.object_name\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n             dependencies.append((\n@@ -1075,6 +1081,7 @@ class MigrationAutodetector:\n                 True,\n             ))\n         return dependencies\n+        return dependencies\n \n     def _generate_altered_foo_together(self, operation):\n         option_name = operation.option_name\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 66ecd606ee..344a337847 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -77,15 +77,20 @@ class CreateModel(ModelOperation):\n         )\n \n     def state_forwards(self, app_label, state):\n-        state.add_model(ModelState(\n-            app_label,\n-            self.name,\n-            list(self.fields),\n-            dict(self.options),\n-            tuple(self.bases),\n-            list(self.managers),\n-        ))\n-\n+        model_state = ModelState(\n+            app_label=app_label,\n+            name=self.name,\n+            fields=list(self.fields),\n+            options=dict(self.options),\n+            bases=tuple(self.bases),\n+            managers=list(self.managers),\n+        )\n+        state.add_model(model_state)\n+        for name, field in self.fields:\n+            if field.is_relation and isinstance(field.remote_field.model, str):\n+                # Resolve the related model string to a real model\n+                related_model = field.remote_field.model\n+                state.resolve_model_relation(related_model, model_state.app_label)\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         model = to_state.apps.get_model(app_label, self.name)\n         if self.allow_migrate_model(schema_editor.connection.alias, model):\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f6c5ae2585..20bf837902 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -30,6 +30,7 @@ from .related_lookups import (\n from .reverse_related import (\n     ForeignObjectRel, ManyToManyRel, ManyToOneRel, OneToOneRel,\n )\n+from django.db.models.signals import class_prepared\n \n RECURSIVE_RELATIONSHIP_CONSTANT = 'self'\n \n@@ -734,12 +735,15 @@ class ForeignObject(RelatedField):\n     def contribute_to_class(self, cls, name, private_only=False, **kwargs):\n         super().contribute_to_class(cls, name, private_only=private_only, **kwargs)\n         setattr(cls, self.name, self.forward_related_accessor_class(self))\n-\n-    def contribute_to_related_class(self, cls, related):\n-        # Internal FK's - i.e., those with a related name ending with '+' -\n-        # and swapped models don't get a related descriptor.\n-        if not self.remote_field.is_hidden() and not related.related_model._meta.swapped:\n-            setattr(cls._meta.concrete_model, related.get_accessor_name(), self.related_accessor_class(related))\n+        if isinstance(self.remote_field.model, str):\n+            def resolve_related_class(sender, **kwargs):\n+                self.remote_field.model = self.opts.apps.get_model(\n+                    self.remote_field.model, require_ready=False\n+                )\n+                self.opts.apps.clear_cache()\n+            class_prepared.connect(resolve_related_class, sender=cls)\n+        else:\n+            self.remote_field.model = self.remote_field.model\n             # While 'limit_choices_to' might be a callable, simply pass\n             # it along for later - this is too early because it's still\n             # model load time.\n"}
{"instance_id":"django__django-11749","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e64761e..3e65744d5c 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -121,7 +121,7 @@ def call_command(command_name, *args, **options):\n     parse_args = [str(a) for a in args]\n \n     def get_actions(parser):\n-        # Parser actions and actions from sub-parser choices.\n+        \"\"\"Get all parser actions including those from sub-parsers.\"\"\"\n         for opt in parser._actions:\n             if isinstance(opt, _SubParsersAction):\n                 for sub_opt in opt.choices.values():\n@@ -129,16 +129,38 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n \n+    def get_mutually_exclusive_group_options(parser):\n+        \"\"\"Get options from required mutually exclusive groups.\"\"\"\n+        for group in parser._mutually_exclusive_groups:\n+            if group.required:\n+                options = []\n+                for action in group._group_actions:\n+                    if action.option_strings:  # Only include optional arguments\n+                        options.append(action)\n+                if options:\n+                    yield options\n+\n+    # Get all parser actions\n     parser_actions = list(get_actions(parser))\n-    # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n+\n+    # Handle regular required arguments\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n         for opt in parser_actions if opt.required and opt.dest in options\n     ]\n+\n+    # Handle required mutually exclusive groups\n+    for group_options in get_mutually_exclusive_group_options(parser):\n+        for opt in group_options:\n+            if opt.dest in options:\n+                parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))\n+                break\n+\n+    # Parse arguments and update defaults\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n-    # Raise an error if any unknown options were passed.\n+\n+    # Check for unknown options\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n     dest_parameters = {action.dest for action in parser_actions}\n     valid_options = (dest_parameters | stealth_options).union(opt_mapping)\n@@ -152,7 +174,8 @@ def call_command(command_name, *args, **options):\n                 ', '.join(sorted(valid_options)),\n             )\n         )\n-    # Move positional args out of options to mimic legacy optparse\n+\n+    # Handle legacy behavior\n     args = defaults.pop('args', ())\n     if 'skip_checks' not in options:\n         defaults['skip_checks'] = True\n"}
{"instance_id":"django__django-11790","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..42689e43d1 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -192,6 +192,7 @@ class AuthenticationForm(forms.Form):\n         # Set the max length and label for the \"username\" field.\n         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n         self.fields['username'].max_length = self.username_field.max_length or 254\n+        self.fields['username'].widget.attrs['maxlength'] = self.username_field.max_length or 254\n         if self.fields['username'].label is None:\n             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n"}
{"instance_id":"django__django-11820","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f3f1..8c180cf835 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1712,7 +1712,7 @@ class Model(metaclass=ModelBase):\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\n                 except (FieldDoesNotExist, AttributeError):\n-                    if fld is None or fld.get_transform(part) is None:\n+                    if fld is None or (part != 'pk' and fld.get_transform(part) is None):\n                         errors.append(\n                             checks.Error(\n                                 \"'ordering' refers to the nonexistent field, \"\n"}
{"instance_id":"django__django-11880","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 03cd8af8d7..4cc3133ca0 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -200,6 +200,7 @@ class Field:\n         memo[id(self)] = result\n         result.widget = copy.deepcopy(self.widget, memo)\n         result.validators = self.validators[:]\n+        result.error_messages = copy.deepcopy(self.error_messages, memo)\n         return result\n \n \n"}
{"instance_id":"django__django-11885","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex 4a6c71e149..c5ed84fd53 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -629,11 +629,6 @@ END;\n \n     def conditional_expression_supported_in_where_clause(self, expression):\n         \"\"\"\n-        Oracle supports only EXISTS(...) or filters in the WHERE clause, others\n-        must be compared with True.\n+        Oracle supports combined expressions in the WHERE clause of DELETE statements.\n         \"\"\"\n-        if isinstance(expression, Exists):\n-            return True\n-        if isinstance(expression, ExpressionWrapper) and isinstance(expression.expression, Q):\n-            return True\n-        return False\n+        return True\ndiff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26340..4e5d775634 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -310,9 +310,18 @@ class Collector:\n                     )\n \n             # fast deletes\n+            # Group fast deletes by model\n+            from collections import defaultdict\n+            fast_deletes_by_model = defaultdict(list)\n             for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                fast_deletes_by_model[qs.model].append(qs)\n+            # Perform combined deletes\n+            for model, qs_list in fast_deletes_by_model.items():\n+                combined_qs = qs_list[0]\n+                for qs in qs_list[1:]:\n+                    combined_qs = combined_qs.union(qs)\n+                count = combined_qs._raw_delete(using=self.using)\n+                deleted_counter[model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 794e0faae7..8ef191227b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -704,9 +704,8 @@ class QuerySet:\n \n         del_query = self._chain()\n \n-        # The delete is actually 2 queries - one to find related objects,\n-        # and one to delete. Make sure that the discovery of related\n-        # objects is performed on the same database as the deletion.\n+        # Use the Collector to find related objects and perform deletions.\n+        # The Collector combines delete queries by table to minimize database roundtrips.\n         del_query._for_write = True\n \n         # Disable non-supported fields.\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 85adbfdcd9..debfbf2829 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1344,16 +1344,20 @@ class SQLInsertCompiler(SQLCompiler):\n class SQLDeleteCompiler(SQLCompiler):\n     def as_sql(self):\n         \"\"\"\n-        Create the SQL for this query. Return the SQL string and list of\n-        parameters.\n+        Modified as_sql method to support combining delete queries by table using OR conditions.\n         \"\"\"\n         assert len([t for t in self.query.alias_map if self.query.alias_refcount[t] > 0]) == 1, \\\n             \"Can only delete from one table at a time.\"\n         qn = self.quote_name_unless_alias\n         result = ['DELETE FROM %s' % qn(self.query.base_table)]\n-        where, params = self.compile(self.query.where)\n-        if where:\n-            result.append('WHERE %s' % where)\n+        where_class = self.query.where_class\n+        if self.query.where:\n+            # Combine multiple conditions using OR\n+            combined_where = where_class(children=self.query.where.children, connector='OR')\n+            where_sql, params = self.compile(combined_where)\n+            result.append('WHERE %s' % where_sql)\n+        else:\n+            raise DatabaseError(\"Cannot execute a delete query without a WHERE clause\")\n         return ' '.join(result), tuple(params)\n \n \ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex fbc265d113..a142a2198f 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -26,18 +26,25 @@ class DeleteQuery(Query):\n \n     def delete_batch(self, pk_list, using):\n         \"\"\"\n-        Set up and execute delete queries for all the objects in pk_list.\n-\n-        More than one physical query may be executed if there are a\n-        lot of values in pk_list.\n+        Set up and execute a single delete query for all the objects in pk_list.\n+        Combine delete queries by table using OR conditions to reduce database roundtrips.\n         \"\"\"\n-        # number of objects deleted\n+        # Number of objects deleted\n         num_deleted = 0\n         field = self.get_meta().pk\n-        for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):\n+        max_batch_size = max(connections[using].ops.bulk_batch_size([field.name], pk_list), 1)\n+        total_pks = len(pk_list)\n+        if total_pks > max_batch_size:\n+            # If there are too many pks, split into batches\n+            for offset in range(0, total_pks, max_batch_size):\n+                batch_pks = pk_list[offset:offset + max_batch_size]\n+                self.where = self.where_class()\n+                self.add_q(Q(**{field.attname + '__in': batch_pks}))\n+                num_deleted += self.do_query(self.get_meta().db_table, self.where, using=using)\n+        else:\n+            # Combine all pks into a single query\n             self.where = self.where_class()\n-            self.add_q(Q(\n-                **{field.attname + '__in': pk_list[offset:offset + GET_ITERATOR_CHUNK_SIZE]}))\n+            self.add_q(Q(**{field.attname + '__in': pk_list}))\n             num_deleted += self.do_query(self.get_meta().db_table, self.where, using=using)\n         return num_deleted\n \n"}
{"instance_id":"django__django-11951","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 794e0faae7..1ea6f47c52 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -473,29 +473,30 @@ class QuerySet:\n         self._populate_pk_values(objs)\n         with transaction.atomic(using=self.db, savepoint=False):\n             objs_with_pk, objs_without_pk = partition(lambda o: o.pk is None, objs)\n-            if objs_with_pk:\n-                returned_columns = self._batched_insert(\n-                    objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n-                )\n-                for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n-                        if field != opts.pk:\n-                            setattr(obj_with_pk, field.attname, result)\n-                for obj_with_pk in objs_with_pk:\n-                    obj_with_pk._state.adding = False\n-                    obj_with_pk._state.db = self.db\n-            if objs_without_pk:\n-                fields = [f for f in fields if not isinstance(f, AutoField)]\n-                returned_columns = self._batched_insert(\n-                    objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n-                )\n-                if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n-                    assert len(returned_columns) == len(objs_without_pk)\n-                for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n-                        setattr(obj_without_pk, field.attname, result)\n-                    obj_without_pk._state.adding = False\n-                    obj_without_pk._state.db = self.db\n+            returned_columns = self._batched_insert(\n+                objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n+            )\n+            for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n+                for result, field in zip(results, opts.db_returning_fields):\n+                    if field != opts.pk:\n+                        setattr(obj_with_pk, field.attname, result)\n+            for obj_with_pk in objs_with_pk:\n+                obj_with_pk._state.adding = False\n+                obj_with_pk._state.db = self.db\n+        if objs_without_pk:\n+            fields = [f for f in fields if not isinstance(f, AutoField)]\n+            max_batch_size = connections[self.db].ops.bulk_batch_size(fields, objs_without_pk)\n+            batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n+            returned_columns = self._batched_insert(\n+                objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n+            )\n+            if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n+                assert len(returned_columns) == len(objs_without_pk)\n+            for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n+                for result, field in zip(results, opts.db_returning_fields):\n+                    setattr(obj_without_pk, field.attname, result)\n+                obj_without_pk._state.adding = False\n+                obj_without_pk._state.db = self.db\n \n         return objs\n \n"}
{"instance_id":"django__django-12039","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 44e49806f8..35e5597a24 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -110,14 +110,17 @@ class IndexColumns(Columns):\n \n     def __str__(self):\n         def col_str(column, idx):\n-            # Index.__init__() guarantees that self.opclasses is the same\n-            # length as self.columns.\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n+            parts = [self.quote_name(column)]\n+            opclass = self.opclasses[idx]\n+            if opclass:\n+                parts.append(opclass)\n             try:\n-                col = '{} {}'.format(col, self.col_suffixes[idx])\n+                col_suffix = self.col_suffixes[idx]\n             except IndexError:\n-                pass\n-            return col\n+                col_suffix = ''\n+            if col_suffix:\n+                parts.append(col_suffix)\n+            return ' '.join(parts)\n \n         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n \n@@ -192,3 +195,4 @@ class Statement(Reference):\n \n     def __str__(self):\n         return self.template % self.parts\n+\n"}
{"instance_id":"django__django-12050","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ea51912e8b..90475d6fb9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1073,7 +1073,7 @@ class Query(BaseExpression):\n                         ))\n                 else:\n                     resolved_values.append(sub_value)\n-            value = tuple(resolved_values)\n+            value = type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n"}
{"instance_id":"django__django-12143","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 137e6faa0f..a100f1c499 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):\n \n     def _get_edited_object_pks(self, request, prefix):\n         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n-        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n+        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))\n         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n \n     def _get_list_editable_queryset(self, request, prefix):\n"}
{"instance_id":"django__django-12155","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 4c0e7e2a56..3f60ccb6ec 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -34,7 +34,7 @@ def trim_docstring(docstring):\n         return ''\n     # Convert tabs to spaces and split into lines\n     lines = docstring.expandtabs().splitlines()\n-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())\n+    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())\n     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]\n     return \"\\n\".join(trimmed).strip()\n \n@@ -238,3 +238,4 @@ def replace_unnamed_groups(pattern):\n         return ''.join(final_pattern)\n     else:\n         return pattern\n+\n"}
{"instance_id":"django__django-12193","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 6fe220bea7..54fef4a2c8 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -524,6 +524,7 @@ class CheckboxInput(Input):\n         if self.check_test(value):\n             if attrs is None:\n                 attrs = {}\n+            attrs = attrs.copy()\n             attrs['checked'] = True\n         return super().get_context(name, value, attrs)\n \n"}
{"instance_id":"django__django-12209","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e3b14a41a0..75a4440274 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -847,12 +847,14 @@ class Model(metaclass=ModelBase):\n         if not pk_set and (force_update or update_fields):\n             raise ValueError(\"Cannot force an update in save() with no primary key.\")\n         updated = False\n-        # Skip an UPDATE when adding an instance and primary key has a default.\n+        # Skip an UPDATE when adding an instance and primary key has a default\n+        # and the primary key value is the default value.\n         if (\n             not force_insert and\n             self._state.adding and\n             self._meta.pk.default and\n-            self._meta.pk.default is not NOT_PROVIDED\n+            self._meta.pk.default is not NOT_PROVIDED and\n+            getattr(self, self._meta.pk.attname) == self._meta.pk.get_default()\n         ):\n             force_insert = True\n         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.\n"}
{"instance_id":"django__django-12262","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac8..e0d5008a1b 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -261,7 +261,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n+            if (param not in params and param not in kwonly and varkw is None):\n                 # An unexpected keyword argument was supplied\n                 raise TemplateSyntaxError(\n                     \"'%s' received unexpected keyword argument '%s'\" %\n@@ -326,3 +326,4 @@ def import_library(name):\n         raise InvalidTemplateLibrary(\n             \"Module  %s does not have a variable named 'register'\" % name,\n         )\n+\n"}
{"instance_id":"django__django-12273","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 844c01e95e..190d400cfd 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -707,6 +707,8 @@ class Model(metaclass=ModelBase):\n         if force_insert and (force_update or update_fields):\n             raise ValueError(\"Cannot force both insert and updating in model saving.\")\n \n+        if self.pk is None:\n+            self._state.adding = True\n         deferred_fields = self.get_deferred_fields()\n         if update_fields is not None:\n             # If update_fields is empty, skip the save. We do also check for\n"}
{"instance_id":"django__django-12276","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 338d54d72f..e9f2e47d60 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -387,6 +387,9 @@ class FileInput(Input):\n     def value_omitted_from_data(self, data, files, name):\n         return name not in files\n \n+    def use_required_attribute(self, initial):\n+        return super().use_required_attribute(initial) and not initial\n+\n \n FILE_INPUT_CONTRADICTION = object()\n \n"}
{"instance_id":"django__django-12304","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..288b47dd5e 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -31,6 +31,7 @@ class ChoicesMeta(enum.EnumMeta):\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n@@ -79,3 +80,4 @@ class TextChoices(str, Choices):\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\n+\n"}
{"instance_id":"django__django-12325","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6ba1d..b3cb4873c2 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -242,19 +242,24 @@ class Options:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n                 # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n+                # Find the OneToOneField with parent_link=True\n+                parent_link_fields = [\n+                    fld for fld in self.local_fields\n+                    if (\n+                        fld.one_to_one and\n+                        fld.remote_field and\n+                        fld.remote_field.model in self.parents and\n+                        fld.remote_field.parent_link\n+                    )\n+                ]\n+                if parent_link_fields:\n+                    field = parent_link_fields[0]\n+                else:\n                     raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n+                        \"No OneToOneField with parent_link=True found for '%s'.\" % self.object_name\n                     )\n+                field.primary_key = True\n+                self.setup_pk(field)\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n@@ -295,9 +300,13 @@ class Options:\n \n     def setup_pk(self, field):\n         if not self.pk and field.primary_key:\n+            if field.one_to_one and field.remote_field and field.remote_field.model in self.parents:\n+                if not field.remote_field.parent_link:\n+                    raise ImproperlyConfigured(\n+                        \"Add parent_link=True to %s.\" % field\n+                    )\n             self.pk = field\n             field.serialize = False\n-\n     def setup_proxy(self, target):\n         \"\"\"\n         Do the internal setup so that the current model is a proxy for\n"}
{"instance_id":"django__django-12406","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 40ac1d3162..9811db6b73 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -614,6 +614,8 @@ class ChoiceWidget(Widget):\n         return groups\n \n     def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        if value == '' and self.is_required:\n+            return None\n         index = str(index) if subindex is None else \"%s_%s\" % (index, subindex)\n         if attrs is None:\n             attrs = {}\n@@ -633,6 +635,9 @@ class ChoiceWidget(Widget):\n             'template_name': self.option_template_name,\n             'wrap_label': True,\n         }\n+            'template_name': self.option_template_name,\n+            'wrap_label': True,\n+        }\n \n     def get_context(self, name, value, attrs):\n         context = super().get_context(name, value, attrs)\n"}
{"instance_id":"django__django-12419","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 09c9b95d26..8bb59a4037 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -637,6 +637,6 @@ SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n-SECURE_REFERRER_POLICY = None\n+SECURE_REFERRER_POLICY = 'same-origin'\n SECURE_SSL_HOST = None\n SECURE_SSL_REDIRECT = False\n"}
{"instance_id":"django__django-12663","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..343b33a136 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -21,7 +21,7 @@ from django.utils.dateparse import (\n     parse_date, parse_datetime, parse_duration, parse_time,\n )\n from django.utils.duration import duration_microseconds, duration_string\n-from django.utils.functional import Promise, cached_property\n+from django.utils.functional import Promise, cached_property, SimpleLazyObject\n from django.utils.ipv6 import clean_ipv6_address\n from django.utils.itercompat import is_iterable\n from django.utils.text import capfirst\n@@ -804,6 +804,8 @@ class Field(RegisterLookupMixin):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        elif isinstance(value, SimpleLazyObject):\n+            value = value.__wrapped__\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\ndiff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 6d38f932f9..267c0003d2 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -375,6 +375,15 @@ class SimpleLazyObject(LazyObject):\n     def _setup(self):\n         self._wrapped = self._setupfunc()\n \n+    def __eq__(self, other):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return self._wrapped == other\n+\n+    def __hash__(self):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return hash(self._wrapped)\n     # Return a meaningful representation of the lazy object for debugging\n     # without evaluating the wrapped object.\n     def __repr__(self):\n"}
{"instance_id":"django__django-12713","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 69a5fbf389..9410157b29 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -254,7 +254,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n         elif db_field.name in self.raw_id_fields:\n             kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n+        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal] and 'widget' not in kwargs:\n             kwargs['widget'] = widgets.FilteredSelectMultiple(\n                 db_field.verbose_name,\n                 db_field.name in self.filter_vertical\n"}
{"instance_id":"django__django-12741","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py\nindex e8ed3967f7..bc8021cf4e 100644\n--- a/django/core/management/commands/flush.py\n+++ b/django/core/management/commands/flush.py\n@@ -60,7 +60,7 @@ Are you sure you want to do this?\n \n         if confirm == 'yes':\n             try:\n-                connection.ops.execute_sql_flush(database, sql_list)\n+                connection.ops.execute_sql_flush(sql_list)\n             except Exception as exc:\n                 raise CommandError(\n                     \"Database %s couldn't be flushed. Possible reasons:\\n\"\ndiff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 70ac07ae09..f07580c18b 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -400,9 +400,9 @@ class BaseDatabaseOperations:\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')\n \n-    def execute_sql_flush(self, using, sql_list):\n+    def execute_sql_flush(self, sql_list):\n         \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):\n+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):\n             with self.connection.cursor() as cursor:\n                 for sql in sql_list:\n                     cursor.execute(sql)\n"}
{"instance_id":"django__django-12754","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 30616c0172..56ca6e1554 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -166,23 +166,7 @@ class MigrationAutodetector:\n         # Generate non-rename model operations\n         self.generate_deleted_models()\n         self.generate_created_models()\n-        self.generate_deleted_proxies()\n-        self.generate_created_proxies()\n-        self.generate_altered_options()\n-        self.generate_altered_managers()\n-\n-        # Create the altered indexes and store them in self.altered_indexes.\n-        # This avoids the same computation in generate_removed_indexes()\n-        # and generate_added_indexes().\n-        self.create_altered_indexes()\n-        self.create_altered_constraints()\n-        # Generate index removal operations before field is removed\n-        self.generate_removed_constraints()\n-        self.generate_removed_indexes()\n-        # Generate field operations\n-        self.generate_renamed_fields()\n         self.generate_removed_fields()\n-        self.generate_added_fields()\n         self.generate_altered_fields()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 8c06c4d157..4eee7d324b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -117,6 +117,217 @@ class CreateModel(ModelOperation):\n                 return True\n         return False\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, DeleteModel) and\n+                self.name_lower == operation.name_lower and\n+                not self.options.get(\"proxy\", False)):\n+            return []\n+        elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:\n+            return [\n+                CreateModel(\n+                    operation.new_name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=self.managers,\n+                ),\n+            ]\n+        elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options={**self.options, **operation.options},\n+                    bases=self.bases,\n+                    managers=self.managers,\n+                ),\n+            ]\n+        elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options={**self.options, **{operation.option_name: operation.option_value}},\n+                    bases=self.bases,\n+                    managers=self.managers,\n+                ),\n+            ]\n+        elif isinstance(operation, AlterOrderWithRespectTo) and self.name_lower == operation.name_lower:\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options={**self.options, 'order_with_respect_to': operation.order_with_respect_to},\n+                    bases=self.bases,\n+                    managers=self.managers,\n+                ),\n+            ]\n+        elif isinstance(operation, FieldOperation) and self.name_lower == operation.model_name_lower:\n+            if isinstance(operation, RemoveField):\n+                options = self.options.copy()\n+                for option_name in ('unique_together', 'index_together'):\n+                    option = options.pop(option_name, None)\n+                    if option:\n+                        option = set(filter(bool, (\n+                            tuple(f for f in fields if f != operation.name_lower) for fields in option\n+                        )))\n+                        if option:\n+                            options[option_name] = option\n+                order_with_respect_to = options.get('order_with_respect_to')\n+                if order_with_respect_to == operation.name_lower:\n+                    del options['order_with_respect_to']\n+                return [\n+                    CreateModel(\n+                        self.name,\n+                        fields=[\n+                            (n, v)\n+                            for n, v in self.fields\n+                            if n.lower() != operation.name_lower\n+                        ],\n+                        options=options,\n+                        bases=self.bases,\n+                        managers=self.managers,\n+                    ),\n+                ]\n+            elif isinstance(operation, AddField):\n+                return [\n+                    CreateModel(\n+                        self.name,\n+                        fields=self.fields + [(operation.name, operation.field)],\n+                        options=self.options,\n+                        bases=self.bases,\n+                        managers=self.managers,\n+                    ),\n+                ]\n+            elif isinstance(operation, RemoveField):\n+                options = self.options.copy()\n+                for option_name in ('unique_together', 'index_together'):\n+                    option = options.pop(option_name, None)\n+                    if option:\n+                        option = set(filter(bool, (\n+                            tuple(f for f in fields if f != operation.name_lower) for fields in option\n+                        )))\n+                        if option:\n+                            options[option_name] = option\n+                order_with_respect_to = options.get('order_with_respect_to')\n+                if order_with_respect_to == operation.name_lower:\n+                    del options['order_with_respect_to']\n+                return [\n+                    CreateModel(\n+                        self.name,\n+                        fields=[\n+                            (n, v)\n+                            for n, v in self.fields\n+                            if n.lower() != operation.name_lower\n+                        ],\n+                        options=options,\n+                        bases=self.bases,\n+                        managers=self.managers,\n+                    ),\n+                ]\n+            elif isinstance(operation, RenameField):\n+                options = self.options.copy()\n+                for option_name in ('unique_together', 'index_together'):\n+                    option = options.get(option_name)\n+                    if option:\n+                        options[option_name] = {\n+                            tuple(operation.new_name if f == operation.old_name else f for f in fields)\n+                            for fields in option\n+                        }\n+                order_with_respect_to = options.get('order_with_respect_to')\n+                if order_with_respect_to == operation.old_name:\n+                    options['order_with_respect_to'] = operation.new_name\n+                return [\n+                    CreateModel(\n+                        self.name,\n+                        fields=[\n+                            (operation.new_name if n == operation.old_name else n, v)\n+                            for n, v in self.fields\n+                        ],\n+                        options=options,\n+                        bases=self.bases,\n+                        managers=self.managers,\n+                    ),\n+                ]\n+        return super().reduce(operation, app_label)\n+    \"\"\"Create a model's table.\"\"\"\n+    \"\"\"Create a model's table.\"\"\"\n+    serialization_expand_args = ['fields', 'options', 'managers']\n+\n+    def __init__(self, name, fields, options=None, bases=None, managers=None):\n+        self.fields = fields\n+        self.options = options or {}\n+        self.bases = bases or (models.Model,)\n+        self.managers = managers or []\n+        super().__init__(name)\n+        # Sanity-check that there are no duplicated field names, bases, or\n+        # manager names\n+        _check_for_duplicates('fields', (name for name, _ in self.fields))\n+        _check_for_duplicates('bases', (\n+            base._meta.label_lower if hasattr(base, '_meta') else\n+            base.lower() if isinstance(base, str) else base\n+            for base in self.bases\n+        ))\n+        _check_for_duplicates('managers', (name for name, _ in self.managers))\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            'name': self.name,\n+            'fields': self.fields,\n+        }\n+        if self.options:\n+            kwargs['options'] = self.options\n+        if self.bases and self.bases != (models.Model,):\n+            kwargs['bases'] = self.bases\n+        if self.managers and self.managers != [('objects', models.Manager())]:\n+            kwargs['managers'] = self.managers\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs\n+        )\n+\n+    def state_forwards(self, app_label, state):\n+        state.add_model(ModelState(\n+            app_label,\n+            self.name,\n+            list(self.fields),\n+            dict(self.options),\n+            tuple(self.bases),\n+            list(self.managers),\n+        ))\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.create_model(model)\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.delete_model(model)\n+\n+    def describe(self):\n+        return \"Create %smodel %s\" % (\"proxy \" if self.options.get(\"proxy\", False) else \"\", self.name)\n+\n+    def references_model(self, name, app_label):\n+        name_lower = name.lower()\n+        if name_lower == self.name_lower:\n+            return True\n+\n+        # Check we didn't inherit from the model\n+        reference_model_tuple = (app_label, name_lower)\n+        for base in self.bases:\n+            if (base is not models.Model and isinstance(base, (models.base.ModelBase, str)) and\n+                    resolve_relation(base, app_label) == reference_model_tuple):\n+                return True\n+\n+        # Check we have no FKs/M2Ms with it\n+        for _name, field in self.fields:\n+            if field_references((app_label, self.name_lower), field, reference_model_tuple):\n+                return True\n+        return False\n+\n     def reduce(self, operation, app_label):\n         if (isinstance(operation, DeleteModel) and\n                 self.name_lower == operation.name_lower and\n"}
{"instance_id":"django__django-12774","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..a705392cc8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -689,9 +689,18 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n-            raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n-        if id_list is not None:\n+        if field_name != 'pk':\n+            field = self.model._meta.get_field(field_name)\n+            is_unique = field.unique\n+            if not is_unique:\n+                total_unique_fields = {\n+                    constraint.fields[0]\n+                    for constraint in self.model._meta.total_unique_constraints\n+                    if len(constraint.fields) == 1\n+                }\n+                is_unique = field_name in total_unique_fields\n+            if not is_unique:\n+                raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n             if not id_list:\n                 return {}\n             filter_key = '{}__in'.format(field_name)\n"}
{"instance_id":"django__django-12858","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex d32c891284..d5880285aa 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -72,7 +72,8 @@ class Lookup:\n             return self.rhs\n         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):\n             return self.lhs.output_field.get_prep_value(self.rhs)\n-        return self.rhs\n+        if isinstance(self.rhs, str):\n+            return self.rhs\n \n     def get_db_prep_lookup(self, value, connection):\n         return ('%s', [value])\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex bb230647eb..f8a7b070f5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1913,7 +1913,7 @@ class Query(BaseExpression):\n                     continue\n                 # names_to_path() validates the lookup. A descriptive\n                 # FieldError will be raise if it's not.\n-                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n+                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta, fail_on_missing=False)\n             elif not hasattr(item, 'resolve_expression'):\n                 errors.append(item)\n             if getattr(item, 'contains_aggregate', False):\n"}
{"instance_id":"django__django-12965","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex 3682d6da05..04e7e77e35 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -15,10 +15,15 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n \n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if not self.query.where:\n+            # No conditions, perform direct delete\n+            result = ['DELETE FROM %s' % self.quote_name_unless_alias(\n+                self.query.get_initial_alias()\n+            )]\n+            return ' '.join(result), []\n+        elif self.connection.features.update_can_self_select or self.single_alias:\n             return super().as_sql()\n-        # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery\n-        # which is what the default implementation of SQLDeleteCompiler uses\n+        # MySQL and MariaDB < 10.3.2 don't support deletion with a subquery\n         # when multiple tables are involved. Use the MySQL/MariaDB specific\n         # DELETE table FROM table syntax instead to avoid performing the\n         # operation in two queries.\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..ca8d39f6a5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -731,20 +731,29 @@ class QuerySet:\n             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n \n         del_query = self._chain()\n-\n-        # The delete is actually 2 queries - one to find related objects,\n-        # and one to delete. Make sure that the discovery of related\n-        # objects is performed on the same database as the deletion.\n         del_query._for_write = True\n \n-        # Disable non-supported fields.\n-        del_query.query.select_for_update = False\n-        del_query.query.select_related = False\n-        del_query.query.clear_ordering(force_empty=True)\n+        if not del_query.query.where:\n+            # No filters applied, perform direct bulk delete\n+            del_query.query.select_for_update = False\n+            del_query.query.select_related = False\n+            del_query.query.clear_ordering(force_empty=True)\n \n-        collector = Collector(using=del_query.db)\n-        collector.collect(del_query)\n-        deleted, _rows_count = collector.delete()\n+            deleted = del_query._raw_delete(using=del_query.db)\n+            _rows_count = deleted\n+        else:\n+            # The delete is actually 2 queries - one to find related objects,\n+            # and one to delete. Make sure that the discovery of related\n+            # objects is performed on the same database as the deletion.\n+\n+            # Disable non-supported fields.\n+            del_query.query.select_for_update = False\n+            del_query.query.select_related = False\n+            del_query.query.clear_ordering(force_empty=True)\n+\n+            collector = Collector(using=del_query.db)\n+            collector.collect(del_query)\n+            deleted, _rows_count = collector.delete()\n \n         # Clear the result cache, in case this QuerySet gets reused.\n         self._result_cache = None\n"}
{"instance_id":"django__django-13012","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c1a76584f0..1850bb2afb 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -866,6 +866,11 @@ class ExpressionWrapper(Expression):\n     def as_sql(self, compiler, connection):\n         return self.expression.as_sql(compiler, connection)\n \n+    def get_group_by_cols(self, alias=None):\n+        if isinstance(self.expression, Value):\n+            return []\n+        return self.expression.get_group_by_cols()\n+\n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n"}
{"instance_id":"django__django-13023","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0fd69059ee..ed7ffb3243 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1495,6 +1495,20 @@ class DecimalField(Field):\n         return \"DecimalField\"\n \n     def to_python(self, value):\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n+        if value is None:\n+            return value\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         if value is None:\n             return value\n         if isinstance(value, float):\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 36dad72704..96372cc71b 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -333,6 +333,12 @@ class DecimalField(IntegerField):\n         self.validators.append(validators.DecimalValidator(max_digits, decimal_places))\n \n     def to_python(self, value):\n+        if isinstance(value, dict):\n+            raise ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         \"\"\"\n         Validate that the input is a decimal number. Return a Decimal\n         instance or None for empty values. Ensure that there are no more\n"}
{"instance_id":"django__django-13089","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex 33c79c5a14..09ae8eeb27 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,9 +267,11 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                result = cursor.fetchone()\n+                if result:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [result[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n@@ -277,3 +279,4 @@ class DatabaseCache(BaseDatabaseCache):\n         table = connection.ops.quote_name(self._table)\n         with connection.cursor() as cursor:\n             cursor.execute('DELETE FROM %s' % table)\n+\n"}
{"instance_id":"django__django-13109","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d517d7269b..c2aea9c730 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n-        qs = self.remote_field.model._default_manager.using(using).filter(\n+        qs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n"}
{"instance_id":"django__django-13112","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/apps/config.py b/django/apps/config.py\nindex 2728503d62..ba463b19a4 100644\n--- a/django/apps/config.py\n+++ b/django/apps/config.py\n@@ -13,6 +13,7 @@ class AppConfig:\n     def __init__(self, app_name, app_module):\n         # Full Python path to the application e.g. 'django.contrib.admin'.\n         self.name = app_name\n+        self.name = app_name.lower()\n \n         # Root module for the application e.g. <module 'django.contrib.admin'\n         # from 'django/contrib/admin/__init__.py'>.\n@@ -213,4 +214,4 @@ class AppConfig:\n     def ready(self):\n         \"\"\"\n         Override this method in subclasses to run code when Django starts.\n-        \"\"\"\n+        ```\n"}
{"instance_id":"django__django-13121","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..efae457199 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -580,8 +580,15 @@ class BaseDatabaseOperations:\n \n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n-\n+            if isinstance(value, datetime.timedelta):\n+                return value\n+            try:\n+                value = float(value)\n+            except (TypeError, ValueError):\n+                pass\n+            else:\n+                return datetime.timedelta(microseconds=value)\n+        return value\n     def check_expression_support(self, expression):\n         \"\"\"\n         Check that the backend supports the provided expression.\ndiff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex af8cfd86b5..6249408eec 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -6,6 +6,7 @@ from django.utils import timezone\n from django.utils.duration import duration_microseconds\n from django.utils.encoding import force_str\n \n+from django.db import DatabaseError\n \n class DatabaseOperations(BaseDatabaseOperations):\n     compiler_module = \"django.db.backends.mysql.compiler\"\n@@ -335,6 +336,14 @@ class DatabaseOperations(BaseDatabaseOperations):\n         params = (*rhs_params, *lhs_params)\n         return \"TIMESTAMPDIFF(MICROSECOND, %s, %s)\" % (rhs_sql, lhs_sql), params\n \n+    def combine_duration_expression(self, connector, sub_expressions):\n+        if connector not in ['+', '-']:\n+            raise DatabaseError('Invalid connector for timedelta: %s.' % connector)\n+        lhs, rhs = sub_expressions\n+        return '(%s %s %s)' % (lhs, connector, rhs)\n+\n+    def format_duration_sql(self, sql):\n+        return sql\n     def explain_query_prefix(self, format=None, **options):\n         # Alias MySQL's TRADITIONAL to TEXT for consistency with other backends.\n         if format and format.upper() == 'TEXT':\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 9510b5edd9..6e682a9eaf 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -339,10 +339,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n     def combine_duration_expression(self, connector, sub_expressions):\n         if connector not in ['+', '-']:\n             raise DatabaseError('Invalid connector for timedelta: %s.' % connector)\n-        fn_params = [\"'%s'\" % connector] + sub_expressions\n-        if len(fn_params) > 3:\n-            raise ValueError('Too many params for timedelta operations.')\n-        return \"django_format_dtdelta(%s)\" % ', '.join(fn_params)\n+        lhs, rhs = sub_expressions\n+        return '(%s %s %s)' % (lhs, connector, rhs)\n+    def format_duration_sql(self, sql):\n+        return sql\n \n     def integer_field_range(self, internal_type):\n         # SQLite doesn't enforce any integer constraints\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex a156c5e881..a15b6a4018 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -496,9 +496,11 @@ class DurationExpression(CombinedExpression):\n         expressions = []\n         expression_params = []\n         sql, params = self.compile(self.lhs, compiler, connection)\n+        sql = connection.ops.format_duration_sql(sql)\n         expressions.append(sql)\n         expression_params.extend(params)\n         sql, params = self.compile(self.rhs, compiler, connection)\n+        sql = connection.ops.format_duration_sql(sql)\n         expressions.append(sql)\n         expression_params.extend(params)\n         # order of precedence\n"}
{"instance_id":"django__django-13128","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex ffddb64e3c..7077381191 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -328,8 +328,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n                 \"((TIME_TO_SEC(%(lhs)s) * 1000000 + MICROSECOND(%(lhs)s)) -\"\n                 \" (TIME_TO_SEC(%(rhs)s) * 1000000 + MICROSECOND(%(rhs)s)))\"\n             ) % {'lhs': lhs_sql, 'rhs': rhs_sql}, tuple(lhs_params) * 2 + tuple(rhs_params) * 2\n-        params = (*rhs_params, *lhs_params)\n-        return \"TIMESTAMPDIFF(MICROSECOND, %s, %s)\" % (rhs_sql, lhs_sql), params\n+        params = (*lhs_params, *rhs_params)\n+        return \"TIMESTAMPDIFF(MICROSECOND, %s, %s)\" % (lhs_sql, rhs_sql), params\n \n     def explain_query_prefix(self, format=None, **options):\n         # Alias MySQL's TRADITIONAL to TEXT for consistency with other backends.\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658291..caaee3b2a8 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -481,6 +481,10 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n         return c\n \n \n+    def _resolve_output_field(self):\n+        if self.connector == self.SUB and isinstance(self.lhs.output_field, fields.DateTimeField) and isinstance(self.rhs.output_field, fields.DateTimeField):\n+            return fields.DurationField()\n+        return super()._resolve_output_field()\n class DurationExpression(CombinedExpression):\n     def compile(self, side, compiler, connection):\n         try:\n@@ -520,6 +524,8 @@ class TemporalSubtraction(CombinedExpression):\n         lhs = compiler.compile(self.lhs)\n         rhs = compiler.compile(self.rhs)\n         return connection.ops.subtract_temporals(self.lhs.output_field.get_internal_type(), lhs, rhs)\n+    def _resolve_output_field(self):\n+        return fields.DurationField()\n \n \n @deconstructible\n"}
{"instance_id":"django__django-13195","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py\nindex 63013eef7a..95ad30ce7f 100644\n--- a/django/contrib/sessions/middleware.py\n+++ b/django/contrib/sessions/middleware.py\n@@ -42,6 +42,7 @@ class SessionMiddleware(MiddlewareMixin):\n                 settings.SESSION_COOKIE_NAME,\n                 path=settings.SESSION_COOKIE_PATH,\n                 domain=settings.SESSION_COOKIE_DOMAIN,\n+                samesite=settings.SESSION_COOKIE_SAMESITE,\n             )\n             patch_vary_headers(response, ('Cookie',))\n         else:\ndiff --git a/django/http/response.py b/django/http/response.py\nindex e00bcacefb..2631358533 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -210,13 +210,18 @@ class HttpResponseBase:\n         value = signing.get_cookie_signer(salt=key + salt).sign(value)\n         return self.set_cookie(key, value, **kwargs)\n \n-    def delete_cookie(self, key, path='/', domain=None):\n+    def delete_cookie(self, key, path='/', domain=None, samesite=None):\n         # Most browsers ignore the Set-Cookie header if the cookie name starts\n         # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n         secure = key.startswith(('__Secure-', '__Host-'))\n         self.set_cookie(\n-            key, max_age=0, path=path, domain=domain, secure=secure,\n+            key,\n+            max_age=0,\n+            path=path,\n+            domain=domain,\n+            secure=secure,\n             expires='Thu, 01 Jan 1970 00:00:00 GMT',\n+            samesite=samesite,\n         )\n \n     # Common methods used by subclasses\n"}
{"instance_id":"django__django-13212","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31ec7..4f8e181393 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -48,7 +48,7 @@ class RegexValidator:\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def __eq__(self, other):\n         return (\n@@ -100,7 +100,7 @@ class URLValidator(RegexValidator):\n \n     def __call__(self, value):\n         if not isinstance(value, str):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n@@ -208,7 +208,7 @@ class EmailValidator:\n \n     def __call__(self, value):\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         user_part, domain_part = value.rsplit('@', 1)\n \ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 36dad72704..b874e4b545 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -125,7 +125,7 @@ class Field:\n \n     def validate(self, value):\n         if value in self.empty_values and self.required:\n-            raise ValidationError(self.error_messages['required'], code='required')\n+            raise ValidationError(self.error_messages['required'], code='required', params={'value': value})\n \n     def run_validators(self, value):\n         if value in self.empty_values:\n"}
{"instance_id":"django__django-13279","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b5453160a5..4137cf5b8e 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -106,8 +106,16 @@ class SessionBase:\n         key_salt = \"django.contrib.sessions\" + self.__class__.__name__\n         return salted_hmac(key_salt, value).hexdigest()\n \n+    def _legacy_encode(self, session_dict):\n+        # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n+        serialized = self.serializer().dumps(session_dict)\n+        hash = self._hash(serialized)\n+        return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n+\n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':\n+            return self._legacy_encode(session_dict)\n         return signing.dumps(\n             session_dict, salt=self.key_salt, serializer=self.serializer,\n             compress=True,\n@@ -375,3 +383,4 @@ class SessionBase:\n         a built-in expiration mechanism, it should be a no-op.\n         \"\"\"\n         raise NotImplementedError('This backend does not support clear_expired().')\n+\ndiff --git a/django/contrib/sessions/backends/signed_cookies.py b/django/contrib/sessions/backends/signed_cookies.py\nindex 8942df1ea4..b3801324b7 100644\n--- a/django/contrib/sessions/backends/signed_cookies.py\n+++ b/django/contrib/sessions/backends/signed_cookies.py\n@@ -1,3 +1,4 @@\n+from django.conf import settings\n from django.contrib.sessions.backends.base import SessionBase\n from django.core import signing\n \n@@ -70,6 +71,8 @@ class SessionStore(SessionBase):\n         Instead of generating a random string, generate a secure url-safe\n         base64-encoded string of data as our session key.\n         \"\"\"\n+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':\n+            return self._legacy_encode(self._session)\n         return signing.dumps(\n             self._session, compress=True,\n             salt='django.contrib.sessions.backends.signed_cookies',\n@@ -79,3 +82,4 @@ class SessionStore(SessionBase):\n     @classmethod\n     def clear_expired(cls):\n         pass\n+\n"}
{"instance_id":"django__django-13297","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d..06eb62f023 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -24,6 +24,7 @@ class ContextMixin:\n     extra_context = None\n \n     def get_context_data(self, **kwargs):\n+        kwargs = {k: v for k, v in kwargs.items()}\n         kwargs.setdefault('view', self)\n         if self.extra_context is not None:\n             kwargs.update(self.extra_context)\n@@ -238,3 +239,4 @@ class RedirectView(View):\n \n     def patch(self, request, *args, **kwargs):\n         return self.get(request, *args, **kwargs)\n+\n"}
{"instance_id":"django__django-13343","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex e10a5bb6d9..469ae0db64 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -229,6 +229,8 @@ class FileField(Field):\n \n         self.storage = storage or default_storage\n         if callable(self.storage):\n+            self._storage_is_callable = True\n+            self._storage_callable = self.storage\n             self.storage = self.storage()\n             if not isinstance(self.storage, Storage):\n                 raise TypeError(\n@@ -278,7 +280,9 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n+        if getattr(self, '_storage_is_callable', False):\n+            kwargs['storage'] = self._storage_callable\n+        elif self.storage is not default_storage:\n             kwargs['storage'] = self.storage\n         return name, path, args, kwargs\n \n"}
{"instance_id":"django__django-13344","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\nindex 7fbabe4510..82acabc84f 100644\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -4,6 +4,7 @@ import tempfile\n import traceback\n \n from asgiref.sync import sync_to_async\n+import asyncio\n \n from django.conf import settings\n from django.core import signals\n@@ -159,6 +160,8 @@ class ASGIHandler(base.BaseHandler):\n             return\n         # Get the response, using the async mode of BaseHandler.\n         response = await self.get_response_async(request)\n+        if asyncio.iscoroutine(response):\n+            response = await response\n         response._handler_class = self.__class__\n         # Increase chunk size on file responses (ASGI servers handles low-level\n         # chunking).\ndiff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 169df6b3cf..b374043591 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -153,6 +153,8 @@ class BaseHandler:\n                 response=response,\n                 request=request,\n             )\n+        if asyncio.iscoroutine(response):\n+            response = await response\n         return response\n \n     def _get_response(self, request):\ndiff --git a/django/test/client.py b/django/test/client.py\nindex 1e6d9e2a39..97db218856 100644\n--- a/django/test/client.py\n+++ b/django/test/client.py\n@@ -190,6 +190,8 @@ class AsyncClientHandler(BaseHandler):\n         request._dont_enforce_csrf_checks = not self.enforce_csrf_checks\n         # Request goes through middleware.\n         response = await self.get_response_async(request)\n+        if asyncio.iscoroutine(response):\n+            response = await response\n         # Simulate behaviors of most Web servers.\n         conditional_content_removal(request, response)\n         # Attach the originating ASGI request to the response so that it could\n"}
{"instance_id":"django__django-13346","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8..7b323b5dbd 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -479,9 +479,56 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n     pass\n \n \n+class KeyTransformIn(lookups.In):\n+    def process_lhs(self, compiler, connection):\n+        lhs, lhs_params = super().process_lhs(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            rhs, rhs_params = super().process_rhs(compiler, connection)\n+            if any(p == 'null' for p in rhs_params):\n+                lhs, _ = self.lhs.preprocess_lhs(compiler, connection, lhs_only=True)\n+                lhs = 'JSON_TYPE(%s, %%s)' % lhs\n+        return lhs, lhs_params\n+\n+    def process_rhs(self, compiler, connection):\n+        if isinstance(self.rhs, (list, tuple)):\n+            converted_rhs = [json.dumps(val) if hasattr(val, '__iter__') and not isinstance(val, str) else val\n+                            for val in self.rhs]\n+            self.rhs = converted_rhs\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor == 'oracle':\n+            func = []\n+            for value in rhs_params:\n+                value = json.loads(value)\n+                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n+                func.append(\"%s('%s', '$.value')\" % (\n+                    function,\n+                    json.dumps({'value': value}),\n+                ))\n+            rhs = rhs % tuple(func)\n+            rhs_params = []\n+        elif connection.vendor == 'sqlite':\n+            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            rhs = rhs % tuple(func)\n+        return rhs, rhs_params\n+\n+    def as_oracle(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if any(p == 'null' for p in rhs_params):\n+            # Field has key and it's NULL.\n+            has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)\n+            has_key_sql, has_key_params = has_key_expr.as_oracle(compiler, connection)\n+            is_null_expr = self.lhs.get_lookup('isnull')(self.lhs, True)\n+            is_null_sql, is_null_params = is_null_expr.as_sql(compiler, connection)\n+            return (\n+                '%s AND %s' % (has_key_sql, is_null_sql),\n+                tuple(has_key_params) + tuple(is_null_params),\n+            )\n+        return super().as_sql(compiler, connection)\n+\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformIContains)\n KeyTransform.register_lookup(KeyTransformStartsWith)\n KeyTransform.register_lookup(KeyTransformIStartsWith)\n"}
{"instance_id":"django__django-13363","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex b6594b043b..778a6e28f3 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -292,7 +292,7 @@ class TruncDate(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to date rather than truncate to date.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname() if settings.USE_TZ else None\n         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)\n         return sql, lhs_params\n \n@@ -305,7 +305,7 @@ class TruncTime(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to time rather than truncate to time.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname() if settings.USE_TZ else None\n         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)\n         return sql, lhs_params\n \n@@ -324,3 +324,4 @@ class TruncSecond(TruncBase):\n \n DateTimeField.register_lookup(TruncDate)\n DateTimeField.register_lookup(TruncTime)\n+\n"}
{"instance_id":"django__django-13406","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b48d0df9c0..00789960e5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -258,7 +258,16 @@ class QuerySet:\n                 stacklevel=2,\n             )\n         self.__dict__.update(state)\n-\n+        if getattr(self, '_iterable_class', None) is None:\n+            if self._fields is not None:\n+                if getattr(self, '_flat', False):\n+                    self._iterable_class = FlatValuesListIterable\n+                elif getattr(self, '_named', False):\n+                    self._iterable_class = NamedValuesListIterable\n+                else:\n+                    self._iterable_class = ValuesListIterable\n+            else:\n+                self._iterable_class = ModelIterable\n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n         if len(data) > REPR_OUTPUT_SIZE:\n"}
{"instance_id":"django__django-13410","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b905..f26b03f67f 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,16 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return True\n+            except OSError:\n+                return False\n+\n"}
{"instance_id":"django__django-13417","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd8311a7..f5afd2186d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1222,6 +1222,9 @@ class QuerySet:\n         \"\"\"\n         if isinstance(self, EmptyQuerySet):\n             return True\n+        if self.query.group_by:\n+            # For GROUP BY queries, only consider it ordered if there's an explicit ORDER BY\n+            return bool(self.query.extra_order_by or self.query.order_by)\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n         elif self.query.default_ordering and self.query.get_meta().ordering:\n"}
{"instance_id":"django__django-13449","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 84b2b24ffa..4cdbaad024 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -25,6 +25,16 @@ class FirstValue(Func):\n     window_compatible = True\n \n \n+class SQLiteNumericMixin:\n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        if connection.vendor != 'sqlite':\n+            return super().as_sqlite(compiler, connection, **extra_context)\n+        clone = self.copy()\n+        clone.output_field = FloatField()  # Force output to float to avoid SQLite error.\n+        sql, params = clone.as_sql(compiler, connection, **extra_context)\n+        return sql, params\n+\n+\n class LagLeadFunction(Func):\n     window_compatible = True\n \n@@ -49,7 +59,7 @@ class LagLeadFunction(Func):\n         return sources[0].output_field\n \n \n-class Lag(LagLeadFunction):\n+class Lag(SQLiteNumericMixin, LagLeadFunction):\n     function = 'LAG'\n \n \n@@ -59,7 +69,7 @@ class LastValue(Func):\n     window_compatible = True\n \n \n-class Lead(LagLeadFunction):\n+class Lead(SQLiteNumericMixin, LagLeadFunction):\n     function = 'LEAD'\n \n \n@@ -106,3 +116,5 @@ class RowNumber(Func):\n     function = 'ROW_NUMBER'\n     output_field = IntegerField()\n     window_compatible = True\n+\n+\n"}
{"instance_id":"django__django-13512","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex 6f0be6b148..b491a91b01 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -331,7 +331,7 @@ class InlineAdminFormSet:\n                 },\n                 'deleteText': gettext('Remove'),\n             }\n-        })\n+        }, ensure_ascii=False)\n \n     @property\n     def forms(self):\ndiff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..66c039c6e4 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 9de2c60b35..8235aaac01 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1258,7 +1258,7 @@ class JSONField(CharField):\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n"}
{"instance_id":"django__django-13513","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7bd15..fc9c9cca8f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -396,10 +396,10 @@ class ExceptionReporter:\n \n     def get_traceback_frames(self):\n         def explicit_or_implicit_cause(exc_value):\n-            explicit = getattr(exc_value, '__cause__', None)\n-            suppress_context = getattr(exc_value, '__suppress_context__', None)\n-            implicit = getattr(exc_value, '__context__', None)\n-            return explicit or (None if suppress_context else implicit)\n+            return (\n+                exc_value.__cause__ or\n+                (None if exc_value.__suppress_context__ else exc_value.__context__)\n+            )\n \n         # Get the exception and all its causes\n         exceptions = []\n"}
{"instance_id":"django__django-13516","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex e6cbf8c64f..6c97e584c7 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -150,6 +150,12 @@ class OutputWrapper(TextIOBase):\n         style_func = style_func or self.style_func\n         self._out.write(style_func(msg))\n \n+    def flush(self):\n+        \"\"\"\n+        Flush the underlying output stream.\n+        \"\"\"\n+        self._out.flush()\n+\n \n class BaseCommand:\n     \"\"\"\ndiff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\nindex a65500d76a..b3f0a12db5 100644\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -281,8 +281,10 @@ class Command(BaseCommand):\n                 elapsed = \" (%.3fs)\" % (time.monotonic() - self.start) if compute_time else \"\"\n                 if fake:\n                     self.stdout.write(self.style.SUCCESS(\" FAKED\" + elapsed))\n+                    self.stdout.flush()\n                 else:\n                     self.stdout.write(self.style.SUCCESS(\" OK\" + elapsed))\n+                    self.stdout.flush()\n             elif action == \"unapply_start\":\n                 if compute_time:\n                     self.start = time.monotonic()\n@@ -292,8 +294,10 @@ class Command(BaseCommand):\n                 elapsed = \" (%.3fs)\" % (time.monotonic() - self.start) if compute_time else \"\"\n                 if fake:\n                     self.stdout.write(self.style.SUCCESS(\" FAKED\" + elapsed))\n+                    self.stdout.flush()\n                 else:\n                     self.stdout.write(self.style.SUCCESS(\" OK\" + elapsed))\n+                    self.stdout.flush()\n             elif action == \"render_start\":\n                 if compute_time:\n                     self.start = time.monotonic()\n@@ -302,6 +306,7 @@ class Command(BaseCommand):\n             elif action == \"render_success\":\n                 elapsed = \" (%.3fs)\" % (time.monotonic() - self.start) if compute_time else \"\"\n                 self.stdout.write(self.style.SUCCESS(\" DONE\" + elapsed))\n+                self.stdout.flush()\n \n     def sync_apps(self, connection, app_labels):\n         \"\"\"Run the old syncdb-style operation on a list of app_labels.\"\"\"\n"}
{"instance_id":"django__django-13568","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 65fc266f7e..75ae4ebaf8 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -4,6 +4,7 @@ from types import MethodType\n from django.apps import apps\n from django.conf import settings\n from django.core import checks\n+from django.db.models import UniqueConstraint\n \n from .management import _get_builtin_permissions\n \n@@ -52,7 +53,7 @@ def check_user_model(app_configs=None, **kwargs):\n         )\n \n     # Check that the username field is unique\n-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n+    if not (cls._meta.get_field(cls.USERNAME_FIELD).unique or any(isinstance(constraint, UniqueConstraint) and cls.USERNAME_FIELD in constraint.fields and constraint.condition is None for constraint in cls._meta.constraints)):\n         if (settings.AUTHENTICATION_BACKENDS ==\n                 ['django.contrib.auth.backends.ModelBackend']):\n             errors.append(\n"}
{"instance_id":"django__django-13569","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 04e430a42e..8d63f72f68 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -126,9 +126,8 @@ class SQLCompiler:\n             for col in cols:\n                 expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n-            # Skip References to the select clause, as all expressions in the\n-            # select clause are already part of the group by.\n-            if not is_ref:\n+            # Skip References to the select clause and Random() expressions\n+            if not is_ref and not (isinstance(expr, OrderBy) and isinstance(expr.get_source_expressions()[0], Random)):\n                 expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n"}
{"instance_id":"django__django-13670","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d79e0..3b747e685d 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):\n \n     def y(self):\n         \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        return f\"{self.data.year % 100:02}\"\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n@@ -347,3 +347,4 @@ def time_format(value, format_string):\n     \"Convenience function\"\n     tf = TimeFormat(value)\n     return tf.format(format_string)\n+\n"}
{"instance_id":"django__django-13741","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b9eb33329f..9a6614a809 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault(\"required\", False)\n+        kwargs.setdefault(\"disabled\", True)\n         super().__init__(*args, **kwargs)\n \n     def bound_data(self, data, initial):\n"}
{"instance_id":"django__django-13786","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c679c..85ebb46a6f 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -141,7 +141,7 @@ class CreateModel(ModelOperation):\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=operation.options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n"}
{"instance_id":"django__django-13794","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 1c844580c6..72dfd5a182 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -21,6 +21,7 @@ from django.utils.text import (\n )\n from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import gettext, ngettext\n+from django.utils.functional import Promise\n \n from .base import Variable, VariableDoesNotExist\n from .library import Library\n@@ -678,11 +679,12 @@ def add(value, arg):\n         return int(value) + int(arg)\n     except (ValueError, TypeError):\n         try:\n-            return value + arg\n+            if isinstance(value, Promise) or isinstance(arg, Promise):\n+                return str(value) + str(arg)\n+            else:\n+                return value + arg\n         except Exception:\n             return ''\n-\n-\n @register.filter(is_safe=False)\n def get_digit(value, arg):\n     \"\"\"\n"}
{"instance_id":"django__django-13807","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98c0d..38bfc7f9ad 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,7 +327,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute('PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 71ef000c93..0d9329190a 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -170,6 +170,7 @@ class DatabaseOperations(BaseDatabaseOperations):\n     def quote_name(self, name):\n         if name.startswith('\"') and name.endswith('\"'):\n             return name  # Quoting once is enough.\n+        name = name.replace('\"', '\"\"')\n         return '\"%s\"' % name\n \n     def no_limit_value(self):\ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6a2c887612..8143cc654a 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -404,9 +404,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.execute(\"INSERT INTO %s (%s) SELECT %s FROM %s\" % (\n             self.quote_name(new_field.remote_field.through._meta.db_table),\n             ', '.join([\n-                \"id\",\n-                new_field.m2m_column_name(),\n-                new_field.m2m_reverse_name(),\n+                self.quote_name('id'),\n+                self.quote_name(new_field.m2m_column_name()),\n+                self.quote_name(new_field.m2m_reverse_name()),\n             ]),\n             ', '.join([\n                 \"id\",\n"}
{"instance_id":"django__django-13809","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088350..3b6397bcd8 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -51,6 +51,10 @@ class Command(BaseCommand):\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', dest='skip_checks',\n+            help='Skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n@@ -114,11 +118,12 @@ class Command(BaseCommand):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks...\\n\\n\")\n-        self.check(display_num_errors=True)\n-        # Need to check migrations here, so can't use the\n-        # requires_migrations_check attribute.\n-        self.check_migrations()\n+        if not options.get('skip_checks'):\n+            self.stdout.write(\"Performing system checks...\\n\\n\")\n+            self.check(display_num_errors=True)\n+            # Need to check migrations here, so can't use the\n+            # requires_migrations_check attribute.\n+            self.check_migrations()\n         now = datetime.now().strftime('%B %d, %Y - %X')\n         self.stdout.write(now)\n         self.stdout.write((\n@@ -156,3 +161,4 @@ class Command(BaseCommand):\n             if shutdown_message:\n                 self.stdout.write(shutdown_message)\n             sys.exit(0)\n+\n"}
{"instance_id":"django__django-13810","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\nindex 7fbabe4510..3b61f84674 100644\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -7,7 +7,7 @@ from asgiref.sync import sync_to_async\n \n from django.conf import settings\n from django.core import signals\n-from django.core.exceptions import RequestAborted, RequestDataTooBig\n+from django.core.exceptions import MiddlewareNotUsed, RequestAborted, RequestDataTooBig\n from django.core.handlers import base\n from django.http import (\n     FileResponse, HttpRequest, HttpResponse, HttpResponseBadRequest,\n@@ -158,7 +158,15 @@ class ASGIHandler(base.BaseHandler):\n             await self.send_response(error_response, send)\n             return\n         # Get the response, using the async mode of BaseHandler.\n-        response = await self.get_response_async(request)\n+        try:\n+            response = await self.get_response_async(request)\n+        except MiddlewareNotUsed as exc:\n+            if settings.DEBUG:\n+                if str(exc):\n+                    logger.debug('MiddlewareNotUsed: %s', exc)\n+                else:\n+                    logger.debug('MiddlewareNotUsed')\n+            return\n         response._handler_class = self.__class__\n         # Increase chunk size on file responses (ASGI servers handles low-level\n         # chunking).\n@@ -285,3 +293,4 @@ class ASGIHandler(base.BaseHandler):\n         if settings.FORCE_SCRIPT_NAME:\n             return settings.FORCE_SCRIPT_NAME\n         return scope.get('root_path', '') or ''\n+\ndiff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..160c3ba940 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -51,11 +51,11 @@ class BaseHandler:\n                 middleware_is_async = middleware_can_async\n             try:\n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n@@ -346,3 +346,4 @@ def reset_urlconf(sender, **kwargs):\n \n \n request_finished.connect(reset_urlconf)\n+\n"}
{"instance_id":"django__django-13820","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 95a5062ec9..ca2abf917d 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -90,7 +90,7 @@ class MigrationLoader:\n             else:\n                 # Empty directories are namespaces.\n                 # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n+                if getattr(module, '__file__', None) is None and not isinstance(module.__path__, list):\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n                 # Module is not a package (e.g. migrations.py).\n@@ -347,3 +347,4 @@ class MigrationLoader:\n                     state = migration.unapply(state, schema_editor, collect_sql=True)\n             statements.extend(schema_editor.collected_sql)\n         return statements\n+\n"}
{"instance_id":"django__django-13821","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex ab4ea70492..dcff5534e0 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -64,8 +64,8 @@ def list_aggregate(function):\n \n \n def check_sqlite_version():\n-    if Database.sqlite_version_info < (3, 8, 3):\n-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)\n+    if Database.sqlite_version_info < (3, 9, 0):\n+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)\n \n \n check_sqlite_version()\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\nindex 3348256c74..6110b44e25 100644\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -31,16 +31,14 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     time_cast_precision = 3\n     can_release_savepoints = True\n     # Is \"ALTER TABLE ... RENAME COLUMN\" supported?\n-    can_alter_table_rename_column = Database.sqlite_version_info >= (3, 25, 0)\n-    supports_parentheses_in_compound = False\n-    # Deferred constraint checks can be emulated on SQLite < 3.20 but not in a\n-    # reasonably performant way.\n-    supports_pragma_foreign_key_check = Database.sqlite_version_info >= (3, 20, 0)\n+    can_alter_table_rename_column = Database.sqlite_version_info >= (3, 9, 0)\n+    supports_pragma_foreign_key_check = Database.sqlite_version_info >= (3, 9, 0)\n     can_defer_constraint_checks = supports_pragma_foreign_key_check\n-    supports_functions_in_partial_indexes = Database.sqlite_version_info >= (3, 15, 0)\n-    supports_over_clause = Database.sqlite_version_info >= (3, 25, 0)\n-    supports_frame_range_fixed_distance = Database.sqlite_version_info >= (3, 28, 0)\n-    supports_aggregate_filter_clause = Database.sqlite_version_info >= (3, 30, 1)\n+    supports_functions_in_partial_indexes = Database.sqlite_version_info >= (3, 9, 0)\n+    supports_over_clause = Database.sqlite_version_info >= (3, 9, 0)\n+    supports_frame_range_fixed_distance = Database.sqlite_version_info >= (3, 9, 0)\n+    supports_aggregate_filter_clause = Database.sqlite_version_info >= (3, 9, 0)\n+    supports_order_by_nulls_modifier = Database.sqlite_version_info >= (3, 9, 0)\n     supports_order_by_nulls_modifier = Database.sqlite_version_info >= (3, 30, 0)\n     order_by_nulls_first = True\n     supports_json_field_contains = False\n"}
{"instance_id":"django__django-13837","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f881..68ac34dd7e 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -220,10 +220,10 @@ def get_child_arguments():\n     django_main_path = Path(django.__main__.__file__)\n     py_script = Path(sys.argv[0])\n \n+    import __main__\n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    if __main__.__spec__ is not None and __main__.__spec__.parent:\n+        args += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n"}
{"instance_id":"django__django-14007","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 55b1691166..7724e480ad 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -871,7 +871,9 @@ class Model(metaclass=ModelBase):\n             returning_fields = meta.db_returning_fields\n             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n             if results:\n+                connection = connections[using]\n                 for value, field in zip(results[0], returning_fields):\n+                    value = field.from_db_value(value, None, connection)\n                     setattr(self, field.attname, value)\n         return updated\n \ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca527..7c79218dc8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -502,23 +502,28 @@ class QuerySet:\n                 returned_columns = self._batched_insert(\n                     objs_with_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n                 )\n-                for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n-                        if field != opts.pk:\n-                            setattr(obj_with_pk, field.attname, result)\n-                for obj_with_pk in objs_with_pk:\n-                    obj_with_pk._state.adding = False\n-                    obj_with_pk._state.db = self.db\n-            if objs_without_pk:\n-                fields = [f for f in fields if not isinstance(f, AutoField)]\n-                returned_columns = self._batched_insert(\n-                    objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n-                )\n-                if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n-                    assert len(returned_columns) == len(objs_without_pk)\n-                for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n-                        setattr(obj_without_pk, field.attname, result)\n+                connection = connections[self.db]\n+                if objs_with_pk:\n+                    for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n+                        for result, field in zip(results, opts.db_returning_fields):\n+                            if field != opts.pk:\n+                                value = field.from_db_value(result, None, connection)\n+                                setattr(obj_with_pk, field.attname, value)\n+                        obj_with_pk._state.adding = False\n+                        obj_with_pk._state.db = self.db\n+                if objs_without_pk:\n+                    fields = [f for f in fields if not isinstance(f, AutoField)]\n+                    returned_columns = self._batched_insert(\n+                        objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts,\n+                    )\n+                    if connection.features.can_return_rows_from_bulk_insert and not ignore_conflicts:\n+                        assert len(returned_columns) == len(objs_without_pk)\n+                    for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n+                        for result, field in zip(results, opts.db_returning_fields):\n+                            value = field.from_db_value(result, None, connection)\n+                            setattr(obj_without_pk, field.attname, value)\n+                        obj_without_pk._state.adding = False\n+                        obj_without_pk._state.db = self.db\n                     obj_without_pk._state.adding = False\n                     obj_without_pk._state.db = self.db\n \n"}
{"instance_id":"django__django-14011","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..2141317bbc 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -80,6 +80,13 @@ class WSGIServer(simple_server.WSGIServer):\n class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n     daemon_threads = True\n+    def process_request(self, request, client_address):\n+        \"\"\"Process a request, then close database connections.\"\"\"\n+        try:\n+            super().process_request(request, client_address)\n+        finally:\n+            from django.db import connections\n+            connections.close_all()\n \n \n class ServerHandler(simple_server.ServerHandler):\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 92f566b7b0..a4859d512e 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -1581,30 +1581,20 @@ class LiveServerTestCase(TransactionTestCase):\n             raise cls.server_thread.error\n \n     @classmethod\n-    def _create_server_thread(cls, connections_override):\n-        return cls.server_thread_class(\n-            cls.host,\n-            cls.static_handler,\n-            connections_override=connections_override,\n-            port=cls.port,\n-        )\n+    def tearDownClass(cls):\n+        cls._tearDownClassInternal()\n \n     @classmethod\n     def _tearDownClassInternal(cls):\n         # Terminate the live server's thread.\n         cls.server_thread.terminate()\n+        cls.server_thread.join()\n         # Restore sqlite in-memory database connections' non-shareability.\n         for conn in cls.server_thread.connections_override.values():\n             conn.dec_thread_sharing()\n \n         cls._live_server_modified_settings.disable()\n         super().tearDownClass()\n-\n-    @classmethod\n-    def tearDownClass(cls):\n-        cls._tearDownClassInternal()\n-\n-\n class SerializeMixin:\n     \"\"\"\n     Enforce serialization of TestCases that share a common resource.\n"}
{"instance_id":"django__django-14034","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..bb5f0de740 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,59 +1021,27 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n-        if not value or isinstance(value, (list, tuple)):\n-            if not value or not [v for v in value if v not in self.empty_values]:\n-                if self.required:\n-                    raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n-        else:\n+        if not value or not isinstance(value, (list, tuple)):\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n             try:\n                 field_value = value[i]\n             except IndexError:\n                 field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n+            if field_value in field.empty_values:\n+                if field.required:\n                     if self.required:\n                         raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+                    else:\n+                        errors.append(ValidationError(field.error_messages['required'], code='required'))\n+                continue\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n-                # Collect all validation errors in a single list, which we'll\n-                # raise at the end of clean(), rather than raising a single\n-                # exception for the first error we encounter. Skip duplicates.\n-                errors.extend(m for m in e.error_list if m not in errors)\n+                errors.extend(e.error_list)\n         if errors:\n             raise ValidationError(errors)\n-\n-        out = self.compress(clean_data)\n-        self.validate(out)\n-        self.run_validators(out)\n-        return out\n-\n-    def compress(self, data_list):\n-        \"\"\"\n-        Return a single value for the given list of values. The values can be\n-        assumed to be valid.\n-\n-        For example, if this MultiValueField was instantiated with\n-        fields=(DateField(), TimeField()), this might return a datetime\n-        object created by combining the date and time in data_list.\n-        \"\"\"\n-        raise NotImplementedError('Subclasses must implement this method.')\n-\n-    def has_changed(self, initial, data):\n+        return self.compress(clean_data)\n         if self.disabled:\n             return False\n         if initial is None:\n"}
{"instance_id":"django__django-14053","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 494890cc23..03528a3e17 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -220,6 +220,8 @@ class HashedFilesMixin:\n \n         # where to store the new paths\n         hashed_files = {}\n+        # track which files have been yielded\n+        processed_files = set()\n \n         # build a list of adjustable files\n         adjustable_paths = [\n@@ -229,14 +231,18 @@ class HashedFilesMixin:\n         # Do a single pass first. Post-process all files once, then repeat for\n         # adjustable files.\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            if name not in processed_files:\n+                processed_files.add(name)\n+                yield name, hashed_name, processed\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                if name not in processed_files:\n+                    processed_files.add(name)\n+                    yield name, hashed_name, processed\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n@@ -248,6 +254,8 @@ class HashedFilesMixin:\n         # Store the processed paths\n         self.hashed_files.update(hashed_files)\n \n+        # Store the processed paths\n+\n     def _post_process(self, paths, adjustable_paths, hashed_files):\n         # Sort the files by directory level\n         def path_level(name):\n"}
{"instance_id":"django__django-14089","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\nindex 871b016715..f54deb4e82 100644\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -34,6 +34,9 @@ class OrderedSet:\n     def __len__(self):\n         return len(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict)\n+\n \n class MultiValueDictKeyError(KeyError):\n     pass\n@@ -333,3 +336,4 @@ class CaseInsensitiveMapping(Mapping):\n \n     def copy(self):\n         return self\n+\n"}
{"instance_id":"django__django-14122","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 850734709d..7e136b595f 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -128,9 +128,8 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n-            if not is_ref:\n+            if not is_ref and not self._meta_ordering:\n                 expressions.extend(expr.get_group_by_cols())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n         result = []\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 6c728d17bf..c3c9a21df5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2035,6 +2035,9 @@ class Query(BaseExpression):\n                     alias = None\n                 group_by_cols = annotation.get_group_by_cols(alias=alias)\n                 group_by.extend(group_by_cols)\n+        if self._meta_ordering:\n+            meta_ordering_exprs = [expr.expression for expr in self.order_by if hasattr(expr, 'expression')]\n+            group_by = [expr for expr in group_by if expr not in meta_ordering_exprs]\n         self.group_by = tuple(group_by)\n \n     def add_select_related(self, fields):\n"}
{"instance_id":"django__django-14140","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ae0f886107..710f2c714c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -87,7 +87,10 @@ class Q(tree.Node):\n         args, kwargs = (), {}\n         if len(self.children) == 1 and not isinstance(self.children[0], Q):\n             child = self.children[0]\n-            kwargs = {child[0]: child[1]}\n+            if isinstance(child, tuple) and len(child) == 2:\n+                kwargs = {child[0]: child[1]}\n+            else:\n+                args = (child,)\n         else:\n             args = tuple(self.children)\n             if self.connector != self.default:\n@@ -322,3 +325,4 @@ class FilteredRelation:\n         query = compiler.query\n         where = query.build_filtered_relation_q(self.condition, reuse=set(self.path))\n         return compiler.compile(where)\n+\n"}
{"instance_id":"django__django-14170","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..d08d92ca8c 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -165,11 +165,6 @@ ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n-\n \n class Now(Func):\n     template = 'CURRENT_TIMESTAMP'\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..83f27c6a58 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -549,7 +549,7 @@ class YearLookup(Lookup):\n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n-        if self.rhs_is_direct_value():\n+        if self.rhs_is_direct_value() and self.lhs.lookup_name != 'iso_year':\n             # Skip the extract part by directly using the originating field,\n             # that is self.lhs.lhs.\n             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n"}
{"instance_id":"django__django-14311","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5491..79a4c651ce 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -224,7 +224,7 @@ def get_child_arguments():\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n     if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n+        args += ['-m', __main__.__spec__.name]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n"}
{"instance_id":"django__django-14315","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab65a8..4cf6a8df08 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -51,6 +51,8 @@ class DatabaseClient(BaseDatabaseClient):\n             env['PGSSLKEY'] = str(sslkey)\n         if passfile:\n             env['PGPASSFILE'] = str(passfile)\n+        if not env:\n+            env = None\n         return args, env\n \n     def runshell(self, parameters):\n@@ -62,3 +64,4 @@ class DatabaseClient(BaseDatabaseClient):\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n+\n"}
{"instance_id":"django__django-14349","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/validators.py b/django/core/validators.py\nindex a385819510..6b9b0ebc58 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -101,6 +101,9 @@ class URLValidator(RegexValidator):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        # Check for LF, CR, or tab characters\n+        if '\\n' in value or '\\r' in value or '\\t' in value:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n"}
{"instance_id":"django__django-14351","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 6629a1fd51..8d23dc2890 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1365,18 +1365,18 @@ class Query(BaseExpression):\n         A preprocessor for the internal _add_q(). Responsible for doing final\n         join promotion.\n         \"\"\"\n-        # For join promotion this case is doing an AND for the added q_object\n+        # For join promotion, this case is doing an AND for the added q_object\n         # and existing conditions. So, any existing inner join forces the join\n         # type to remain inner. Existing outer joins can however be demoted.\n-        # (Consider case where rel_a is LOUTER and rel_a__col=1 is added - if\n-        # rel_a doesn't produce any rows, then the whole condition must fail.\n-        # So, demotion is OK.\n         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}\n         clause, _ = self._add_q(q_object, self.used_aliases)\n         if clause:\n-            self.where.add(clause, AND)\n+            if q_object.connector == OR:\n+                # When combining Q objects with OR, ensure only necessary columns are selected.\n+                self.default_cols = False\n+                self.select = [self.model._meta.pk.get_col(self.get_initial_alias())]\n+            self.where.add(clause, q_object.connector)\n         self.demote_joins(existing_inner)\n-\n     def build_where(self, filter_expr):\n         return self.build_filter(filter_expr, allow_joins=False)[0]\n \n"}
{"instance_id":"django__django-14373","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex 38e89c47bb..b36ec9e9e1 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n-        return self.data.year\n+        return '%04d' % self.data.year\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\n@@ -331,3 +331,4 @@ def time_format(value, format_string):\n     \"Convenience function\"\n     tf = TimeFormat(value)\n     return tf.format(format_string)\n+\n"}
{"instance_id":"django__django-14376","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..2be0865cdd 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -200,10 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n-        if settings_dict['HOST'].startswith('/'):\n+            kwargs['password'] = settings_dict['PASSWORD']\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n             kwargs['host'] = settings_dict['HOST']\ndiff --git a/django/db/backends/mysql/client.py b/django/db/backends/mysql/client.py\nindex 95442a32b0..2a63ee2b1d 100644\n--- a/django/db/backends/mysql/client.py\n+++ b/django/db/backends/mysql/client.py\n@@ -8,12 +8,9 @@ class DatabaseClient(BaseDatabaseClient):\n     def settings_to_cmd_args_env(cls, settings_dict, parameters):\n         args = [cls.executable_name]\n         env = None\n-        db = settings_dict['OPTIONS'].get('db', settings_dict['NAME'])\n+        database = settings_dict['OPTIONS'].get('database', settings_dict['NAME'])\n         user = settings_dict['OPTIONS'].get('user', settings_dict['USER'])\n-        password = settings_dict['OPTIONS'].get(\n-            'password',\n-            settings_dict['OPTIONS'].get('passwd', settings_dict['PASSWORD'])\n-        )\n+        password = settings_dict['OPTIONS'].get('password', settings_dict['PASSWORD'])\n         host = settings_dict['OPTIONS'].get('host', settings_dict['HOST'])\n         port = settings_dict['OPTIONS'].get('port', settings_dict['PORT'])\n         server_ca = settings_dict['OPTIONS'].get('ssl', {}).get('ca')\n"}
{"instance_id":"django__django-14404","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 59a4a0364d..a5605f679e 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -420,7 +420,7 @@ class AdminSite:\n     def catch_all_view(self, request, url):\n         if settings.APPEND_SLASH and not url.endswith('/'):\n             urlconf = getattr(request, 'urlconf', None)\n-            path = '%s/' % request.path_info\n+            path = '%s%s/' % (request.META.get('SCRIPT_NAME', ''), request.path_info)\n             try:\n                 match = resolve(path, urlconf)\n             except Resolver404:\n"}
{"instance_id":"django__django-14434","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex ad2f5a7da1..4c018624fb 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1251,7 +1251,7 @@ class BaseDatabaseSchemaEditor:\n         else:\n             sql = self.sql_create_unique\n         if columns:\n-            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n+            columns = self._index_columns(model._meta.db_table, columns, col_suffixes=(), opclasses=opclasses)\n         else:\n             columns = Expressions(model._meta.db_table, expressions, compiler, self.quote_value)\n         return Statement(\n"}
{"instance_id":"django__django-14493","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b2..720767aa9e 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -261,6 +261,7 @@ class HashedFilesMixin:\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n+        substitutions = False\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n"}
{"instance_id":"django__django-14500","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 57042a8690..be28dc5a69 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -254,6 +254,8 @@ class MigrationExecutor:\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n                 self.recorder.record_unapplied(app_label, name)\n+            # Also mark the squashed migration itself as unapplied\n+            self.recorder.record_unapplied(migration.app_label, migration.name)\n         else:\n             self.recorder.record_unapplied(migration.app_label, migration.name)\n         # Report progress\n@@ -277,6 +279,10 @@ class MigrationExecutor:\n             all_applied = all(m in applied for m in migration.replaces)\n             if all_applied and key not in applied:\n                 self.recorder.record_applied(*key)\n+            elif not all_applied and key in applied:\n+                # If not all replaced migrations are applied, ensure the squashed\n+                # migration is marked as unapplied\n+                self.recorder.record_unapplied(*key)\n \n     def detect_soft_applied(self, project_state, migration):\n         \"\"\"\n@@ -371,3 +377,4 @@ class MigrationExecutor:\n         # If we get this far and we found at least one CreateModel or AddField migration,\n         # the migration is considered implicitly applied.\n         return (found_create_model_migration or found_add_field_migration), after_state\n+\n"}
{"instance_id":"django__django-14539","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8dd3..3753c054c4 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -278,13 +278,15 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n                     trail = closing + trail\n                     trimmed_something = True\n             # Trim trailing punctuation (after trimming wrapping punctuation,\n-            # as encoded entities contain ';'). Unescape entities to avoid\n-            # breaking them by removing ';'.\n+            # as encoded entities contain ';'). \n             middle_unescaped = html.unescape(middle)\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n-                trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n+                # Get the length difference between escaped and unescaped strings\n+                # to properly handle HTML entities\n+                length_diff = len(middle) - len(middle_unescaped)\n+                trail = middle[len(stripped) + length_diff:] + trail\n+                middle = middle[:len(stripped) + length_diff]\n                 trimmed_something = True\n         return lead, middle, trail\n \n@@ -376,3 +378,4 @@ def html_safe(klass):\n     klass.__str__ = lambda self: mark_safe(klass_str(self))\n     klass.__html__ = lambda self: str(self)\n     return klass\n+\n"}
{"instance_id":"django__django-14559","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca527..33424ed24f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -563,10 +563,12 @@ class QuerySet:\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n+        total_updated = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                self.filter(pk__in=pks).update(**update_kwargs)\n-    bulk_update.alters_data = True\n+                updated = self.filter(pk__in=pks).update(**update_kwargs)\n+                total_updated += updated\n+        return total_updated\n \n     def get_or_create(self, defaults=None, **kwargs):\n         \"\"\"\n"}
{"instance_id":"django__django-14631","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 88adadb37d..5e4f26895d 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -7,6 +7,7 @@ from django.utils.functional import cached_property\n from django.utils.html import conditional_escape, format_html, html_safe\n from django.utils.safestring import mark_safe\n from django.utils.translation import gettext_lazy as _\n+from django.core.exceptions import ValidationError\n \n __all__ = ('BoundField',)\n \n@@ -231,6 +232,25 @@ class BoundField:\n     @property\n     def widget_type(self):\n         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())\n+    def did_change(self):\n+        \"\"\"\n+        Determine if the data for this field has changed from the initial value.\n+        \"\"\"\n+        if not self.field.show_hidden_initial:\n+            # Use the field's has_changed method\n+            return self.field.has_changed(self.initial, self.data)\n+        else:\n+            # For fields with 'show_hidden_initial', compare with the hidden initial value\n+            initial_prefixed_name = self.form.add_initial_prefix(self.name)\n+            hidden_widget = self.field.hidden_widget()\n+            try:\n+                initial_value = self.field.to_python(\n+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)\n+                )\n+            except ValidationError:\n+                # Always assume data has changed if validation fails\n+                return True\n+            return self.field.has_changed(initial_value, self.data)\n \n \n @html_safe\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037bfe9..7800202ad3 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -389,7 +389,7 @@ class BaseForm:\n     def _clean_fields(self):\n         for name, field in self.fields.items():\n             if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+                value = self[name].initial\n             else:\n                 value = self._field_data_value(field, self.add_prefix(name))\n             try:\n@@ -436,28 +436,11 @@ class BaseForm:\n \n     @cached_property\n     def changed_data(self):\n-        data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n-                data.append(name)\n-        return data\n+        return [name for name, bf in self._bound_items() if bf.did_change()]\n \n+    def _bound_items(self):\n+        for name in self.fields:\n+            yield name, self[name]\n     @property\n     def media(self):\n         \"\"\"Return all media required to render the widgets on this form.\"\"\"\n"}
{"instance_id":"django__django-14725","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dae626b550..b4906eef3c 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -296,7 +296,7 @@ class InlineAdminFormSet:\n                 self.formset, form, self.fieldsets, self.prepopulated_fields,\n                 None, self.readonly_fields, model_admin=self.opts,\n             )\n-        if self.has_add_permission:\n+        if self.has_add_permission and getattr(self.formset, 'allow_new_objects', True):\n             yield InlineAdminForm(\n                 self.formset, self.formset.empty_form,\n                 self.fieldsets, self.prepopulated_fields, None,\ndiff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 75b0646512..db2c912739 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -478,7 +478,7 @@ class BaseFormSet(RenderableFormMixin):\n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None, validate_max=False,\n                     min_num=None, validate_min=False, absolute_max=None,\n-                    can_delete_extra=True, renderer=None):\n+                    can_delete_extra=True, renderer=None, allow_new_objects=True):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..91f261b6d6 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -812,6 +812,8 @@ class BaseModelFormSet(BaseFormSet):\n         return saved_instances\n \n     def save_new_objects(self, commit=True):\n+        if not getattr(self, 'allow_new_objects', True):\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n"}
{"instance_id":"django__django-14765","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 088f5c41f0..ef9341c4c2 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -92,7 +92,8 @@ class ProjectState:\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n         if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n+            assert isinstance(real_apps, set), \"real_apps must be a set, not %s\" % type(real_apps).__name__\n+            self.real_apps = real_apps\n         else:\n             self.real_apps = set()\n         self.is_delayed = False\n"}
{"instance_id":"django__django-14771","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 473fde0de0..483c569a04 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -105,7 +105,8 @@ class Command(BaseCommand):\n         use_reloader = options['use_reloader']\n \n         if use_reloader:\n-            autoreload.run_with_reloader(self.inner_run, **options)\n+            xoptions = [f'-X{key}={value}' if value is not None else f'-X{key}' for key, value in sys._xoptions.items()]\n+            autoreload.run_with_reloader(self.inner_run, *xoptions, **options)\n         else:\n             self.inner_run(None, **options)\n \ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..8f4598ccdf 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -220,6 +220,7 @@ def get_child_arguments():\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+    args += [f'-X{key}={value}' if value is not None else f'-X{key}' for key, value in sys._xoptions.items()]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n"}
{"instance_id":"django__django-14792","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..a2a68774ad 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -1,49 +1,45 @@\n-from psycopg2.extras import Inet\n-\n from django.conf import settings\n+from django.db import NotSupportedError\n from django.db.backends.base.operations import BaseDatabaseOperations\n+from django.db.utils import DatabaseError\n+from django.utils import timezone\n+from django.utils.encoding import force_str\n+from django.utils.regex_helper import _lazy_re_compile\n \n+import datetime\n+import decimal\n+import json\n+import re\n+import uuid\n \n class DatabaseOperations(BaseDatabaseOperations):\n     cast_char_field_without_max_length = 'varchar'\n     explain_prefix = 'EXPLAIN'\n-    cast_data_types = {\n-        'AutoField': 'integer',\n-        'BigAutoField': 'bigint',\n-        'SmallAutoField': 'smallint',\n-    }\n-\n-    def unification_cast_sql(self, output_field):\n-        internal_type = output_field.get_internal_type()\n-        if internal_type in (\"GenericIPAddressField\", \"IPAddressField\", \"TimeField\", \"UUIDField\"):\n-            # PostgreSQL will resolve a union as type 'text' if input types are\n-            # 'unknown'.\n-            # https://www.postgresql.org/docs/current/typeconv-union-case.html\n-            # These fields cannot be implicitly cast back in the default\n-            # PostgreSQL configuration so we need to explicitly cast them.\n-            # We must also remove components of the type within brackets:\n-            # varchar(255) -> varchar.\n-            return 'CAST(%%s AS %s)' % output_field.db_type(self.connection).split('(')[0]\n-        return '%s'\n+    explain_options = frozenset([\n+        'ANALYZE', 'VERBOSE', 'COSTS', 'BUFFERS', 'TIMING', 'FORMAT',\n+    ])\n \n     def date_extract_sql(self, lookup_type, field_name):\n-        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n+        # https://www.postgresql.org/docs/current/static/functions-datetime.html\n         if lookup_type == 'week_day':\n-            # For consistency across backends, we return Sunday=1, Saturday=7.\n+            # For consistency across backends, we retrieve 1-7, where Sunday is 1.\n             return \"EXTRACT('dow' FROM %s) + 1\" % field_name\n         elif lookup_type == 'iso_week_day':\n+            # Make Sunday=7 on all backends.\n             return \"EXTRACT('isodow' FROM %s)\" % field_name\n-        elif lookup_type == 'iso_year':\n-            return \"EXTRACT('isoyear' FROM %s)\" % field_name\n+        elif lookup_type == 'week':\n+            return \"EXTRACT('week' FROM %s)\" % field_name\n         else:\n             return \"EXTRACT('%s' FROM %s)\" % (lookup_type, field_name)\n \n     def date_trunc_sql(self, lookup_type, field_name, tzname=None):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n     def _prepare_tzname_delta(self, tzname):\n+        if tzname.startswith('Etc/GMT'):\n+            return tzname  # Skip sign reversal for 'Etc/GMT' time zones\n         if '+' in tzname:\n             return tzname.replace('+', '-')\n         elif '-' in tzname:\n@@ -52,7 +48,9 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def _convert_field_to_tz(self, field_name, tzname):\n         if tzname and settings.USE_TZ:\n-            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, self._prepare_tzname_delta(tzname))\n+            # _prepare_tzname_delta will swap +/- signs for offsetted timezones.\n+            tzname = self._prepare_tzname_delta(tzname)\n+            field_name = \"%s AT TIME ZONE '%s'\" % (field_name, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n@@ -64,212 +62,223 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return '(%s)::time' % field_name\n \n     def datetime_extract_sql(self, lookup_type, field_name, tzname):\n+        # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT\n         field_name = self._convert_field_to_tz(field_name, tzname)\n-        return self.date_extract_sql(lookup_type, field_name)\n+        if lookup_type == 'week_day':\n+            # For consistency across backends, we retrieve 1-7, where Sunday is 1.\n+            return \"EXTRACT('dow' FROM %s) + 1\" % field_name\n+        elif lookup_type == 'iso_week_day':\n+            # Make Sunday=7 on all backends.\n+            return \"EXTRACT('isodow' FROM %s)\" % field_name\n+        elif lookup_type == 'week':\n+            return \"EXTRACT('week' FROM %s)\" % field_name\n+        else:\n+            return \"EXTRACT('%s' FROM %s)\" % (lookup_type, field_name)\n \n     def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n         # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC\n+        field_name = self._convert_field_to_tz(field_name, tzname)\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n-    def time_trunc_sql(self, lookup_type, field_name, tzname=None):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n+    def time_trunc_sql(self, lookup_type, field_name):\n         return \"DATE_TRUNC('%s', %s)::time\" % (lookup_type, field_name)\n \n-    def deferrable_sql(self):\n-        return \" DEFERRABLE INITIALLY DEFERRED\"\n-\n-    def fetch_returned_insert_rows(self, cursor):\n-        \"\"\"\n-        Given a cursor object that has just performed an INSERT...RETURNING\n-        statement into a table, return the tuple of returned data.\n-        \"\"\"\n-        return cursor.fetchall()\n-\n-    def lookup_cast(self, lookup_type, internal_type=None):\n-        lookup = '%s'\n-\n-        # Cast text lookups to text to allow things like filter(x__contains=4)\n-        if lookup_type in ('iexact', 'contains', 'icontains', 'startswith',\n-                           'istartswith', 'endswith', 'iendswith', 'regex', 'iregex'):\n-            if internal_type in ('IPAddressField', 'GenericIPAddressField'):\n-                lookup = \"HOST(%s)\"\n-            elif internal_type in ('CICharField', 'CIEmailField', 'CITextField'):\n-                lookup = '%s::citext'\n+    def sql_flush(self, style, tables, sequences, allow_cascade=False):\n+        if tables:\n+            # Perform a single SQL TRUNCATE statement to wipe all tables.\n+            tables_sql = ', '.join(\n+                style.SQL_FIELD(self.quote_name(table)) for table in tables)\n+            if allow_cascade:\n+                sql = ['%s %s CASCADE;' % (\n+                    style.SQL_KEYWORD('TRUNCATE'),\n+                    tables_sql,\n+                )]\n             else:\n-                lookup = \"%s::text\"\n-\n-        # Use UPPER(x) for case-insensitive lookups; it's faster.\n-        if lookup_type in ('iexact', 'icontains', 'istartswith', 'iendswith'):\n-            lookup = 'UPPER(%s)' % lookup\n+                sql = ['%s %s;' % (\n+                    style.SQL_KEYWORD('TRUNCATE'),\n+                    tables_sql,\n+                )]\n+            return sql\n+        else:\n+            return []\n \n-        return lookup\n+    def sequence_reset_by_name_sql(self, style, sequences):\n+        return [\n+            \"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\" % (\n+                style.SQL_KEYWORD('SELECT'),\n+                style.SQL_TABLE(self.quote_name(sequence_info['table'])),\n+                style.SQL_FIELD(self.quote_name(sequence_info['column'])),\n+            ) for sequence_info in sequences\n+        ]\n \n-    def no_limit_value(self):\n-        return None\n+    def adapt_datefield_value(self, value):\n+        if value is None:\n+            return None\n+        return str(value)\n \n-    def prepare_sql_script(self, sql):\n-        return [sql]\n+    def adapt_datetimefield_value(self, value):\n+        if value is None:\n+            return None\n+        # expression inputs will be converted by the database.\n+        if hasattr(value, 'resolve_expression'):\n+            return value\n+        if settings.USE_TZ and timezone.is_naive(value):\n+            value = timezone.make_aware(value, timezone.utc)\n+        return value\n \n-    def quote_name(self, name):\n-        if name.startswith('\"') and name.endswith('\"'):\n-            return name  # Quoting once is enough.\n-        return '\"%s\"' % name\n+    def adapt_timefield_value(self, value):\n+        if value is None:\n+            return None\n+        if isinstance(value, datetime.datetime):\n+            if timezone.is_naive(value):\n+                # use DEFAULT_TIMEZONE if value has no timezone information\n+                default_timezone = timezone.get_default_timezone()\n+                value = timezone.make_aware(value, default_timezone)\n+            # convert to equivalent time\n+            value = value.astimezone(timezone.utc).time()\n+        return str(value)\n \n-    def set_time_zone_sql(self):\n-        return \"SET TIME ZONE %s\"\n+    def datetime_extract_sql(self, lookup_type, field_name, tzname):\n+        if tzname and settings.USE_TZ:\n+            # Note that date_extract_sql is called by QuerySet.extra(select=),\n+            # so in the case of extra we need to handle field transforms\n+            # ourselves.\n+            field_name = self._convert_field_to_tz(field_name, tzname)\n+        return self.date_extract_sql(lookup_type, field_name)\n \n-    def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):\n-        if not tables:\n-            return []\n+    def last_insert_id(self, cursor, table_name, pk_name):\n+        cursor.execute(\"SELECT CURRVAL(pg_get_serial_sequence('%s','%s'))\" % (\n+            self.quote_name(table_name), pk_name))\n+        return cursor.fetchone()[0]\n \n-        # Perform a single SQL 'TRUNCATE x, y, z...;' statement. It allows us\n-        # to truncate tables referenced by a foreign key in any other table.\n-        sql_parts = [\n-            style.SQL_KEYWORD('TRUNCATE'),\n-            ', '.join(style.SQL_FIELD(self.quote_name(table)) for table in tables),\n-        ]\n-        if reset_sequences:\n-            sql_parts.append(style.SQL_KEYWORD('RESTART IDENTITY'))\n-        if allow_cascade:\n-            sql_parts.append(style.SQL_KEYWORD('CASCADE'))\n-        return ['%s;' % ' '.join(sql_parts)]\n+    def no_limit_value(self):\n+        return None\n \n-    def sequence_reset_by_name_sql(self, style, sequences):\n-        # 'ALTER SEQUENCE sequence_name RESTART WITH 1;'... style SQL statements\n-        # to reset sequence indices\n-        sql = []\n-        for sequence_info in sequences:\n-            table_name = sequence_info['table']\n-            # 'id' will be the case if it's an m2m using an autogenerated\n-            # intermediate table (see BaseDatabaseIntrospection.sequence_list).\n-            column_name = sequence_info['column'] or 'id'\n-            sql.append(\"%s setval(pg_get_serial_sequence('%s','%s'), 1, false);\" % (\n-                style.SQL_KEYWORD('SELECT'),\n-                style.SQL_TABLE(self.quote_name(table_name)),\n-                style.SQL_FIELD(column_name),\n-            ))\n-        return sql\n-\n-    def tablespace_sql(self, tablespace, inline=False):\n-        if inline:\n-            return \"USING INDEX TABLESPACE %s\" % self.quote_name(tablespace)\n+    def return_insert_id(self):\n+        return \"RETURNING %s\", ()\n+\n+    def compiler(self, compiler_name):\n+        # date-related operations are specific to PostgreSQL.\n+        # So even with GeoBehaviour we need to use our own\n+        # compiler here\n+        from django.db.models.sql.compiler import SQLInsertCompiler, SQLCompiler\n+        if compiler_name == 'SQLInsertCompiler':\n+            return SQLInsertCompiler\n+        elif compiler_name == 'SQLCompiler':\n+            return SQLCompiler\n         else:\n-            return \"TABLESPACE %s\" % self.quote_name(tablespace)\n-\n-    def sequence_reset_sql(self, style, model_list):\n-        from django.db import models\n-        output = []\n-        qn = self.quote_name\n-        for model in model_list:\n-            # Use `coalesce` to set the sequence for each model to the max pk value if there are records,\n-            # or 1 if there are none. Set the `is_called` property (the third argument to `setval`) to true\n-            # if there are records (as the max pk value is already in use), otherwise set it to false.\n-            # Use pg_get_serial_sequence to get the underlying sequence name from the table name\n-            # and column name (available since PostgreSQL 8)\n-\n-            for f in model._meta.local_fields:\n-                if isinstance(f, models.AutoField):\n-                    output.append(\n-                        \"%s setval(pg_get_serial_sequence('%s','%s'), \"\n-                        \"coalesce(max(%s), 1), max(%s) %s null) %s %s;\" % (\n-                            style.SQL_KEYWORD('SELECT'),\n-                            style.SQL_TABLE(qn(model._meta.db_table)),\n-                            style.SQL_FIELD(f.column),\n-                            style.SQL_FIELD(qn(f.column)),\n-                            style.SQL_FIELD(qn(f.column)),\n-                            style.SQL_KEYWORD('IS NOT'),\n-                            style.SQL_KEYWORD('FROM'),\n-                            style.SQL_TABLE(qn(model._meta.db_table)),\n-                        )\n-                    )\n-                    break  # Only one AutoField is allowed per model, so don't bother continuing.\n-        return output\n-\n-    def prep_for_iexact_query(self, x):\n-        return x\n+            super().compiler(compiler_name)\n \n-    def max_name_length(self):\n+    def bulk_insert_sql(self, fields, placeholder_rows):\n+        # PostgreSQL has a special syntax for bulk insert\n+        # insert into table (col1, col2, col3) values (v1, v2, v3), (v4, v5, v6), ...\n+        # but required special way of formatting the values\n+        items_sql = \"VALUES \" + \", \".join([\n+            \"(%s)\" % \", \".join(row) for row in placeholder_rows\n+        ])\n+        return items_sql\n+\n+    def conditional_expression_supported_in_where_clause(self, expression):\n         \"\"\"\n-        Return the maximum length of an identifier.\n-\n-        The maximum length of an identifier is 63 by default, but can be\n-        changed by recompiling PostgreSQL after editing the NAMEDATALEN\n-        macro in src/include/pg_config_manual.h.\n-\n-        This implementation returns 63, but can be overridden by a custom\n-        database backend that inherits most of its behavior from this one.\n+        PostgreSQL supports partial indexes, so we can use conditions in the\n+        WHERE clause for constraints.\n         \"\"\"\n-        return 63\n+        return True\n+\n+    def explain_query_prefix(self, format=None, **options):\n+        prefix = super().explain_query_prefix(format, **options)\n+        extra = []\n+        if self.connection.settings_dict.get('OPTIONS', {}).get('client_encoding', '').lower() != 'utf8':\n+            extra.append('ENCODING UTF8')\n+        if options:\n+            extra_options = []\n+            for name in self.explain_options:\n+                if name in options:\n+                    value = options[name]\n+                    if value is True:\n+                        extra_options.append(name)\n+                    elif value is not False:\n+                        extra_options.append('%s %s' % (name, value))\n+            if extra_options:\n+                extra.append('(%s)' % ' '.join(extra_options))\n+        return ' '.join([prefix] + extra)\n \n     def distinct_sql(self, fields, params):\n         if fields:\n-            params = [param for param_list in params for param in param_list]\n-            return (['DISTINCT ON (%s)' % ', '.join(fields)], params)\n+            return ['DISTINCT ON (%s)' % ', '.join(fields)], params\n         else:\n-            return ['DISTINCT'], []\n+            return ['DISTINCT'], params\n \n-    def last_executed_query(self, cursor, sql, params):\n-        # https://www.psycopg.org/docs/cursor.html#cursor.query\n-        # The query attribute is a Psycopg extension to the DB API 2.0.\n-        if cursor.query is not None:\n-            return cursor.query.decode()\n-        return None\n+    def lookup_cast(self, lookup_type, internal_type=None):\n+        if internal_type == 'JSONField':\n+            return 'JSONB %s'\n+        return '%s'\n \n-    def return_insert_columns(self, fields):\n-        if not fields:\n-            return '', ()\n-        columns = [\n-            '%s.%s' % (\n-                self.quote_name(field.model._meta.db_table),\n-                self.quote_name(field.column),\n-            ) for field in fields\n-        ]\n-        return 'RETURNING %s' % ', '.join(columns), ()\n+    def pattern_ops(self, compiler):\n+        return {\n+            'exact': '= %s',\n+            'iexact': 'ILIKE %s',\n+            'contains': 'LIKE %s',\n+            'icontains': 'ILIKE %s',\n+            'regex': '~ %s',\n+            'iregex': '~* %s',\n+            'startswith': 'LIKE %s',\n+            'istartswith': 'ILIKE %s',\n+            'endswith': 'LIKE %s',\n+            'iendswith': 'ILIKE %s',\n+        }\n+\n+    def explain_query(self, query, format=None, **options):\n+        result = super().explain_query(query, format, **options)\n+        # FOLLOWING is not available in PostgreSQL 9.6.\n+        if (\n+            options.get('FLUSH', False) and\n+            self.connection.features.is_postgresql_11\n+        ):\n+            result += ' WITH (fmt)'\n+        return result\n \n-    def bulk_insert_sql(self, fields, placeholder_rows):\n-        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n-        values_sql = \", \".join(\"(%s)\" % sql for sql in placeholder_rows_sql)\n-        return \"VALUES \" + values_sql\n+    def last_executed_query(self, cursor, sql, params):\n+        # https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\n+        if cursor.query is not None:\n+            return force_str(cursor.query)\n+        return super().last_executed_query(cursor, sql, params)\n \n-    def adapt_datefield_value(self, value):\n-        return value\n+    def adapt_unknown_value(self, value):\n+        # Postgres doesn't have a 'null' type, so we have to return None for unknown values\n+        if value is None:\n+            return None\n+        raise NotSupportedError(\"Postgres backend does not support storing %s datatype.\" % type(value).__name__)\n \n-    def adapt_datetimefield_value(self, value):\n-        return value\n-\n-    def adapt_timefield_value(self, value):\n-        return value\n+    def adapt_json_value(self, value, encoder):\n+        return json.dumps(value, cls=encoder)\n \n-    def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):\n+    def adapt_autopk_value(self, value):\n+        if isinstance(value, str) and value.isdigit():\n+            return int(value)\n         return value\n \n-    def adapt_ipaddressfield_value(self, value):\n-        if value:\n-            return Inet(value)\n-        return None\n+    def explain_table_name(self, table_name):\n+        return self.quote_name(table_name)\n \n-    def subtract_temporals(self, internal_type, lhs, rhs):\n-        if internal_type == 'DateField':\n-            lhs_sql, lhs_params = lhs\n-            rhs_sql, rhs_params = rhs\n-            params = (*lhs_params, *rhs_params)\n-            return \"(interval '1 day' * (%s - %s))\" % (lhs_sql, rhs_sql), params\n-        return super().subtract_temporals(internal_type, lhs, rhs)\n+    def prep_for_iexact_query(self, x):\n+        return force_str(x).lower()\n+\n+    def get_db_converters(self, internal_type):\n+        converters = super().get_db_converters(internal_type)\n+        if internal_type == 'JSONField':\n+            converters += [self.convert_jsonfield_value]\n+        return converters\n+\n+    def convert_jsonfield_value(self, value, expression, connection):\n+        if value is None:\n+            return value\n+        return json.loads(value)\n+\n+    def get_constraints(self, cursor, table_name):\n+        # Postgres implementation uses introspection module\n+        # to fetch constraints and check and unique constraints.\n+        from django.db.backends.postgresql.introspection import DatabaseIntrospection\n+        introspection = DatabaseIntrospection(self.connection)\n+        return introspection.get_constraints(cursor, table_name)\n \n-    def explain_query_prefix(self, format=None, **options):\n-        prefix = super().explain_query_prefix(format)\n-        extra = {}\n-        if format:\n-            extra['FORMAT'] = format\n-        if options:\n-            extra.update({\n-                name.upper(): 'true' if value else 'false'\n-                for name, value in options.items()\n-            })\n-        if extra:\n-            prefix += ' (%s)' % ', '.join('%s %s' % i for i in extra.items())\n-        return prefix\n-\n-    def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):\n-        return 'ON CONFLICT DO NOTHING' if ignore_conflicts else super().ignore_conflicts_suffix_sql(ignore_conflicts)\ndiff --git a/django/http/__init__.py b/django/http/__init__.py\nindex 491239bf8a..a3fe7b0dd8 100644\n--- a/django/http/__init__.py\n+++ b/django/http/__init__.py\n@@ -1,3 +1,4 @@\n+# Temporary fix for circular import issue\n from django.http.cookie import SimpleCookie, parse_cookie\n from django.http.request import (\n     HttpRequest, QueryDict, RawPostDataException, UnreadablePostError,\n"}
{"instance_id":"django__django-15022","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 66f3396a6b..c9b8b21a14 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1031,14 +1031,15 @@ class ModelAdmin(BaseModelAdmin):\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\n+            or_queries = models.Q()\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n-                or_queries = models.Q(\n-                    *((orm_lookup, bit) for orm_lookup in orm_lookups),\n-                    _connector=models.Q.OR,\n-                )\n-                queryset = queryset.filter(or_queries)\n+                bit_queries = models.Q()\n+                for orm_lookup in orm_lookups:\n+                    bit_queries |= models.Q(**{orm_lookup: bit})\n+                or_queries &= bit_queries\n+            queryset = queryset.filter(or_queries)\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n"}
{"instance_id":"django__django-15037","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477..c09b6380c1 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -128,6 +128,7 @@ class Command(BaseCommand):\n                             field_type = '%s(%s' % (rel_type, rel_to)\n                         else:\n                             field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        extra_params['to_field'] = relations[column_name][0]\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\ndiff --git a/django/db/backends/mysql/introspection.py b/django/db/backends/mysql/introspection.py\nindex 2383c9ca1b..c971d72b1f 100644\n--- a/django/db/backends/mysql/introspection.py\n+++ b/django/db/backends/mysql/introspection.py\n@@ -150,13 +150,17 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n \n     def get_relations(self, cursor, table_name):\n         \"\"\"\n-        Return a dictionary of {field_name: (field_name_other_table, other_table)}\n-        representing all relationships to the given table.\n+        Return a dictionary mapping field names to tuples of\n+        (referenced_column_name, referenced_table_name) representing all\n+        foreign key relationships from the given table.\n         \"\"\"\n-        constraints = self.get_key_columns(cursor, table_name)\n         relations = {}\n-        for my_fieldname, other_table, other_field in constraints:\n-            relations[my_fieldname] = (other_field, other_table)\n+        constraints = self.get_constraints(cursor, table_name)\n+        for constraint_name, constraint in constraints.items():\n+            if constraint['foreign_key']:\n+                ref_table, ref_column = constraint['foreign_key']\n+                for column in constraint['columns']:\n+                    relations[column] = (ref_column, ref_table)\n         return relations\n \n     def get_key_columns(self, cursor, table_name):\ndiff --git a/django/db/backends/oracle/introspection.py b/django/db/backends/oracle/introspection.py\nindex fa7a34ed0a..f3e041b952 100644\n--- a/django/db/backends/oracle/introspection.py\n+++ b/django/db/backends/oracle/introspection.py\n@@ -183,24 +183,18 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n \n     def get_relations(self, cursor, table_name):\n         \"\"\"\n-        Return a dictionary of {field_name: (field_name_other_table, other_table)}\n-        representing all relationships to the given table.\n+        Return a dictionary mapping field names to tuples of\n+        (referenced_column_name, referenced_table_name) representing all\n+        foreign key relationships from the given table.\n         \"\"\"\n-        table_name = table_name.upper()\n-        cursor.execute(\"\"\"\n-    SELECT ca.column_name, cb.table_name, cb.column_name\n-    FROM   user_constraints, USER_CONS_COLUMNS ca, USER_CONS_COLUMNS cb\n-    WHERE  user_constraints.table_name = %s AND\n-           user_constraints.constraint_name = ca.constraint_name AND\n-           user_constraints.r_constraint_name = cb.constraint_name AND\n-           ca.position = cb.position\"\"\", [table_name])\n-\n-        return {\n-            self.identifier_converter(field_name): (\n-                self.identifier_converter(rel_field_name),\n-                self.identifier_converter(rel_table_name),\n-            ) for field_name, rel_table_name, rel_field_name in cursor.fetchall()\n-        }\n+        relations = {}\n+        constraints = self.get_constraints(cursor, table_name)\n+        for constraint_name, constraint in constraints.items():\n+            if constraint['foreign_key']:\n+                ref_table, ref_column = constraint['foreign_key']\n+                for column in constraint['columns']:\n+                    relations[column] = (ref_column, ref_table)\n+        return relations\n \n     def get_key_columns(self, cursor, table_name):\n         cursor.execute(\"\"\"\ndiff --git a/django/db/backends/sqlite3/introspection.py b/django/db/backends/sqlite3/introspection.py\nindex ce097dbd72..14073c0882 100644\n--- a/django/db/backends/sqlite3/introspection.py\n+++ b/django/db/backends/sqlite3/introspection.py\n@@ -139,35 +139,30 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n             field_desc = field_desc.strip()\n             if field_desc.startswith(\"UNIQUE\"):\n                 continue\n-\n-            m = re.search(r'references (\\S*) ?\\([\"|]?(.*)[\"|]?\\)', field_desc, re.I)\n-            if not m:\n+            # Look for foreign key definitions in CREATE TABLE statement.\n+            m = re.search(\n+                r'FOREIGN KEY\\s*\\(([^\\)]*)\\)\\s*REFERENCES\\s+(\\S+)\\s*\\(([^\\)]*)\\)',\n+                field_desc,\n+                re.IGNORECASE\n+            )\n+            if m:\n+                from_fields = [f.strip().strip('\"') for f in m.group(1).split(',')]\n+                referenced_table = m.group(2).strip('\"')\n+                to_fields = [f.strip().strip('\"') for f in m.group(3).split(',')]\n+                for from_field, to_field in zip(from_fields, to_fields):\n+                    relations[from_field] = (to_field, referenced_table)\n                 continue\n-            table, column = [s.strip('\"') for s in m.groups()]\n-\n-            if field_desc.startswith(\"FOREIGN KEY\"):\n-                # Find name of the target FK field\n-                m = re.match(r'FOREIGN KEY\\s*\\(([^\\)]*)\\).*', field_desc, re.I)\n-                field_name = m[1].strip('\"')\n-            else:\n-                field_name = field_desc.split()[0].strip('\"')\n-\n-            cursor.execute(\"SELECT sql FROM sqlite_master WHERE tbl_name = %s\", [table])\n-            result = cursor.fetchall()[0]\n-            other_table_results = result[0].strip()\n-            li, ri = other_table_results.index('('), other_table_results.rindex(')')\n-            other_table_results = other_table_results[li + 1:ri]\n-\n-            for other_desc in other_table_results.split(','):\n-                other_desc = other_desc.strip()\n-                if other_desc.startswith('UNIQUE'):\n-                    continue\n-\n-                other_name = other_desc.split(' ', 1)[0].strip('\"')\n-                if other_name == column:\n-                    relations[field_name] = (other_name, table)\n-                    break\n-\n+            # Check for inline REFERENCES statements.\n+            m = re.search(\n+                r'^\"?(?P<field_name>\\w+)\"?.*REFERENCES\\s+\"?(?P<ref_table>\\w+)\"?\\s*\\(\"?(?P<ref_field>\\w+)\"?\\)',\n+                field_desc,\n+                re.IGNORECASE\n+            )\n+            if m:\n+                field_name = m.group('field_name')\n+                referenced_table = m.group('ref_table')\n+                referenced_field = m.group('ref_field')\n+                relations[field_name] = (referenced_field, referenced_table)\n         return relations\n \n     def get_key_columns(self, cursor, table_name):\n"}
{"instance_id":"django__django-15098","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 7dcc77b46c..7be7453fc5 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -39,11 +39,11 @@ accept_language_re = _lazy_re_compile(r'''\n         ''', re.VERBOSE)\n \n language_code_re = _lazy_re_compile(\n-    r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$',\n+    r'^[a-zA-Z]{1,8}(?:-[a-zA-Z0-9]{1,8})*(?:@[a-zA-Z0-9]{1,20})?$',\n     re.IGNORECASE\n )\n \n-language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+)?)(/|$)')\n+language_code_prefix_re = _lazy_re_compile(r'^/([a-zA-Z]{1,8}(?:-[a-zA-Z0-9]{1,8})*)(/|$)')\n \n \n @receiver(setting_changed)\n@@ -482,9 +482,9 @@ def get_supported_language_variant(lang_code, strict=False):\n         except KeyError:\n             pass\n         i = None\n-        while (i := lang_code.rfind('-', 0, i)) > -1:\n-            possible_lang_codes.append(lang_code[:i])\n-        generic_lang_code = possible_lang_codes[-1]\n+        components = lang_code.split('-')\n+        for i in range(1, len(components)):\n+            possible_lang_codes.append('-'.join(components[:-i]))\n         supported_lang_codes = get_languages()\n \n         for code in possible_lang_codes:\n@@ -508,7 +508,7 @@ def get_language_from_path(path, strict=False):\n     regex_match = language_code_prefix_re.match(path)\n     if not regex_match:\n         return None\n-    lang_code = regex_match[1]\n+    lang_code = regex_match.group(1)\n     try:\n         return get_supported_language_variant(lang_code, strict=strict)\n     except LookupError:\n"}
{"instance_id":"django__django-15103","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5ccef38048..12f0d4caaa 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -83,7 +83,7 @@ def escapejs_filter(value):\n \n \n @register.filter(is_safe=True)\n-def json_script(value, element_id):\n+def json_script(value, element_id=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n     tag.\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex da1b5675ec..de1d3d0ba8 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -61,7 +61,7 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id):\n+def json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -69,6 +69,11 @@ def json_script(value, element_id):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    if element_id is None:\n+        return format_html(\n+            '<script type=\"application/json\">{}</script>',\n+            mark_safe(json_str)\n+        )\n     return format_html(\n         '<script id=\"{}\" type=\"application/json\">{}</script>',\n         element_id, mark_safe(json_str)\n"}
{"instance_id":"django__django-15104","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 97977d72ef..bf9c2acd26 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ class MigrationAutodetector:\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n"}
{"instance_id":"django__django-15127","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/conf/__init__.py b/django/conf/__init__.py\nindex 80f3115d47..cd9a634e08 100644\n--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -255,6 +255,8 @@ class UserSettingsHolder:\n         if name == 'USE_L10N':\n             warnings.warn(USE_L10N_DEPRECATED_MSG, RemovedInDjango50Warning)\n         super().__setattr__(name, value)\n+        from django.test.signals import setting_changed\n+        setting_changed.send(sender=self.__class__, setting=name, value=value, enter=True)\n         if name == 'USE_DEPRECATED_PYTZ':\n             warnings.warn(USE_DEPRECATED_PYTZ_DEPRECATED_MSG, RemovedInDjango50Warning)\n \ndiff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex 01422066a6..8975691e09 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -2,6 +2,14 @@ from django.conf import settings\n from django.contrib.messages import constants, utils\n \n LEVEL_TAGS = utils.get_level_tags()\n+from django.dispatch import receiver\n+from django.test.signals import setting_changed\n+\n+@receiver(setting_changed)\n+def update_level_tags(**kwargs):\n+    if kwargs['setting'] == 'MESSAGE_TAGS':\n+        global LEVEL_TAGS\n+        LEVEL_TAGS = utils.get_level_tags()\n \n \n class Message:\ndiff --git a/django/contrib/messages/utils.py b/django/contrib/messages/utils.py\nindex 9013044969..132ca85ba5 100644\n--- a/django/contrib/messages/utils.py\n+++ b/django/contrib/messages/utils.py\n@@ -2,6 +2,16 @@ from django.conf import settings\n from django.contrib.messages import constants\n \n \n+from django.dispatch import receiver\n+from django.test.signals import setting_changed\n+\n+LEVEL_TAGS = None\n+\n+@receiver(setting_changed)\n+def update_level_tags(**kwargs):\n+    if kwargs['setting'] == 'MESSAGE_TAGS':\n+        global LEVEL_TAGS\n+        LEVEL_TAGS = get_level_tags()\n def get_level_tags():\n     \"\"\"\n     Return the message level tags.\n"}
{"instance_id":"django__django-15128","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fb6639793a..ed7a84b056 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -348,6 +348,7 @@ class QuerySet:\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n+        other.query.bump_prefix(self.query)\n         combined.query.combine(other.query, sql.OR)\n         return combined\n \ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex aaf35ee37c..8709686e02 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -612,9 +612,9 @@ class Query(BaseExpression):\n             # combined query must have two joins, too.\n             reuse.discard(new_alias)\n             if alias != new_alias:\n+                while new_alias in change_map.values():\n+                    new_alias = '%s%d' % (new_alias, len(self.alias_map) + 1)\n                 change_map[alias] = new_alias\n-            if not rhs.alias_refcount[alias]:\n-                # The alias was unused in the rhs query. Unref it so that it\n                 # will be unused in the new query, too. We have to add and\n                 # unref the alias so that join promotion has information of\n                 # the join type for the unused alias.\n@@ -761,7 +761,13 @@ class Query(BaseExpression):\n \n         # Create a new alias for this table.\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            # Generate a unique alias that does not conflict with existing aliases\n+            counter = len(self.alias_map) + 1\n+            while True:\n+                alias = '%s%d' % (self.alias_prefix, counter)\n+                if alias not in self.alias_map and alias not in self.external_aliases:\n+                    break\n+                counter += 1\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n@@ -846,7 +852,12 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n-        assert set(change_map).isdisjoint(change_map.values())\n+        # Adjust change_map to ensure keys do not intersect with values\n+        while set(change_map).intersection(change_map.values()):\n+            for old_alias, new_alias in change_map.items():\n+                if new_alias in change_map:\n+                    new_alias = '%s%d' % (new_alias, len(self.alias_map) + 1)\n+                    change_map[old_alias] = new_alias\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n         # \"group by\" and \"where\".\n@@ -965,15 +976,17 @@ class Query(BaseExpression):\n             a for a, j in self.alias_map.items()\n             if (reuse is None or a in reuse) and j.equals(join)\n         ]\n-        if reuse_aliases:\n-            if join.table_alias in reuse_aliases:\n-                reuse_alias = join.table_alias\n+        # No reuse is possible, so we need a new alias.\n+        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)\n+        if join.join_type:\n+            if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:\n+                join_type = LOUTER\n             else:\n-                # Reuse the most recent alias of the joined table\n-                # (a many-to-many relation may be joined multiple times).\n-                reuse_alias = reuse_aliases[-1]\n-            self.ref_alias(reuse_alias)\n-            return reuse_alias\n+                join_type = INNER\n+            join.join_type = join_type\n+        join.table_alias = alias\n+        self.alias_map[alias] = join\n+        return alias\n \n         # No reuse is possible, so we need a new alias.\n         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)\n"}
{"instance_id":"django__django-15161","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/operations/base.py b/django/db/migrations/operations/base.py\nindex 18935520f8..c96a5ddf0c 100644\n--- a/django/db/migrations/operations/base.py\n+++ b/django/db/migrations/operations/base.py\n@@ -1,140 +1,23 @@\n-from django.db import router\n-\n-\n-class Operation:\n+def deconstruct(self):\n     \"\"\"\n-    Base class for migration operations.\n-\n-    It's responsible for both mutating the in-memory model state\n-    (see db/migrations/state.py) to represent what it performs, as well\n-    as actually performing it against a live database.\n-\n-    Note that some operations won't modify memory state at all (e.g. data\n-    copying operations), and some will need their modifications to be\n-    optionally specified by the user (e.g. custom Python code snippets)\n-\n-    Due to the way this class deals with deconstruction, it should be\n-    considered immutable.\n+    Return a 3-tuple of class import path (or just name if it lives\n+    under django.db.models), positional arguments, and keyword\n+    arguments.\n     \"\"\"\n+    module_name = self.__class__.__module__\n+    class_name = self.__class__.__name__\n \n-    # If this migration can be run in reverse.\n-    # Some operations are impossible to reverse, like deleting data.\n-    reversible = True\n-\n-    # Can this migration be represented as SQL? (things like RunPython cannot)\n-    reduces_to_sql = True\n-\n-    # Should this operation be forced as atomic even on backends with no\n-    # DDL transaction support (i.e., does it have no DDL, like RunPython)\n-    atomic = False\n-\n-    # Should this operation be considered safe to elide and optimize across?\n-    elidable = False\n-\n-    serialization_expand_args = []\n-\n-    def __new__(cls, *args, **kwargs):\n-        # We capture the arguments to make returning them trivial\n-        self = object.__new__(cls)\n-        self._constructor_args = (args, kwargs)\n-        return self\n-\n-    def deconstruct(self):\n-        \"\"\"\n-        Return a 3-tuple of class import path (or just name if it lives\n-        under django.db.migrations), positional arguments, and keyword\n-        arguments.\n-        \"\"\"\n-        return (\n-            self.__class__.__name__,\n-            self._constructor_args[0],\n-            self._constructor_args[1],\n-        )\n-\n-    def state_forwards(self, app_label, state):\n-        \"\"\"\n-        Take the state from the previous migration, and mutate it\n-        so that it matches what this migration would perform.\n-        \"\"\"\n-        raise NotImplementedError('subclasses of Operation must provide a state_forwards() method')\n-\n-    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n-        \"\"\"\n-        Perform the mutation on the database schema in the normal\n-        (forwards) direction.\n-        \"\"\"\n-        raise NotImplementedError('subclasses of Operation must provide a database_forwards() method')\n-\n-    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        \"\"\"\n-        Perform the mutation on the database schema in the reverse\n-        direction - e.g. if this were CreateModel, it would in fact\n-        drop the model's table.\n-        \"\"\"\n-        raise NotImplementedError('subclasses of Operation must provide a database_backwards() method')\n-\n-    def describe(self):\n-        \"\"\"\n-        Output a brief summary of what the action does.\n-        \"\"\"\n-        return \"%s: %s\" % (self.__class__.__name__, self._constructor_args)\n-\n-    @property\n-    def migration_name_fragment(self):\n-        \"\"\"\n-        A filename part suitable for automatically naming a migration\n-        containing this operation, or None if not applicable.\n-        \"\"\"\n-        return None\n-\n-    def references_model(self, name, app_label):\n-        \"\"\"\n-        Return True if there is a chance this operation references the given\n-        model name (as a string), with an app label for accuracy.\n-\n-        Used for optimization. If in doubt, return True;\n-        returning a false positive will merely make the optimizer a little\n-        less efficient, while returning a false negative may result in an\n-        unusable optimized migration.\n-        \"\"\"\n-        return True\n-\n-    def references_field(self, model_name, name, app_label):\n-        \"\"\"\n-        Return True if there is a chance this operation references the given\n-        field name, with an app label for accuracy.\n-\n-        Used for optimization. If in doubt, return True.\n-        \"\"\"\n-        return self.references_model(model_name, app_label)\n-\n-    def allow_migrate_model(self, connection_alias, model):\n-        \"\"\"\n-        Return whether or not a model may be migrated.\n-\n-        This is a thin wrapper around router.allow_migrate_model() that\n-        preemptively rejects any proxy, swapped out, or unmanaged model.\n-        \"\"\"\n-        if not model._meta.can_migrate(connection_alias):\n-            return False\n+    # Simplify the module path if it starts with 'django.db.models'\n+    if module_name.startswith('django.db.models'):\n+        module_name = 'django.db.models'\n+    elif module_name.startswith('django.db.migrations'):\n+        module_name = 'django.db.migrations'\n \n-        return router.allow_migrate_model(connection_alias, model)\n+    path = f\"{module_name}.{class_name}\"\n \n-    def reduce(self, operation, app_label):\n-        \"\"\"\n-        Return either a list of operations the actual operation should be\n-        replaced with or a boolean that indicates whether or not the specified\n-        operation can be optimized across.\n-        \"\"\"\n-        if self.elidable:\n-            return [operation]\n-        elif operation.elidable:\n-            return [self]\n-        return False\n+    return (\n+        path,\n+        self._constructor_args[0],\n+        self._constructor_args[1],\n+    )\n \n-    def __repr__(self):\n-        return \"<%s %s%s>\" % (\n-            self.__class__.__name__,\n-            \", \".join(map(repr, self._constructor_args[0])),\n-            \",\".join(\" %s=%r\" % x for x in self._constructor_args[1].items()),\n-        )\n"}
{"instance_id":"django__django-15268","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..bab396c4d3 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1176,11 +1176,10 @@ class MigrationAutodetector:\n             model_name,\n             dependencies,\n         ) in self._get_altered_foo_together_operations(operation.option_name):\n-            removal_value = new_value.intersection(old_value)\n-            if removal_value or old_value:\n+            if old_value != new_value:\n                 self.add_operation(\n                     app_label,\n-                    operation(name=model_name, **{operation.option_name: removal_value}),\n+                    operation(name=model_name, **{operation.option_name: new_value}),\n                     dependencies=dependencies,\n                 )\n \ndiff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 094c3e3cda..257fee9762 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -25,6 +25,12 @@ class FieldOperation(Operation):\n     def is_same_field_operation(self, operation):\n         return self.is_same_model_operation(operation) and self.name_lower == operation.name_lower\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+            self.is_same_field_operation(operation) and\n+            self.field.deconstruct() == operation.field.deconstruct()):\n+            return [self]\n+        return False\n     def references_model(self, name, app_label):\n         name_lower = name.lower()\n         if name_lower == self.model_name_lower:\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..8fba94aea1 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -539,6 +539,12 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n \n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+            self.name_lower == operation.name_lower and\n+            self.option_value == operation.option_value):\n+            return [self]\n+        return False\n \n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n@@ -552,6 +558,12 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n+    def reduce(self, operation, app_label):\n+        if (isinstance(operation, self.__class__) and\n+            self.name_lower == operation.name_lower and\n+            self.option_value == operation.option_value):\n+            return [self]\n+        return False\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n \n     option_name = 'order_with_respect_to'\ndiff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex ee20f62af2..d3a8e44e92 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -40,30 +40,43 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            # Check for consecutive AlterUniqueTogether or AlterIndexTogether operations\n+            if isinstance(operation, (operations.AlterUniqueTogether, operations.AlterIndexTogether)):\n+                j = i + 1\n+                while j < len(operations) and isinstance(operations[j], type(operation)):\n+                    other = operations[j]\n+                    if operation.name == other.name and operation.option_value == other.option_value:\n+                        # Remove redundant operation\n+                        operations.pop(j)\n                     else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n                         break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n-            else:\n                 new_operations.append(operation)\n+                i = j\n+            else:\n+                # Existing optimization logic\n+                right = True  # Should we reduce on the right or on the left.\n+                for j, other in enumerate(operations[i + 1:]):\n+                    result = operation.reduce(other, app_label)\n+                    if isinstance(result, list):\n+                        in_between = operations[i + 1:i + j + 1]\n+                        if right:\n+                            new_operations.extend(in_between)\n+                            new_operations.extend(result)\n+                        elif all(op.reduce(other, app_label) is True for op in in_between):\n+                            # Perform a left reduction if all in-between operations can optimize through other.\n+                            new_operations.extend(result)\n+                            new_operations.extend(in_between)\n+                        else:\n+                            new_operations.append(operation)\n+                            break\n+                        new_operations.extend(operations[i + j + 2:])\n+                        return new_operations\n+                    elif not result:\n+                        right = False\n+                else:\n+                    new_operations.append(operation)\n+                i += 1\n         return new_operations\n"}
{"instance_id":"django__django-15277","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..50536a0e3d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -780,7 +780,7 @@ class Value(SQLiteNumericMixin, Expression):\n \n     def _resolve_output_field(self):\n         if isinstance(self.value, str):\n-            return fields.CharField()\n+            return fields.CharField(max_length=None)\n         if isinstance(self.value, bool):\n             return fields.BooleanField()\n         if isinstance(self.value, int):\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523346..88c9ca9f28 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n"}
{"instance_id":"django__django-15278","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6752a8e3c0..f8a202fd5d 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -1,4 +1,5 @@\n import copy\n+from django.db import models\n from decimal import Decimal\n \n from django.apps.registry import Apps\n@@ -324,10 +325,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def add_field(self, model, field):\n         \"\"\"Create a field on a model.\"\"\"\n-        # Fields with default values cannot by handled by ALTER TABLE ADD\n-        # COLUMN statement because DROP DEFAULT is not supported in\n-        # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        # Fields with default values or UNIQUE constraints cannot be handled by ALTER TABLE ADD COLUMN in SQLite.\n+        # OneToOneField is a special case since it always requires a UNIQUE constraint.\n+        if not field.null or self.effective_default(field) is not None or isinstance(field, models.OneToOneField):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n"}
{"instance_id":"django__django-15280","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..c9230d198a 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -149,7 +149,7 @@ class ForwardManyToOneDescriptor:\n         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False\n \n     def get_object(self, instance):\n-        qs = self.get_queryset(instance=instance)\n+        qs = self.get_queryset(instance=instance).all()\n         # Assuming the database enforces foreign keys, this won't fail.\n         return qs.get(self.field.get_reverse_related_filter(instance))\n \ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fb6639793a..5500d6755a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1626,6 +1626,9 @@ class Prefetch:\n             self.prefetch_to = LOOKUP_SEP.join(lookup.split(LOOKUP_SEP)[:-1] + [to_attr])\n \n         self.queryset = queryset\n+        if self.queryset is not None:\n+            # Reset deferred_loading to prevent inheritance from outer queries\n+            self.queryset.query.deferred_loading = (set(), False)\n         self.to_attr = to_attr\n \n     def __getstate__(self):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b13c7b6893..db79f5400d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -752,6 +752,8 @@ class Query(BaseExpression):\n                 callback(target, model, values)\n \n     def table_alias(self, table_name, create=False, filtered_relation=None):\n+        # Reset deferred_loading to prevent cross-query contamination\n+        self.deferred_loading = (set(), False)\n         \"\"\"\n         Return a table alias for the given table_name and whether this is a\n         new alias or not.\n"}
{"instance_id":"django__django-15315","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 88c9ca9f28..6cae0134a1 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -542,11 +542,7 @@ class Field(RegisterLookupMixin):\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash((\n-            self.creation_counter,\n-            self.model._meta.app_label if hasattr(self, 'model') else None,\n-            self.model._meta.model_name if hasattr(self, 'model') else None,\n-        ))\n+        return id(self)\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}
{"instance_id":"django__django-15368","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex f8d848e926..3c234d8241 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -670,7 +670,7 @@ class QuerySet:\n                 when_statements = []\n                 for obj in batch_objs:\n                     attr = getattr(obj, field.attname)\n-                    if not isinstance(attr, Expression):\n+                    if not isinstance(attr, (Expression, F)):\n                         attr = Value(attr, output_field=field)\n                     when_statements.append(When(pk=obj.pk, then=attr))\n                 case_statement = Case(*when_statements, output_field=field)\n"}
{"instance_id":"django__django-15375","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8c4eae7906..065bf84245 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -60,12 +60,13 @@ class Aggregate(Func):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n-        if (default := c.default) is None:\n-            return c\n-        if hasattr(default, 'resolve_expression'):\n-            default = default.resolve_expression(query, allow_joins, reuse, summarize)\n-        c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        if self.default is not None:\n+            if hasattr(self.default, 'resolve_expression'):\n+                default = self.default.resolve_expression(query, allow_joins, reuse, summarize)\n+            else:\n+                default = self.default\n+            c = Coalesce(c, default, output_field=c.output_field)\n+        return c\n \n     @property\n     def default_alias(self):\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex d405a203ee..237788f350 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1671,21 +1671,24 @@ class SQLAggregateCompiler(SQLCompiler):\n         parameters.\n         \"\"\"\n         sql, params = [], []\n-        for annotation in self.query.annotation_select.values():\n+        annotations = self.query.annotation_select\n+        for alias, annotation in annotations.items():\n             ann_sql, ann_params = self.compile(annotation)\n             ann_sql, ann_params = annotation.select_format(self, ann_sql, ann_params)\n-            sql.append(ann_sql)\n+            sql.append(f\"{ann_sql} AS {self.connection.ops.quote_name(alias)}\")\n             params.extend(ann_params)\n-        self.col_count = len(self.query.annotation_select)\n-        sql = ', '.join(sql)\n-        params = tuple(params)\n-\n+        self.col_count = len(annotations)\n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(\n             self.using, elide_empty=self.elide_empty,\n         ).as_sql(with_col_aliases=True)\n-        sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n-        params = params + inner_query_params\n-        return sql, params\n+        if self.query.inner_query.select:\n+            # If the inner query has select fields, include them in the subquery\n+            sql = 'SELECT %s FROM (%s) subquery' % (', '.join(sql), inner_query_sql)\n+            params.extend(inner_query_params)\n+        else:\n+            # If no select fields, use the annotations directly\n+            sql = 'SELECT %s' % ', '.join(sql)\n+        return sql, tuple(params)\n \n \n def cursor_iter(cursor, sentinel, col_count, itersize):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e3fdea6f3a..e2d5c92b87 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -430,17 +430,23 @@ class Query(BaseExpression):\n         ]\n         # Decide if we need to use a subquery.\n         #\n-        # Existing annotations would cause incorrect results as get_aggregation()\n-        # must produce just one result and thus must not use GROUP BY. But we\n-        # aren't smart enough to remove the existing annotations from the\n-        # query, so those would force us to use GROUP BY.\n+        # Decide if we need to use a subquery.\n         #\n-        # If the query has limit or distinct, or uses set operations, then\n+        # If the query has limit or distinct, or uses set operations, or\n+        # existing annotations (especially those with aggregates having default values), then\n         # those operations must be done in a subquery so that the query\n         # aggregates on the limit and/or distinct results instead of applying\n         # the distinct and limit after the aggregation.\n-        if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or\n-                self.distinct or self.combinator):\n+        if (\n+            isinstance(self.group_by, tuple) or\n+            self.is_sliced or\n+            self.distinct or\n+            self.combinator or\n+            any(\n+                getattr(annotation, 'contains_aggregate', False)\n+                for annotation in existing_annotations\n+            )\n+        ):\n             from django.db.models.sql.subqueries import AggregateQuery\n             inner_query = self.clone()\n             inner_query.subquery = True\n@@ -448,6 +454,10 @@ class Query(BaseExpression):\n             inner_query.select_for_update = False\n             inner_query.select_related = False\n             inner_query.set_annotation_mask(self.annotation_select)\n+            outer_query = AggregateQuery(self.model, inner_query)\n+            inner_query.select_for_update = False\n+            inner_query.select_related = False\n+            inner_query.set_annotation_mask(self.annotation_select)\n             # Queries with distinct_fields need ordering and when a limit is\n             # applied we must take the slice from the ordered query. Otherwise\n             # no need for ordering.\n"}
{"instance_id":"django__django-15380","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..3c5d9561a3 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -41,7 +41,8 @@ class MigrationAutodetector:\n         to try and restrict to (restriction is not guaranteed)\n         \"\"\"\n         changes = self._detect_changes(convert_apps, graph)\n-        changes = self.arrange_for_graph(changes, graph, migration_name)\n+        if graph is not None:\n+            changes = self.arrange_for_graph(changes, graph, migration_name)\n         if trim_to_apps:\n             changes = self._trim_to_apps(changes, trim_to_apps)\n         return changes\n@@ -823,8 +824,10 @@ class MigrationAutodetector:\n         self.renamed_fields = {}\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n-            old_model_state = self.from_state.models[app_label, old_model_name]\n-            new_model_state = self.to_state.models[app_label, old_model_name]\n+            old_model_state = self.from_state.models.get((app_label, old_model_name))\n+            new_model_state = self.to_state.models.get((app_label, model_name))\n+            if not old_model_state or not new_model_state:\n+                continue\n             field = new_model_state.get_field(field_name)\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\n"}
{"instance_id":"django__django-15382","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 81f8f79c71..4d5c1b747e 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1210,17 +1210,32 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n-        query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(\n-            compiler,\n-            connection,\n-            template=template,\n-            query=query,\n-            **extra_context,\n-        )\n-        if self.negated:\n-            sql = 'NOT {}'.format(sql)\n-        return sql, params\n+        \"\"\"\n+        Generate the proper SQL when handling empty subqueries in a way that preserves the\n+        WHERE clause, particularly when the Exists condition is negated.\n+        \"\"\"\n+        template = template or self.template\n+        try:\n+            query = self.query.exists(using=connection.alias)\n+            sql, params = super().as_sql(\n+                compiler,\n+                connection,\n+                template=template,\n+                query=query,\n+                **extra_context,\n+            )\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return sql, params\n+        except EmptyResultSet:\n+            # Build a query that's guaranteed to be empty but preserves the query structure\n+            # such that the WHERE clause handling of EXISTS conditions remains correct.\n+            # This is particularly important for negated EXISTS conditions.\n+            subquery_sql = '(SELECT 1 FROM (SELECT 1) subq WHERE 1=0)'\n+            sql = 'EXISTS {}'.format(subquery_sql)\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return sql, []\n \n     def select_format(self, compiler, sql, params):\n         # Wrap EXISTS() with a CASE WHEN expression if a database backend\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex d405a203ee..7b80699e87 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -7,7 +7,7 @@ from itertools import chain\n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import DatabaseError, NotSupportedError\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import F, OrderBy, RawSQL, Ref, Value\n+from django.db.models.expressions import Exists, F, OrderBy, RawSQL, Ref, Value\n from django.db.models.functions import Cast, Random\n from django.db.models.query_utils import select_related_descend\n from django.db.models.sql.constants import (\n@@ -558,10 +558,19 @@ class SQLCompiler:\n                 try:\n                     where, w_params = self.compile(self.where) if self.where is not None else ('', [])\n                 except EmptyResultSet:\n-                    if self.elide_empty:\n-                        raise\n-                    # Use a predicate that's always False.\n-                    where, w_params = '0 = 1', []\n+                    if not self.elide_empty:\n+                        where, w_params = self.where.as_sql(self, self.connection)\n+                    else:\n+                        # Check for special case with negated Exists query\n+                        has_negated_exists = False\n+                        if self.where is not None:\n+                            has_negated_exists = any(isinstance(c, Exists) and c.negated for c in self.where.children)\n+                        if has_negated_exists:\n+                            # Keep other conditions intact when we have negated Exists\n+                            where, w_params = self.where.as_sql(self, self.connection)\n+                        else:\n+                            # Use a predicate that's always False for other cases\n+                            where, w_params = '0 = 1', []\n                 having, h_params = self.compile(self.having) if self.having is not None else (\"\", [])\n                 result = ['SELECT']\n                 params = []\n"}
{"instance_id":"django__django-15467","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087bf1..42f4576190 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                kwargs[\"empty_label\"] = (kwargs.get('empty_label') or _('None')) if db_field.blank else None\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"}
{"instance_id":"django__django-15499","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..d10340a45d 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -202,6 +202,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, FieldOperation)\n             and self.name_lower == operation.model_name_lower\n@@ -738,6 +751,15 @@ class AlterModelManagers(ModelOptionOperation):\n         self.managers = managers\n         super().__init__(name)\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, (CreateModel, DeleteModel))\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n+\n     def deconstruct(self):\n         return (self.__class__.__qualname__, [self.name, self.managers], {})\n \n"}
{"instance_id":"django__django-15503","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700c9d..1d5c0a33d2 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -129,13 +129,8 @@ class JSONField(CheckFieldDefaultMixin, Field):\n def compile_json_path(key_transforms, include_root=True):\n     path = [\"$\"] if include_root else []\n     for key_transform in key_transforms:\n-        try:\n-            num = int(key_transform)\n-        except ValueError:  # non-integer\n-            path.append(\".\")\n-            path.append(json.dumps(key_transform))\n-        else:\n-            path.append(\"[%s]\" % num)\n+        path.append(\".\")\n+        path.append(json.dumps(str(key_transform)))\n     return \"\".join(path)\n \n \n@@ -227,10 +222,36 @@ class HasKeyLookup(PostgresOperatorLookup):\n         return super().as_postgresql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n-        return self.as_sql(\n-            compiler, connection, template=\"JSON_TYPE(%s, %%s) IS NOT NULL\"\n-        )\n-\n+        # Process JSON path from the left-hand side.\n+        if isinstance(self.lhs, KeyTransform):\n+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(\n+                compiler, connection\n+            )\n+            lhs_json_path = compile_json_path(lhs_key_transforms)\n+        else:\n+            lhs, lhs_params = self.process_lhs(compiler, connection)\n+            lhs_json_path = \"$\"\n+        # Process JSON path from the right-hand side.\n+        rhs = self.rhs\n+        if not isinstance(rhs, (list, tuple)):\n+            rhs = [rhs]\n+        sql_pieces = []\n+        params = lhs_params\n+        for key in rhs:\n+            if isinstance(key, KeyTransform):\n+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n+            else:\n+                rhs_key_transforms = [str(key)]\n+            json_path = \"%s%s\" % (\n+                lhs_json_path,\n+                compile_json_path(rhs_key_transforms, include_root=False),\n+            )\n+            sql_pieces.append(\"JSON_TYPE(%s, '%s') IS NOT NULL\" % (lhs, json_path))\n+        if self.logical_operator:\n+            sql = \"(%s)\" % self.logical_operator.join(sql_pieces)\n+        else:\n+            sql = \" OR \".join(sql_pieces)\n+        return sql, params\n \n class HasKey(HasKeyLookup):\n     lookup_name = \"has_key\"\n"}
{"instance_id":"django__django-15525","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex a3918bf9d2..c8a1207040 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -172,6 +172,8 @@ def Deserializer(\n                     )\n \n         obj = base.build_instance(Model, data, using)\n+        # Set the instance's database state\n+        obj._state.db = using\n         yield base.DeserializedObject(obj, m2m_data, deferred_fields)\n \n \ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 8ca076a1d9..a352dbd82f 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -164,6 +164,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n \n     @async_unsafe\n     def get_new_connection(self, conn_params):\n+        conn_params['database'] = self.settings_dict['NAME']\n         conn = Database.connect(**conn_params)\n         register_functions(conn)\n \ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex ca4f4368b6..609fb0c1b7 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1079,7 +1079,7 @@ class ForeignKey(ForeignObject):\n         if value is None:\n             return\n \n-        using = router.db_for_read(self.remote_field.model, instance=model_instance)\n+        using = model_instance._state.db or router.db_for_read(self.remote_field.model, instance=model_instance)\n         qs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n"}
{"instance_id":"django__django-15554","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 54f3258eac..db34ad5ba0 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1560,7 +1560,7 @@ class Query(BaseExpression):\n             else:\n                 child_clause, _ = self.build_filter(\n                     child,\n-                    can_reuse=reuse,\n+                    can_reuse=None,\n                     branch_negated=branch_negated,\n                     current_negated=current_negated,\n                     allow_joins=True,\n@@ -1568,6 +1568,16 @@ class Query(BaseExpression):\n                 )\n             target_clause.add(child_clause, connector)\n         return target_clause\n+        child_clause, _ = self.build_filter(\n+            child,\n+            can_reuse=reuse,\n+            branch_negated=branch_negated,\n+            current_negated=current_negated,\n+            allow_joins=True,\n+            split_subq=False,\n+        )\n+        target_clause.add(child_clause, connector)\n+        return target_clause\n \n     def add_filtered_relation(self, filtered_relation, alias):\n         filtered_relation.alias = alias\n"}
{"instance_id":"django__django-15561","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\nindex 2886ecc3be..c5dd4019a2 100644\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -32,6 +32,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     # Is \"ALTER TABLE ... DROP COLUMN\" supported?\n     can_alter_table_drop_column = Database.sqlite_version_info >= (3, 35, 5)\n     supports_parentheses_in_compound = False\n+    supports_ignore_field_choices_during_alter = True\n     # Deferred constraint checks can be emulated on SQLite < 3.20 but not in a\n     # reasonably performant way.\n     supports_pragma_foreign_key_check = Database.sqlite_version_info >= (3, 20, 0)\ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex b3a2f4282b..60d565bd02 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -122,6 +122,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def alter_field(self, model, old_field, new_field, strict=False):\n         if not self._field_should_be_altered(old_field, new_field):\n+        old_field_no_choices = old_field.clone()\n+        old_field_no_choices.choices = None\n+        new_field_no_choices = new_field.clone()\n+        new_field_no_choices.choices = None\n+        if old_field_no_choices.deconstruct() == new_field_no_choices.deconstruct():\n             return\n         old_field_name = old_field.name\n         table_name = model._meta.db_table\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 04e651ec4a..888b3af4b5 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1137,6 +1137,14 @@ class MigrationAutodetector:\n                     new_field.remote_field.through = old_field.remote_field.through\n             old_field_dec = self.deep_deconstruct(old_field)\n             new_field_dec = self.deep_deconstruct(new_field)\n+            # Skip generating AlterField if only 'choices' have changed\n+            if old_field.__class__ == new_field.__class__:\n+                old_field_no_choices = old_field.clone()\n+                old_field_no_choices.choices = None\n+                new_field_no_choices = new_field.clone()\n+                new_field_no_choices.choices = None\n+                if self.deep_deconstruct(old_field_no_choices) == self.deep_deconstruct(new_field_no_choices):\n+                    continue\n             # If the field was confirmed to be renamed it means that only\n             # db_column was allowed to change which generate_renamed_fields()\n             # already accounts for by adding an AlterField operation.\n"}
{"instance_id":"django__django-15563","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5c78c6e315..03d1c36b7b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -988,6 +988,7 @@ class QuerySet:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n+        query.model = self.model\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex 04063f73bc..96cfaa550b 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -95,7 +95,7 @@ class UpdateQuery(Query):\n                     \"Cannot update model field %r (only non-relations and \"\n                     \"foreign keys permitted).\" % field\n                 )\n-            if model is not self.get_meta().concrete_model:\n+            if not issubclass(self.get_meta().model, model):\n                 self.add_related_update(model, field, val)\n                 continue\n             values_seq.append((field, model, val))\n"}
{"instance_id":"django__django-15569","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0caa165e15..6917820604 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -217,6 +217,7 @@ class RegisterLookupMixin:\n         if lookup_name is None:\n             lookup_name = lookup.lookup_name\n         del cls.class_lookups[lookup_name]\n+        cls._clear_cached_lookups()\n \n \n def select_related_descend(field, restricted, requested, load_fields, reverse=False):\n"}
{"instance_id":"django__django-15572","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex 84c8554165..7cacd36cb2 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -17,7 +17,7 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(cwd / to_path(dir) for dir in backend.engine.dirs if dir)\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, \"get_dirs\"):\n@@ -25,7 +25,7 @@ def get_template_directories():\n             items.update(\n                 cwd / to_path(directory)\n                 for directory in loader.get_dirs()\n-                if not is_django_path(directory)\n+                if directory and not is_django_path(directory)\n             )\n     return items\n \n@@ -52,3 +52,5 @@ def template_changed(sender, file_path, **kwargs):\n         if template_dir in file_path.parents:\n             reset_loaders()\n             return True\n+\n+\n"}
{"instance_id":"django__django-15629","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex 562b209eef..d6c7800af4 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -172,3 +172,25 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n         return super()._rename_field_sql(table, old_field, new_field, new_type)\n+    def alter_field(self, model, old_field, new_field, strict=False):\n+        super().alter_field(model, old_field, new_field, strict)\n+        # If the field is a primary key with a collation change, propagate the collation to foreign key fields\n+        if old_field.primary_key:\n+            old_collation = old_field.db_parameters(connection=self.connection).get('collation')\n+            new_collation = new_field.db_parameters(connection=self.connection).get('collation')\n+            if old_collation != new_collation:\n+                # Find all foreign key references to this field\n+                for related_object in model._meta.related_objects:\n+                    fk_field = related_object.field\n+                    if fk_field.remote_field and fk_field.remote_field.model == model:\n+                        # Alter the foreign key field to have the new collation\n+                        fk_model = related_object.related_model\n+                        new_type = fk_field.db_type(connection=self.connection)\n+                        collation_sql = self._alter_column_collation_sql(fk_model, fk_field, new_type, new_collation)\n+                        if collation_sql:\n+                            self.execute(\n+                                self.sql_alter_column % {\n+                                    'table': self.quote_name(fk_model._meta.db_table),\n+                                    'changes': collation_sql,\n+                                }\n+                            )\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex a073fce165..39ba5cf353 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -7,6 +7,7 @@ import operator\n import uuid\n import warnings\n from base64 import b64decode, b64encode\n+from django.core.exceptions import FieldDoesNotExist\n from functools import partialmethod, total_ordering\n \n from django import forms\n@@ -223,6 +224,14 @@ class Field(RegisterLookupMixin):\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n+        # Inherit db_collation from the referenced primary key field if not specified\n+        if not getattr(self, 'db_collation', None) and self.remote_field and self.remote_field.model:\n+            try:\n+                to_field = self.remote_field.model._meta.get_field(self.remote_field.field_name)\n+                if getattr(to_field, 'db_collation', None):\n+                    self.db_collation = to_field.db_collation\n+            except (FieldDoesNotExist, AttributeError):\n+                pass\n         self.auto_created = auto_created\n \n         # Adjust the appropriate creation counter, and save our local copy.\n"}
{"instance_id":"django__django-15731","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex e37e56cd17..8a5f8fce56 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -1,4 +1,5 @@\n import copy\n+import functools\n import inspect\n from importlib import import_module\n \n@@ -81,11 +82,9 @@ class BaseManager:\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n \n         new_methods = {}\n@@ -211,3 +210,4 @@ class EmptyManager(Manager):\n \n     def get_queryset(self):\n         return super().get_queryset().none()\n+\n"}
{"instance_id":"django__django-15732","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex f2ca8c8df9..1d7328f5af 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -568,6 +568,15 @@ class BaseDatabaseSchemaEditor:\n             exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs,\n         )\n+        # Exclude primary key constraints from constraint_names\n+        pk_constraint_names = self._constraint_names(\n+            model,\n+            columns,\n+            primary_key=True,\n+        )\n+        constraint_names = [\n+            name for name in constraint_names if name not in pk_constraint_names\n+        ]\n         if len(constraint_names) != 1:\n             raise ValueError(\n                 \"Found wrong number (%s) of constraints for %s(%s)\"\ndiff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex a22ae0094f..d40f734854 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -7,6 +7,11 @@ from django.db.backends.utils import strip_quotes\n \n class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n+    def _constraint_names(self, model, columns, **kwargs):\n+        constraints = super()._constraint_names(model, columns, **kwargs)\n+        # Exclude primary key constraints\n+        pk_constraints = super()._constraint_names(model, columns, primary_key=True)\n+        return [name for name in constraints if name not in pk_constraints]\n     # Setting all constraints to IMMEDIATE to allow changing data in the same\n     # transaction.\n     sql_update_with_default = (\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5f41053283..67f1c1a77c 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1479,6 +1479,11 @@ class MigrationAutodetector:\n             model_name,\n             dependencies,\n         ) in self._get_altered_foo_together_operations(operation.option_name):\n+            # Exclude constraints that include primary key fields\n+            model_state = self.to_state.models[app_label, model_name]\n+            pk_field_names = {field.name for field in model_state.fields if field.primary_key}\n+            old_value = {fields for fields in old_value if not pk_field_names.intersection(fields)}\n+            new_value = {fields for fields in new_value if not pk_field_names.intersection(fields)}\n             if operation == operations.AlterIndexTogether:\n                 old_value = {\n                     value\n@@ -1495,7 +1500,6 @@ class MigrationAutodetector:\n                     ),\n                     dependencies=dependencies,\n                 )\n-\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n \ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 75a3b8b030..52f2742a58 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -562,12 +562,17 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n             alter_together = getattr(schema_editor, \"alter_%s\" % self.option_name)\n+            old_together = getattr(old_model._meta, self.option_name, set())\n+            new_together = getattr(new_model._meta, self.option_name, set())\n+            # Exclude constraints that include primary key fields\n+            pk_field_names = {field.name for field in new_model._meta.fields if field.primary_key}\n+            old_together = {fields for fields in old_together if not pk_field_names.intersection(fields)}\n+            new_together = {fields for fields in new_together if not pk_field_names.intersection(fields)}\n             alter_together(\n                 new_model,\n-                getattr(old_model._meta, self.option_name, set()),\n-                getattr(new_model._meta, self.option_name, set()),\n+                old_together,\n+                new_together,\n             )\n-\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n \ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 9949b50b1e..b27722f016 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -123,7 +123,9 @@ class UniqueConstraint(BaseConstraint):\n         include=None,\n         opclasses=(),\n         violation_error_message=None,\n+        from_unique_together=False,\n     ):\n+        self.from_unique_together = from_unique_together\n         if not name:\n             raise ValueError(\"A unique constraint must be named.\")\n         if not expressions and not fields:\n@@ -173,7 +175,6 @@ class UniqueConstraint(BaseConstraint):\n             for expression in expressions\n         )\n         super().__init__(name, violation_error_message=violation_error_message)\n-\n     @property\n     def contains_expressions(self):\n         return bool(self.expressions)\n"}
{"instance_id":"django__django-15741","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322d84..b86e538154 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -7,7 +7,7 @@ from importlib import import_module\n \n from django.conf import settings\n from django.utils import dateformat, numberformat\n-from django.utils.functional import lazy\n+from django.utils.functional import lazy, Promise\n from django.utils.translation import check_for_language, get_language, to_locale\n \n # format_cache is a mapping from (format_type, lang) to the format string.\n@@ -106,6 +106,9 @@ def get_format(format_type, lang=None, use_l10n=None):\n     If use_l10n is provided and is not None, it forces the value to\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n+    if isinstance(format_type, Promise):\n+        format_type = str(format_type)\n+        \n     if use_l10n is None:\n         try:\n             use_l10n = settings._USE_L10N_INTERNAL\n@@ -308,3 +311,4 @@ def sanitize_separators(value):\n         parts.append(value)\n         value = \".\".join(reversed(parts))\n     return value\n+\n"}
{"instance_id":"django__django-15863","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7a5b28d159..23c3a08c67 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -151,7 +151,7 @@ def floatformat(text, arg=-1):\n             use_l10n = False\n             arg = arg[:-1] or -1\n     try:\n-        input_val = repr(text)\n+        input_val = str(text)\n         d = Decimal(input_val)\n     except InvalidOperation:\n         try:\n"}
{"instance_id":"django__django-15916","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad94..b0b5e38713 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -630,6 +630,8 @@ def modelform_factory(\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n     Meta = type(\"Meta\", bases, attrs)\n+    if formfield_callback is None and hasattr(form.Meta, 'formfield_callback'):\n+        formfield_callback = form.Meta.formfield_callback\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     # Give this new form class a reasonable name.\n"}
{"instance_id":"django__django-15930","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 822968ef56..3d436acefc 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1379,7 +1379,8 @@ class Case(SQLiteNumericMixin, Expression):\n     ):\n         connection.ops.check_expression_support(self)\n         if not self.cases:\n-            return compiler.compile(self.default)\n+            default_sql, default_params = compiler.compile(self.default)\n+            return default_sql, default_params\n         template_params = {**self.extra, **extra_context}\n         case_parts = []\n         sql_params = []\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 866e38df83..89539b9d98 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -442,7 +442,7 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n                 rhs = [r for r in self.rhs if r is not None]\n \n             if not rhs:\n-                raise EmptyResultSet\n+                return \"(SELECT 1 WHERE 0=1)\", []\n \n             # rhs should be an iterable; use batch_process_rhs() to\n             # prepare/transform those values.\ndiff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 42a4b054a5..c9d22afff5 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -132,7 +132,7 @@ class WhereNode(tree.Node):\n                 if self.negated:\n                     raise EmptyResultSet\n                 else:\n-                    return \"\", []\n+                    return \"1=1\", []\n         conn = \" %s \" % self.connector\n         sql_string = conn.join(result)\n         if sql_string:\n"}
{"instance_id":"django__django-15957","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb90b0..8764d242d9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2145,16 +2145,6 @@ class Prefetch:\n         self.prefetch_through = lookup\n         # `prefetch_to` is the path to the attribute that stores the result.\n         self.prefetch_to = lookup\n-        if queryset is not None and (\n-            isinstance(queryset, RawQuerySet)\n-            or (\n-                hasattr(queryset, \"_iterable_class\")\n-                and not issubclass(queryset._iterable_class, ModelIterable)\n-            )\n-        ):\n-            raise ValueError(\n-                \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n-            )\n         if to_attr:\n             self.prefetch_to = LOOKUP_SEP.join(\n                 lookup.split(LOOKUP_SEP)[:-1] + [to_attr]\n@@ -2520,7 +2510,10 @@ def prefetch_one_level(instances, prefetcher, lookup, level):\n             else:\n                 manager = getattr(obj, to_attr)\n                 if leaf and lookup.queryset is not None:\n-                    qs = manager._apply_rel_filters(lookup.queryset)\n+                    if lookup.queryset.query.is_sliced:\n+                        qs = lookup.queryset._clone()\n+                    else:\n+                        qs = manager._apply_rel_filters(lookup.queryset)\n                 else:\n                     qs = manager.get_queryset()\n                 qs._result_cache = vals\n"}
{"instance_id":"django__django-15973","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 75a3b8b030..9d6c38eae4 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -89,6 +89,11 @@ class CreateModel(ModelOperation):\n                 list(self.managers),\n             )\n         )\n+        # Resolve related fields defined with strings\n+        model_state = state.models[app_label, self.name_lower]\n+        for name, field in model_state.fields:\n+            if field.is_relation and isinstance(field.remote_field.model, str):\n+                field.remote_field.model = resolve_relation(app_label, field.remote_field.model)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         model = to_state.apps.get_model(app_label, self.name)\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 32085daf18..f33001b17c 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1364,6 +1364,8 @@ class ManyToManyField(RelatedField):\n                     )\n                 )\n \n+        if isinstance(through, str):\n+            through = resolve_relation(to, through)\n         if symmetrical is None:\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n \ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 6e9f7bccbf..415afeb9ed 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -916,11 +916,14 @@ class ManyToManyDescriptor(ReverseManyToOneDescriptor):\n \n         self.reverse = reverse\n \n+    @property\n     @property\n     def through(self):\n         # through is provided so that you have easy access to the through\n         # model (Book.authors.through) for inlines, etc. This is done as\n         # a property to ensure that the fully resolved value is returned.\n+        if isinstance(self.rel.through, str):\n+            return resolve_relation(self.rel.model, self.rel.through)\n         return self.rel.through\n \n     @cached_property\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex bff55011dc..bc6355318a 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -240,6 +240,11 @@ class Options:\n                 self.db_table, connection.ops.max_name_length()\n             )\n \n+        # Resolve related fields that are specified as strings\n+        from django.db.models.utils import resolve_relation\n+        for field in self.local_fields + self.local_many_to_many:\n+            if field.is_relation and isinstance(field.remote_field.model, str):\n+                field.remote_field.model = resolve_relation(self.model, field.remote_field.model)\n     def _format_names_with_class(self, cls, objs):\n         \"\"\"App label/class name interpolation for object names.\"\"\"\n         new_objs = []\n"}
{"instance_id":"django__django-15987","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..be142ca923 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -361,7 +361,7 @@ class Command(BaseCommand):\n         current directory.\n         \"\"\"\n         dirs = []\n-        fixture_dirs = settings.FIXTURE_DIRS\n+        fixture_dirs = list(map(str, settings.FIXTURE_DIRS))\n         if len(fixture_dirs) != len(set(fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n"}
{"instance_id":"django__django-16032","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8419dc0d54..09d4beffed 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -446,6 +446,7 @@ class Query(BaseExpression):\n         \"\"\"\n         if not self.annotation_select:\n             return {}\n+        self.clear_select_clause()\n         existing_annotations = [\n             annotation\n             for alias, annotation in self.annotations.items()\n@@ -2382,6 +2383,7 @@ class Query(BaseExpression):\n \n     def set_values(self, fields):\n         self.select_related = False\n+        self.clear_select_clause()\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n \n"}
{"instance_id":"django__django-16082","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7cab82..cbf4fd8296 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -533,6 +533,7 @@ _connector_combinations = [\n             Combinable.SUB,\n             Combinable.MUL,\n             Combinable.DIV,\n+            Combinable.MOD,\n         )\n     },\n     # Bitwise operators.\ndiff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py\nindex 8b5fd79c3a..9a897ce416 100644\n--- a/django/db/models/functions/math.py\n+++ b/django/db/models/functions/math.py\n@@ -2,6 +2,7 @@ import math\n \n from django.db.models.expressions import Func, Value\n from django.db.models.fields import FloatField, IntegerField\n+from django.db.models.fields import DecimalField\n from django.db.models.functions import Cast\n from django.db.models.functions.mixins import (\n     FixDecimalInputMixin,\n@@ -124,6 +125,11 @@ class Log(FixDecimalInputMixin, NumericOutputFieldMixin, Func):\n class Mod(FixDecimalInputMixin, NumericOutputFieldMixin, Func):\n     function = \"MOD\"\n     arity = 2\n+    def _resolve_output_field(self):\n+        source_expressions = self.get_source_expressions()\n+        if any(isinstance(expr.output_field, DecimalField) for expr in source_expressions):\n+            return DecimalField()\n+        return super()._resolve_output_field()\n \n \n class Pi(NumericOutputFieldMixin, Func):\n"}
{"instance_id":"django__django-16100","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5f07a4208a..2c45d77537 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1997,41 +1997,40 @@ class ModelAdmin(BaseModelAdmin):\n         # for the changelist given all the fields to be edited. Then we'll\n         # use the formset to validate/process POSTed data.\n         formset = cl.formset = None\n-\n-        # Handle POSTed bulk-edit data.\n         if request.method == \"POST\" and cl.list_editable and \"_save\" in request.POST:\n-            if not self.has_change_permission(request):\n-                raise PermissionDenied\n-            FormSet = self.get_changelist_formset(request)\n-            modified_objects = self._get_list_editable_queryset(\n-                request, FormSet.get_default_prefix()\n-            )\n-            formset = cl.formset = FormSet(\n-                request.POST, request.FILES, queryset=modified_objects\n-            )\n-            if formset.is_valid():\n-                changecount = 0\n-                for form in formset.forms:\n-                    if form.has_changed():\n-                        obj = self.save_form(request, form, change=True)\n-                        self.save_model(request, obj, form, change=True)\n-                        self.save_related(request, form, formsets=[], change=True)\n-                        change_msg = self.construct_change_message(request, form, None)\n-                        self.log_change(request, obj, change_msg)\n-                        changecount += 1\n-\n-                if changecount:\n-                    msg = ngettext(\n-                        \"%(count)s %(name)s was changed successfully.\",\n-                        \"%(count)s %(name)s were changed successfully.\",\n-                        changecount,\n-                    ) % {\n-                        \"count\": changecount,\n-                        \"name\": model_ngettext(self.opts, changecount),\n-                    }\n-                    self.message_user(request, msg, messages.SUCCESS)\n+            with transaction.atomic():\n+                if not self.has_change_permission(request):\n+                    raise PermissionDenied\n+                FormSet = self.get_changelist_formset(request)\n+                modified_objects = self._get_list_editable_queryset(\n+                    request, FormSet.get_default_prefix()\n+                )\n+                formset = cl.formset = FormSet(\n+                    request.POST, request.FILES, queryset=modified_objects\n+                )\n+                if formset.is_valid():\n+                    changecount = 0\n+                    for form in formset.forms:\n+                        if form.has_changed():\n+                            obj = self.save_form(request, form, change=True)\n+                            self.save_model(request, obj, form, change=True)\n+                            self.save_related(request, form, formsets=[], change=True)\n+                            change_msg = self.construct_change_message(request, form, None)\n+                            self.log_change(request, obj, change_msg)\n+                            changecount += 1\n+\n+                    if changecount:\n+                        msg = ngettext(\n+                            \"%(count)s %(name)s was changed successfully.\",\n+                            \"%(count)s %(name)s were changed successfully.\",\n+                            changecount,\n+                        ) % {\n+                            \"count\": changecount,\n+                            \"name\": model_ngettext(self.opts, changecount),\n+                        }\n+                        self.message_user(request, msg, messages.SUCCESS)\n \n-                return HttpResponseRedirect(request.get_full_path())\n+                    return HttpResponseRedirect(request.get_full_path())\n \n         # Handle GET -- construct a formset for display.\n         elif cl.list_editable and self.has_change_permission(request):\n"}
{"instance_id":"django__django-16116","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 2e97d9064b..f257e947ba 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -248,12 +248,12 @@ class Command(BaseCommand):\n                 else:\n                     self.log(\"No changes detected\")\n         else:\n+            if check_changes:\n+                sys.exit(1)\n             if self.update:\n                 self.write_to_last_migration_files(changes)\n             else:\n                 self.write_migration_files(changes)\n-            if check_changes:\n-                sys.exit(1)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n"}
{"instance_id":"django__django-16136","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex db1842e3e5..acdd4cbeee 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -139,6 +139,14 @@ class View:\n             )\n         else:\n             handler = self.http_method_not_allowed\n+\n+        if asyncio.iscoroutinefunction(handler):\n+            async def _dispatch():\n+                response = await handler(request, *args, **kwargs)\n+                if asyncio.iscoroutine(response):\n+                    return await response\n+                return response\n+            return _dispatch()\n         return handler(request, *args, **kwargs)\n \n     def http_method_not_allowed(self, request, *args, **kwargs):\n@@ -148,7 +156,12 @@ class View:\n             request.path,\n             extra={\"status_code\": 405, \"request\": request},\n         )\n-        return HttpResponseNotAllowed(self._allowed_methods())\n+        response = HttpResponseNotAllowed(self._allowed_methods())\n+        if self.view_is_async:\n+            async def func():\n+                return response\n+            return func()\n+        return response\n \n     def options(self, request, *args, **kwargs):\n         \"\"\"Handle responding to requests for the OPTIONS HTTP verb.\"\"\"\n@@ -157,10 +170,8 @@ class View:\n         response.headers[\"Content-Length\"] = \"0\"\n \n         if self.view_is_async:\n-\n             async def func():\n                 return response\n-\n             return func()\n         else:\n             return response\n@@ -273,3 +284,4 @@ class RedirectView(View):\n \n     def patch(self, request, *args, **kwargs):\n         return self.get(request, *args, **kwargs)\n+\n"}
{"instance_id":"django__django-16145","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 3c39f57e4d..c6eaee8be5 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -99,6 +99,8 @@ class Command(BaseCommand):\n             if not self.port.isdigit():\n                 raise CommandError(\"%r is not a valid port number.\" % self.port)\n             if self.addr:\n+                if self.addr == \"0\":\n+                    self.addr = \"0.0.0.0\"\n                 if _ipv6:\n                     self.addr = self.addr[1:-1]\n                     self.use_ipv6 = True\n@@ -181,3 +183,4 @@ class Command(BaseCommand):\n             if shutdown_message:\n                 self.stdout.write(shutdown_message)\n             sys.exit(0)\n+\n"}
{"instance_id":"django__django-16256","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex c5d87f647a..e63dba5408 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -79,6 +79,7 @@ from django.db.models.query_utils import DeferredAttribute\n from django.db.models.utils import AltersData, resolve_callables\n from django.utils.functional import cached_property\n \n+from asgiref.sync import sync_to_async\n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n     def __set__(self, instance, value):\n@@ -808,6 +809,20 @@ def create_reverse_many_to_one_manager(superclass, rel):\n             return super(RelatedManager, self.db_manager(db)).update_or_create(**kwargs)\n \n         update_or_create.alters_data = True\n+        async def acreate(self, **kwargs):\n+            return await sync_to_async(self.create)(**kwargs)\n+\n+        acreate.alters_data = True\n+\n+        async def aget_or_create(self, **kwargs):\n+            return await sync_to_async(self.get_or_create)(**kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n+        async def aupdate_or_create(self, **kwargs):\n+            return await sync_to_async(self.update_or_create)(**kwargs)\n+\n+        aupdate_or_create.alters_data = True\n \n         # remove() and clear() are only provided if the ForeignKey can have a\n         # value of null.\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex de49e1c58c..34f2efcaf8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -675,8 +675,6 @@ class QuerySet(AltersData):\n         obj.save(force_insert=True, using=self.db)\n         return obj\n \n-    async def acreate(self, **kwargs):\n-        return await sync_to_async(self.create)(**kwargs)\n \n     def _prepare_for_bulk_create(self, objs):\n         for obj in objs:\n@@ -946,10 +944,6 @@ class QuerySet(AltersData):\n \n     async def aget_or_create(self, defaults=None, **kwargs):\n         return await sync_to_async(self.get_or_create)(\n-            defaults=defaults,\n-            **kwargs,\n-        )\n-\n     def update_or_create(self, defaults=None, **kwargs):\n         \"\"\"\n         Look up an object with the given kwargs, updating one with defaults\n@@ -988,11 +982,6 @@ class QuerySet(AltersData):\n                 obj.save(using=self.db)\n         return obj, False\n \n-    async def aupdate_or_create(self, defaults=None, **kwargs):\n-        return await sync_to_async(self.update_or_create)(\n-            defaults=defaults,\n-            **kwargs,\n-        )\n \n     def _extract_model_params(self, defaults, **kwargs):\n         \"\"\"\n"}
{"instance_id":"django__django-16263","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex de49e1c58c..bd19c35ca0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -622,7 +622,12 @@ class QuerySet(AltersData):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n \n-        return self.query.get_count(using=self.db)\n+        clone = self._chain()\n+        if clone.query.annotations:\n+            # Remove unused annotations that are not used in filters, ordering, or other annotations\n+            clone.query.remove_unused_annotations()\n+\n+        return clone.query.get_count(using=self.db)\n \n     async def acount(self):\n         return await sync_to_async(self.count)()\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9735ce10c8..d9d169dd29 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2469,6 +2469,35 @@ class Query(BaseExpression):\n         else:\n             return self.extra\n \n+    def remove_unused_annotations(self):\n+        \"\"\"\n+        Remove annotations that are not referenced by filters, ordering, or other annotations.\n+        \"\"\"\n+        used_annos = set()\n+\n+        def collect_refs(expression):\n+            if isinstance(expression, Ref):\n+                used_annos.add(expression.refs)\n+            elif hasattr(expression, 'get_source_expressions'):\n+                for expr in expression.get_source_expressions():\n+                    collect_refs(expr)\n+\n+        # Collect annotations used in where clause\n+        collect_refs(self.where)\n+\n+        # Collect annotations used in ordering\n+        for order in self.order_by or []:\n+            expr = order.expression if hasattr(order, 'expression') else order\n+            collect_refs(expr)\n+\n+        # Collect annotations used in other annotations\n+        for alias, annotation in self.annotations.items():\n+            collect_refs(annotation)\n+\n+        # Keep annotations that are used\n+        to_remove = set(self.annotations.keys()) - used_annos\n+        for alias in to_remove:\n+            del self.annotations[alias]\n     def trim_start(self, names_with_path):\n         \"\"\"\n         Trim joins from the start of the join path. The candidates for trim\n"}
{"instance_id":"django__django-16315","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0562a71dd1..5bcf55430c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1725,8 +1725,8 @@ class SQLInsertCompiler(SQLCompiler):\n         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(\n             fields,\n             self.query.on_conflict,\n-            self.query.update_fields,\n-            self.query.unique_fields,\n+            [field.column for field in self.query.model._meta.fields if field.name in self.query.update_fields],\n+            [field.column for field in self.query.model._meta.fields if field.name in self.query.unique_fields],\n         )\n         if (\n             self.returning_fields\n"}
{"instance_id":"django__django-16333","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8495..4c9a4f5556 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()\n         return user\n \n \n"}
{"instance_id":"django__django-16429","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/utils/timesince.py b/django/utils/timesince.py\nindex 701c49bab9..4dbd0efaab 100644\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -97,6 +97,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             d.hour,\n             d.minute,\n             d.second,\n+            tzinfo=d.tzinfo,\n         )\n     else:\n         pivot = d\n@@ -135,3 +136,4 @@ def timeuntil(d, now=None, time_strings=None, depth=2):\n     Like timesince, but return a string measuring the time until the given time.\n     \"\"\"\n     return timesince(d, now, reversed=True, time_strings=time_strings, depth=depth)\n+\n"}
{"instance_id":"django__django-16454","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..ca782ff109 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,11 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        kwargs.setdefault('parser_class', type(self))\n+        kwargs.setdefault('missing_args_message', self.missing_args_message)\n+        kwargs.setdefault('called_from_command_line', self.called_from_command_line)\n+        return super().add_subparsers(**kwargs)\n \n def handle_default_options(options):\n     \"\"\"\n"}
{"instance_id":"django__django-16485","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08c67..ba71d3d6f9 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -183,7 +183,11 @@ def floatformat(text, arg=-1):\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    # Set precision to handle zero values correctly\n+    if d == 0:\n+        prec = max(1, abs(p))  # For zero, we only need precision based on arg\n+    else:\n+        prec = max(1, abs(p) + units + 1)  # For non-zero, use original logic with minimum of 1\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n"}
{"instance_id":"django__django-16493","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7a99b12691..8f7e8e90f5 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -295,7 +295,7 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs[\"upload_to\"] = self.upload_to\n-        if self.storage is not default_storage:\n+        if hasattr(self, '_storage_callable') or self.storage is not default_storage:\n             kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)\n         return name, path, args, kwargs\n \n"}
{"instance_id":"django__django-16502","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\nindex 39e2abe5a9..1aa1a1ff70 100644\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -22,6 +22,18 @@ from django.http import (\n from django.urls import set_script_prefix\n from django.utils.functional import cached_property\n \n+def conditional_content_removal(request, response):\n+    if 100 <= response.status_code < 200 or response.status_code in (204, 304):\n+        if response.streaming:\n+            response.streaming_content = []\n+        else:\n+            response.content = b\"\"\n+    if request.method == \"HEAD\":\n+        if response.streaming:\n+            response.streaming_content = []\n+        else:\n+            response.content = b\"\"\n+    return response\n logger = logging.getLogger(\"django.request\")\n \n \ndiff --git a/django/core/handlers/wsgi.py b/django/core/handlers/wsgi.py\nindex c2b7cc2b6f..7601e95a0d 100644\n--- a/django/core/handlers/wsgi.py\n+++ b/django/core/handlers/wsgi.py\n@@ -9,6 +9,18 @@ from django.utils.encoding import repercent_broken_unicode\n from django.utils.functional import cached_property\n from django.utils.regex_helper import _lazy_re_compile\n \n+def conditional_content_removal(request, response):\n+    if 100 <= response.status_code < 200 or response.status_code in (204, 304):\n+        if response.streaming:\n+            response.streaming_content = []\n+        else:\n+            response.content = b\"\"\n+    if request.method == \"HEAD\":\n+        if response.streaming:\n+            response.streaming_content = []\n+        else:\n+            response.content = b\"\"\n+    return response\n _slashes_re = _lazy_re_compile(rb\"/+\")\n \n \n@@ -132,6 +144,11 @@ class WSGIHandler(base.BaseHandler):\n         signals.request_started.send(sender=self.__class__, environ=environ)\n         request = self.request_class(environ)\n         response = self.get_response(request)\n+        if request.method == 'HEAD':\n+            if response.streaming:\n+                response.streaming_content = []\n+            else:\n+                response.content = b''\n \n         response._handler_class = self.__class__\n \ndiff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532e58..50a6b4bebf 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -22,6 +22,18 @@ from django.utils.module_loading import import_string\n __all__ = (\"WSGIServer\", \"WSGIRequestHandler\")\n \n logger = logging.getLogger(\"django.server\")\n+def conditional_content_removal(request, response):\n+    if 100 <= response.status_code < 200 or response.status_code in (204, 304):\n+        if response.streaming:\n+            response.streaming_content = []\n+        else:\n+            response.content = b\"\"\n+    if request.method == \"HEAD\":\n+        if response.streaming:\n+            response.streaming_content = []\n+        else:\n+            response.content = b\"\"\n+    return response\n \n \n def get_internal_wsgi_application():\n@@ -147,6 +159,14 @@ class ServerHandler(simple_server.ServerHandler):\n         self.get_stdin().read()\n         super().close()\n \n+    def finish_response(self):\n+        method = self.environ.get('REQUEST_METHOD')\n+        if method == 'HEAD':\n+            if getattr(self.result, 'streaming', False):\n+                self.result.streaming_content = []\n+            else:\n+                self.result.content = b''\n+        super().finish_response()\n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n     protocol_version = \"HTTP/1.1\"\n"}
{"instance_id":"django__django-16560","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 075ecee1be..bc2d50cee2 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -22,7 +22,7 @@ class BaseConstraint:\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n     # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -34,6 +34,7 @@ class BaseConstraint:\n             self.violation_error_message = violation_error_message\n         else:\n             self.violation_error_message = self.default_violation_error_message\n+        self.violation_error_code = violation_error_code\n         # RemovedInDjango60Warning.\n         if args:\n             warnings.warn(\n@@ -42,7 +43,7 @@ class BaseConstraint:\n                 RemovedInDjango60Warning,\n                 stacklevel=2,\n             )\n-            for arg, attr in zip(args, [\"name\", \"violation_error_message\"]):\n+            for arg, attr in zip(args, [\"name\", \"violation_error_message\", \"violation_error_code\"]):\n                 if arg:\n                     setattr(self, attr, arg)\n \n@@ -82,12 +83,13 @@ class BaseConstraint:\n \n \n class CheckConstraint(BaseConstraint):\n-    def __init__(self, *, check, name, violation_error_message=None):\n+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):\n         self.check = check\n         if not getattr(check, \"conditional\", False):\n             raise TypeError(\n                 \"CheckConstraint.check must be a Q instance or boolean expression.\"\n             )\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n         super().__init__(name=name, violation_error_message=violation_error_message)\n \n     def _get_check_sql(self, model, schema_editor):\n@@ -112,7 +114,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)\n         except FieldError:\n             pass\n \n"}
{"instance_id":"django__django-16569","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 235aaf844c..02d040ee03 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):\n                     required=False,\n                     widget=self.get_ordering_widget(),\n                 )\n-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(\n                 label=_(\"Delete\"),\n                 required=False,\n"}
{"instance_id":"django__django-16612","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 61be31d890..6421c15cd4 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -453,7 +453,11 @@ class AdminSite:\n                 pass\n             else:\n                 if getattr(match.func, \"should_append_slash\", True):\n-                    return HttpResponsePermanentRedirect(\"%s/\" % request.path)\n+                    query_string = request.META.get('QUERY_STRING', '')\n+                    if query_string:\n+                        return HttpResponsePermanentRedirect(\"%s/?%s\" % (request.path, query_string))\n+                    else:\n+                        return HttpResponsePermanentRedirect(\"%s/\" % request.path)\n         raise Http404\n \n     def _build_app_dict(self, request, label=None):\n"}
{"instance_id":"django__django-16631","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 050e7387be..7002209d74 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -101,7 +101,11 @@ class SessionBase:\n     def decode(self, session_data):\n         try:\n             return signing.loads(\n-                session_data, salt=self.key_salt, serializer=self.serializer\n+                session_data,\n+                key=settings.SECRET_KEY,\n+                fallback_keys=getattr(settings, 'SECRET_KEY_FALLBACKS', []),\n+                salt=self.key_salt,\n+                serializer=self.serializer\n             )\n         except signing.BadSignature:\n             logger = logging.getLogger(\"django.security.SuspiciousSession\")\n@@ -363,3 +367,4 @@ class SessionBase:\n         a built-in expiration mechanism, it should be a no-op.\n         \"\"\"\n         raise NotImplementedError(\"This backend does not support clear_expired().\")\n+\n"}
{"instance_id":"django__django-16642","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..0d6b4a08fa 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -606,6 +606,11 @@ class FileResponse(StreamingHttpResponse):\n         if self._no_explicit_content_type:\n             if filename:\n                 content_type, encoding = mimetypes.guess_type(filename)\n+                # Custom mapping for specific file extensions\n+                if filename.endswith('.br'):\n+                    content_type = 'application/x-brotli'\n+                elif filename.endswith('.Z'):\n+                    content_type = 'application/x-compress'\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n                 content_type = {\ndiff --git a/django/views/static.py b/django/views/static.py\nindex df46c53093..7f894ac2be 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -55,6 +55,11 @@ def serve(request, path, document_root=None, show_indexes=False):\n     ):\n         return HttpResponseNotModified()\n     content_type, encoding = mimetypes.guess_type(str(fullpath))\n+    # Custom mapping for specific file extensions\n+    if str(fullpath).endswith('.br'):\n+        content_type = 'application/x-brotli'\n+    elif str(fullpath).endswith('.Z'):\n+        content_type = 'application/x-compress'\n     content_type = content_type or \"application/octet-stream\"\n     response = FileResponse(fullpath.open(\"rb\"), content_type=content_type)\n     response.headers[\"Last-Modified\"] = http_date(statobj.st_mtime)\n"}
{"instance_id":"django__django-16661","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5240b07cd6..c4a7a07890 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -464,9 +464,14 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # It is allowed to filter on values that would be found from local\n             # model anyways. For example, if you filter on employee__department__id,\n             # then the id value would be found already from employee__department_id.\n+            # Fields that are part of a concrete inheritance path should not be\n+            # treated as relationships. But foreign key primary keys should be\n+            # treated as relationships.\n             if not prev_field or (\n-                prev_field.is_relation\n-                and field not in prev_field.path_infos[-1].target_fields\n+                prev_field.is_relation and (\n+                    field not in prev_field.path_infos[-1].target_fields or\n+                    isinstance(field, models.ForeignKey)\n+                )\n             ):\n                 relation_parts.append(part)\n             if not getattr(field, \"path_infos\", None):\n"}
{"instance_id":"django__django-16662","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex a59f0c8dcb..109d4bd60a 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -175,8 +175,11 @@ class MigrationWriter:\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n-        items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n+        import_lines = sorted(i for i in imports if i.startswith(\"import \"))\n+        from_import_lines = sorted(i for i in imports if i.startswith(\"from \"))\n+        items[\"imports\"] = (\n+            \"\\n\".join(import_lines + from_import_lines) + \"\\n\" if imports else \"\"\n+        )\n         if migration_imports:\n             items[\"imports\"] += (\n                 \"\\n\\n# Functions from the following migrations need manual \"\n@@ -309,3 +312,4 @@ class Migration(migrations.Migration):\n %(operations)s\\\n     ]\n \"\"\"\n+\n"}
{"instance_id":"django__django-16667","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e95c..87d7a37111 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1156,8 +1156,17 @@ class SelectDateWidget(Widget):\n             input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n             input_format = formats.sanitize_strftime_format(input_format)\n             try:\n-                date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+                year = int(y)\n+                month = int(m)\n+                day = int(d)\n+                if not (datetime.date.min.year <= year <= datetime.date.max.year):\n+                    raise ValueError(\"Year out of range\")\n+                if not (1 <= month <= 12):\n+                    raise ValueError(\"Month out of range\")\n+                if not (1 <= day <= 31):\n+                    raise ValueError(\"Day out of range\")\n+                date_value = datetime.date(year, month, day)\n+            except (ValueError, OverflowError):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n"}
{"instance_id":"django__django-16801","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7f8eb128e1..40fcdf2375 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -442,7 +442,8 @@ class ImageField(FileField):\n         # Model.__init__, see bug #11196.\n         # Only run post-initialization dimension update on non-abstract models\n         if not cls._meta.abstract:\n-            signals.post_init.connect(self.update_dimension_fields, sender=cls)\n+            if self.width_field or self.height_field:\n+                signals.post_init.connect(self.update_dimension_fields, sender=cls)\n \n     def update_dimension_fields(self, instance, force=False, *args, **kwargs):\n         \"\"\"\n"}
{"instance_id":"django__django-16819","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 23c97e5474..c9879ec6c1 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1303,9 +1303,34 @@ class MigrationAutodetector:\n             )\n \n     def generate_added_indexes(self):\n+        \"\"\"Generate AddIndex operations with optimization.\"\"\"\n+        idx_mapping = {}  # Keep track of index operations for optimization\n+\n+        # Pre-process and group indexes by model\n+        for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n+            key = (app_label, model_name)\n+            if key not in idx_mapping:\n+                idx_mapping[key] = {\"added\": set(), \"removed\": set()}\n+\n+            # Track added indexes\n+            for index in alt_indexes[\"added_indexes\"]:\n+                idx_mapping[key][\"added\"].add(index.name.lower())\n+\n+            # Track removed indexes\n+            for index in alt_indexes[\"removed_indexes\"]:\n+                idx_mapping[key][\"removed\"].add(index.name.lower())\n+\n+        # Generate operations, skipping those that are redundant\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n+            key = (app_label, model_name)\n             dependencies = self._get_dependencies_for_model(app_label, model_name)\n+\n             for index in alt_indexes[\"added_indexes\"]:\n+                # Skip if this index is later removed\n+                if (index.name.lower() in idx_mapping[key][\"removed\"] and\n+                    not any(f.db_index for f in index.fields)):\n+                    continue\n+\n                 self.add_operation(\n                     app_label,\n                     operations.AddIndex(\n@@ -1316,15 +1341,22 @@ class MigrationAutodetector:\n                 )\n \n     def generate_removed_indexes(self):\n+        \"\"\"Generate RemoveIndex operations with optimization.\"\"\"\n+        # Since generate_added_indexes has already handled optimization\n+        # we only need to process the remaining removals\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n+            # Skip if we're removing an index that was just added\n             for index in alt_indexes[\"removed_indexes\"]:\n-                self.add_operation(\n-                    app_label,\n-                    operations.RemoveIndex(\n-                        model_name=model_name,\n-                        name=index.name,\n-                    ),\n-                )\n+                # Check if this wasn't already handled in generate_added_indexes\n+                if not any(added.name.lower() == index.name.lower()\n+                          for added in alt_indexes[\"added_indexes\"]):\n+                    self.add_operation(\n+                        app_label,\n+                        operations.RemoveIndex(\n+                            model_name=model_name,\n+                            name=index.name,\n+                        ),\n+                    )\n \n     def generate_renamed_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 967a91fdc8..3e4bab083a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -861,6 +861,15 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, RemoveIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.index.name.lower() == operation.name.lower()\n+        ):\n+            return []\n+        return super().reduce(operation, app_label)\n+\n \n class RemoveIndex(IndexOperation):\n     \"\"\"Remove an index from a model.\"\"\"\n@@ -886,6 +895,15 @@ class RemoveIndex(IndexOperation):\n             index = to_model_state.get_index_by_name(self.name)\n             schema_editor.add_index(model, index)\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, AddIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.name.lower() == operation.index.name.lower()\n+        ):\n+            return []\n+        return super().reduce(operation, app_label)\n+\n     def deconstruct(self):\n         kwargs = {\n             \"model_name\": self.model_name,\ndiff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 7e5dea2377..647df5a337 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -40,30 +40,56 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n+        skip_index = set()  # Track indices to skip\n+\n         for i, operation in enumerate(operations):\n+            if i in skip_index:\n+                continue\n+\n             right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1 :]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1 : i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n+\n+            # Special handling for index operations\n+            if hasattr(operation, 'model_name_lower') and hasattr(operation, 'name_lower'):\n+                # Look ahead for matching operations\n+                for j, other in enumerate(operations[i + 1:], start=1):\n+                    if not hasattr(other, 'model_name_lower') or not hasattr(other, 'name_lower'):\n+                        continue\n+\n+                    result = operation.reduce(other, app_label)\n+                    if isinstance(result, list) and not result:  # Empty list means operations cancel out\n+                        in_between = operations[i + 1:i + j]\n+                        # Check if we can optimize through the in-between operations\n+                        if all(op.reduce(other, app_label) is True for op in in_between):\n+                            skip_index.add(i + j)  # Skip the other operation when we reach it\n+                            break\n+\n+            # Compare it to each operation after it (existing logic)\n+            if i not in skip_index:  # Only process if not already optimized\n+                for j, other in enumerate(operations[i + 1:]):\n+                    result = operation.reduce(other, app_label)\n+                    if isinstance(result, list):\n+                        in_between = operations[i + 1:i + j + 1]\n+                        if right:\n+                            new_operations.extend(in_between)\n+                            new_operations.extend(result)\n+                        elif all(op.reduce(other, app_label) is True for op in in_between):\n+                            # Perform a left reduction if all of the in-between\n+                            # operations can optimize through other.\n+                            new_operations.extend(result)\n+                            new_operations.extend(in_between)\n+                        else:\n+                            # Otherwise keep trying.\n+                            new_operations.append(operation)\n+                            break\n+                        new_operations.extend(operations[i + j + 2:])\n+                        return new_operations\n+                    elif not result:\n+                        # Can't perform a right reduction.\n+                        right = False\n+                else:\n+                    if i not in skip_index:  # Only add if not optimized\n                         new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2 :])\n-                    return new_operations\n-                elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n-            else:\n+            elif i not in skip_index:  # Only add if not optimized\n                 new_operations.append(operation)\n+\n         return new_operations\n"}
{"instance_id":"django__django-16877","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5289ef34a0..12f9135972 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -981,3 +981,11 @@ def pprint(value):\n         return pformat(value)\n     except Exception as e:\n         return \"Error in formatting: %s: %s\" % (e.__class__.__name__, e)\n+@register.filter(is_safe=True)\n+def escapeseq(value):\n+    \"\"\"\n+    Escape each item in a sequence.\n+    This filter takes a sequence and returns a list of escaped items,\n+    using django.utils.html.escape on each item.\n+    \"\"\"\n+    return [escape(item) for item in value]\n"}
{"instance_id":"django__django-16899","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex c395b0bde2..bbd0f9d76f 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -771,10 +771,11 @@ class BaseModelAdminChecks:\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' is not a callable, an attribute of \"\n+                        \"The value of '%s' refers to '%s', which is not a callable, an attribute of \"\n                         \"'%s', or an attribute of '%s'.\"\n                         % (\n                             label,\n+                            field_name,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n                         ),\n"}
{"instance_id":"django__django-16901","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex aaab1730b7..f7a1de12c1 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -135,7 +135,7 @@ class WhereNode(tree.Node):\n                 operator.add,\n                 (Case(When(c, then=1), default=0) for c in self.children),\n             )\n-            rhs = Exact(1, rhs_sum)\n+            rhs = Exact(1, rhs_sum % 2)\n             return self.__class__([lhs, rhs], AND, self.negated).as_sql(\n                 compiler, connection\n             )\n"}
{"instance_id":"django__django-16938","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 36048601af..c90757f675 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -79,7 +79,7 @@ class Serializer(base.Serializer):\n                     return self._value_from_field(value, value._meta.pk)\n \n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).only(\"pk\").iterator()\n+                    return getattr(obj, field.name).iterator()\n \n             m2m_iter = getattr(obj, \"_prefetched_objects_cache\", {}).get(\n                 field.name,\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..42bed52f37 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1209,6 +1209,11 @@ class SQLCompiler:\n                 next = False\n \n             if not select_related_descend(f, restricted, requested, select_mask):\n+                if self.query.is_deferred_field(opts, f):\n+                    raise FieldError(\n+                        \"Field %s.%s cannot be both deferred and traversed using select_related at the same time.\"\n+                        % (opts.model.__name__, f.name)\n+                    )\n                 continue\n             related_select_mask = select_mask.get(f) or {}\n             klass_info = {\n"}
{"instance_id":"django__django-16950","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex f9760664dd..dc42f3dd45 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -833,6 +833,28 @@ class ModelAdmin(BaseModelAdmin):\n         ):\n             defaults[\"fields\"] = forms.ALL_FIELDS\n \n+        # Define custom formfield_callback to set initial values from model defaults\n+        def formfield_callback_with_initials(db_field, **kwargs):\n+            field = self.formfield_for_dbfield(db_field, request=request, **kwargs)\n+            if field is not None and field.initial is None:\n+                if hasattr(db_field, 'has_default') and db_field.has_default():\n+                    if callable(db_field.default):\n+                        field.initial = db_field.default()\n+                    else:\n+                        field.initial = db_field.get_default()\n+            return field\n+\n+        defaults['formfield_callback'] = formfield_callback_with_initials\n+\n+        try:\n+            return modelform_factory(self.model, **defaults)\n+        except FieldError as e:\n+            raise FieldError(\n+                \"%s. Check fields/fieldsets/exclude attributes of class %s.\"\n+                % (e, self.__class__.__name__)\n+            )\n+            defaults[\"fields\"] = forms.ALL_FIELDS\n+\n         try:\n             return modelform_factory(self.model, **defaults)\n         except FieldError as e:\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 3fa04b821f..5cee9f1317 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -305,11 +305,30 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n                 # fields from the model\"\n                 opts.fields = None\n \n-            fields = fields_for_model(\n+            form_fields = fields_for_model(\n                 opts.model,\n                 opts.fields,\n                 opts.exclude,\n                 opts.widgets,\n+                formfield_callback=opts.formfield_callback,\n+                localized_fields=opts.localized_fields,\n+                labels=opts.labels,\n+                help_texts=opts.help_texts,\n+                error_messages=opts.error_messages,\n+                field_classes=opts.field_classes,\n+                use_required_attribute=opts.use_required_attribute,\n+            )\n+\n+            # Set initial values for form fields from model field defaults\n+            for field_name, field in form_fields.items():\n+                if field_name not in new_class.declared_fields:\n+                    model_field = opts.model._meta.get_field(field_name)\n+                    if field.initial is None and model_field.has_default():\n+                        if callable(model_field.default):\n+                            field.initial = model_field.default()\n+                        else:\n+                            field.initial = model_field.get_default()\n+                opts.widgets,\n                 opts.formfield_callback,\n                 opts.localized_fields,\n                 opts.labels,\n"}
{"instance_id":"django__django-17029","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 0683f3ad3c..481dd1fc86 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -376,6 +376,7 @@ class Apps:\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n+        self.get_swappable_settings_name.cache_clear()\n         if self.ready:\n             # Circumvent self.get_models() to prevent that the cache is refilled.\n             # This particularly prevents that an empty value is cached while cloning.\n"}
{"instance_id":"django__django-17084","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 280cb967b4..4f560e51ac 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1699,8 +1699,9 @@ class Window(SQLiteNumericMixin, Expression):\n     # Although the main expression may either be an aggregate or an\n     # expression with an aggregate function, the GROUP BY that will\n     # be introduced in the query as a result is not desired.\n-    contains_aggregate = False\n-    contains_over_clause = True\n+    @cached_property\n+    def contains_aggregate(self):\n+        return self.source_expression.contains_aggregate\n \n     def __init__(\n         self,\ndiff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 671017aba7..d987b81cc4 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -14,28 +14,26 @@ __all__ = [\n     \"Rank\",\n     \"RowNumber\",\n ]\n+class WindowFunction(Func):\n+    window_compatible = True\n \n+    @property\n+    def contains_aggregate(self):\n+        return any(arg.contains_aggregate for arg in self.get_source_expressions())\n \n-class CumeDist(Func):\n+class CumeDist(WindowFunction):\n     function = \"CUME_DIST\"\n     output_field = FloatField()\n-    window_compatible = True\n \n-\n-class DenseRank(Func):\n+class DenseRank(WindowFunction):\n     function = \"DENSE_RANK\"\n     output_field = IntegerField()\n-    window_compatible = True\n \n-\n-class FirstValue(Func):\n+class FirstValue(WindowFunction):\n     arity = 1\n     function = \"FIRST_VALUE\"\n-    window_compatible = True\n-\n \n-class LagLeadFunction(Func):\n-    window_compatible = True\n+class LagLeadFunction(WindowFunction):\n \n     def __init__(self, expression, offset=1, default=None, **extra):\n         if expression is None:\n@@ -56,24 +54,18 @@ class LagLeadFunction(Func):\n         sources = self.get_source_expressions()\n         return sources[0].output_field\n \n-\n class Lag(LagLeadFunction):\n     function = \"LAG\"\n \n-\n-class LastValue(Func):\n-    arity = 1\n-    function = \"LAST_VALUE\"\n-    window_compatible = True\n-\n-\n class Lead(LagLeadFunction):\n     function = \"LEAD\"\n \n+class LastValue(WindowFunction):\n+    arity = 1\n+    function = \"LAST_VALUE\"\n \n-class NthValue(Func):\n+class NthValue(WindowFunction):\n     function = \"NTH_VALUE\"\n-    window_compatible = True\n \n     def __init__(self, expression, nth=1, **extra):\n         if expression is None:\n@@ -90,31 +82,25 @@ class NthValue(Func):\n         sources = self.get_source_expressions()\n         return sources[0].output_field\n \n-\n-class Ntile(Func):\n+class Ntile(WindowFunction):\n     function = \"NTILE\"\n     output_field = IntegerField()\n-    window_compatible = True\n \n     def __init__(self, num_buckets=1, **extra):\n         if num_buckets <= 0:\n             raise ValueError(\"num_buckets must be greater than 0.\")\n         super().__init__(num_buckets, **extra)\n \n-\n-class PercentRank(Func):\n+class PercentRank(WindowFunction):\n     function = \"PERCENT_RANK\"\n     output_field = FloatField()\n-    window_compatible = True\n-\n \n-class Rank(Func):\n+class Rank(WindowFunction):\n     function = \"RANK\"\n     output_field = IntegerField()\n-    window_compatible = True\n-\n \n-class RowNumber(Func):\n+class RowNumber(WindowFunction):\n     function = \"ROW_NUMBER\"\n     output_field = IntegerField()\n-    window_compatible = True\n+\n+\n"}
{"instance_id":"django__django-7530","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 0b39536f5b..387e977e6f 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -105,7 +105,7 @@ class Command(BaseCommand):\n                     # At least one model must be migrated to the database.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_app_config(app_label).get_models()\n             )):\n                 loader.check_consistent_history(connection)\n \n@@ -320,3 +320,4 @@ class Command(BaseCommand):\n                         \"Full merge migrations file '%s':\" % writer.filename) + \"\\n\"\n                     )\n                     self.stdout.write(\"%s\\n\" % writer.as_string())\n+\n"}
{"instance_id":"django__django-9296","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/django/core/paginator.py b/django/core/paginator.py\nindex 1f92da5d4f..1fb9adc01b 100644\n--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -106,6 +106,10 @@ class Paginator:\n         \"\"\"\n         return range(1, self.num_pages + 1)\n \n+    def __iter__(self):\n+        for page_num in self.page_range:\n+            yield self.page(page_num)\n+\n     def _check_object_list_is_ordered(self):\n         \"\"\"\n         Warn if self.object_list is unordered (typically a QuerySet).\n@@ -184,3 +188,4 @@ class Page(collections.abc.Sequence):\n         if self.number == self.paginator.num_pages:\n             return self.paginator.count\n         return self.number * self.paginator.per_page\n+\n"}
{"instance_id":"matplotlib__matplotlib-13989","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 4b73d52293..59b4f63e1b 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6696,6 +6696,10 @@ optional.\n             # this will automatically overwrite bins,\n             # so that each histogram uses the same bins\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n+            # Force bins to respect the range parameter when density=True and range is provided\n+            if density and bin_range is not None and len(bins) > 0:\n+                bins[0] = bin_range[0]\n+                bins[-1] = bin_range[1]\n             m = m.astype(float)  # causes problems later if it's an int\n             if mlast is None:\n                 mlast = np.zeros(len(bins)-1, m.dtype)\n"}
{"instance_id":"matplotlib__matplotlib-14623","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex da2dea6f57..8e21ca640d 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3639,13 +3639,8 @@ class _AxesBase(martist.Artist):\n                     'log-scaled axis.\\n'\n                     'Invalid limit will be ignored.')\n                 top = old_top\n-        if bottom == top:\n-            cbook._warn_external(\n-                f\"Attempting to set identical bottom == top == {bottom} \"\n-                f\"results in singular transformations; automatically \"\n-                f\"expanding.\")\n-        bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n-        bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n+        if self.get_yscale() == 'log' and self.yaxis_inverted():\n+            bottom, top = top, bottom\n \n         self.viewLim.intervaly = (bottom, top)\n         if auto is not None:\n"}
{"instance_id":"matplotlib__matplotlib-20488","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex e0c42c5b69..2b8b671fd5 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1463,6 +1463,8 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n         def __call__(self, value, clip=None):\n             value, is_scalar = self.process_value(value)\n             self.autoscale_None(value)\n+            if not np.isfinite([self.vmin, self.vmax]).all():\n+                raise ValueError(\"vmin and vmax must be finite.\")\n             if self.vmin > self.vmax:\n                 raise ValueError(\"vmin must be less or equal to vmax\")\n             if self.vmin == self.vmax:\ndiff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex 95bb42d75c..a3fad0401d 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -535,6 +535,8 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):\n                 if isinstance(self.norm, mcolors.LogNorm):\n                     if s_vmin < 0:\n                         s_vmin = max(s_vmin, np.finfo(scaled_dtype).eps)\n+                if not np.isfinite([s_vmin, s_vmax]).all():\n+                    s_vmin, s_vmax = np.nanmin(A_resampled), np.nanmax(A_resampled)\n                 with cbook._setattr_cm(self.norm,\n                                        vmin=s_vmin,\n                                        vmax=s_vmax,\n"}
{"instance_id":"matplotlib__matplotlib-20676","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 10ab40b147..a96bedd944 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3714,9 +3714,9 @@ class _AxesBase(martist.Artist):\n                 f\"Attempting to set identical left == right == {left} results \"\n                 f\"in singular transformations; automatically expanding.\")\n         reverse = left > right\n-        left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n+        if left == right:\n+            left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n         left, right = self.xaxis.limit_range_for_scale(left, right)\n-        # cast to bool to avoid bad interaction between python 3.8 and np.bool_\n         left, right = sorted([left, right], reverse=bool(reverse))\n \n         self._viewLim.intervalx = (left, right)\ndiff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a199e45d40..717d51af03 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2153,7 +2153,7 @@ class SpanSelector(_SelectorWidget):\n         if len(self.artists) > 0:\n             self.artists[0] = self._rect\n         else:\n-            self.artists.append(self._rect)\n+            self.ax.add_artist(self._rect)\n \n     def _setup_edge_handle(self, props):\n         self._edge_handles = ToolLineHandles(self.ax, self.extents,\n"}
{"instance_id":"matplotlib__matplotlib-20826","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 802fd3c997..5d2492ee2b 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1192,8 +1192,14 @@ class _AxesBase(martist.Artist):\n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n \n+        xaxis_label_visibility = [label.get_visible() for label in self.xaxis.get_ticklabels()]\n+        yaxis_label_visibility = [label.get_visible() for label in self.yaxis.get_ticklabels()]\n         self.xaxis.clear()\n         self.yaxis.clear()\n+        for label, visible in zip(self.xaxis.get_ticklabels(), xaxis_label_visibility):\n+            label.set_visible(visible)\n+        for label, visible in zip(self.yaxis.get_ticklabels(), yaxis_label_visibility):\n+            label.set_visible(visible)\n \n         for name, spine in self.spines.items():\n             spine.clear()\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex 887cf97ef1..58dd73510e 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -808,7 +808,10 @@ class Axis(martist.Artist):\n \n         self._reset_major_tick_kw()\n         self._reset_minor_tick_kw()\n+        ticklabel_visibility = [label.get_visible() for label in self.get_ticklabels()]\n         self.reset_ticks()\n+        for label, visible in zip(self.get_ticklabels(), ticklabel_visibility):\n+            label.set_visible(visible)\n \n         self.converter = None\n         self.units = None\n"}
{"instance_id":"matplotlib__matplotlib-20859","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 44ab024698..48b38460bb 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -360,7 +360,7 @@ class Legend(Artist):\n         \"\"\"\n         # local import only to avoid circularity\n         from matplotlib.axes import Axes\n-        from matplotlib.figure import Figure\n+        from matplotlib.figure import Figure, FigureBase\n \n         super().__init__()\n \n@@ -434,11 +434,11 @@ class Legend(Artist):\n             self.isaxes = True\n             self.axes = parent\n             self.set_figure(parent.figure)\n-        elif isinstance(parent, Figure):\n+        elif isinstance(parent, (Figure, FigureBase)):\n             self.isaxes = False\n             self.set_figure(parent)\n         else:\n-            raise TypeError(\"Legend needs either Axes or Figure as parent\")\n+            raise TypeError(\"Legend needs either Axes, Figure, or FigureBase as parent\")\n         self.parent = parent\n \n         self._loc_used_default = loc is None\n"}
{"instance_id":"matplotlib__matplotlib-21568","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/backends/backend_pgf.py b/lib/matplotlib/backends/backend_pgf.py\nindex b5eec48d92..a64c7f03cc 100644\n--- a/lib/matplotlib/backends/backend_pgf.py\n+++ b/lib/matplotlib/backends/backend_pgf.py\n@@ -690,6 +690,8 @@ class RendererPgf(RendererBase):\n \n         # prepare string for tex\n         s = _escape_and_apply_props(s, prop)\n+        if mpl.rcParams['text.usetex']:\n+            s = f'${s}$'\n \n         writeln(self.fh, r\"\\begin{pgfscope}\")\n \ndiff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..643df2dbbc 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -631,7 +631,7 @@ class DateFormatter(ticker.Formatter):\n \n     def __call__(self, x, pos=0):\n         result = num2date(x, self.tz).strftime(self.fmt)\n-        return _wrap_in_tex(result) if self._usetex else result\n+        return f'${result}$' if self._usetex else result\n \n     def set_tzinfo(self, tz):\n         self.tz = tz\ndiff --git a/lib/matplotlib/texmanager.py b/lib/matplotlib/texmanager.py\nindex 62aca98a32..490e9fd293 100644\n--- a/lib/matplotlib/texmanager.py\n+++ b/lib/matplotlib/texmanager.py\n@@ -106,17 +106,21 @@ class TexManager:\n \n     def get_font_config(self):\n         ff = rcParams['font.family']\n-        ff_val = ff[0].lower() if len(ff) == 1 else None\n-        reduced_notation = False\n-        if len(ff) == 1 and ff_val in self._font_families:\n-            self._font_family = ff_val\n-        elif len(ff) == 1 and ff_val in self._font_info:\n-            reduced_notation = True\n-            self._font_family = self._font_types[ff_val]\n+        if ff:\n+            for font in ff:\n+                font_lower = font.lower()\n+                if font_lower in self._font_families:\n+                    self._font_family = font_lower\n+                    break\n+                elif font_lower in self._font_info:\n+                    self._font_family = self._font_types[font_lower]\n+                    break\n+            else:\n+                _log.info('font.family must be one of (%s) when text.usetex is True. '\n+                          'Using default serif font.',\n+                          ', '.join(self._font_families))\n+                self._font_family = 'serif'\n         else:\n-            _log.info('font.family must be one of (%s) when text.usetex is '\n-                      'True. serif will be used by default.',\n-                      ', '.join(self._font_families))\n             self._font_family = 'serif'\n \n         fontconfig = [self._font_family]\n"}
{"instance_id":"matplotlib__matplotlib-22719","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex f1ec9406ea..0d9cf90c91 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1635,6 +1635,10 @@ class Axes(_AxesBase):\n         (``'green'``) or hex strings (``'#008000'``).\n         \"\"\"\n         kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n+        # Check for empty data structures\n+        if args and all(hasattr(arg, '__len__') and len(arg) == 0\n+                       for arg in args if isinstance(arg, (list, np.ndarray))):\n+            return []\n         lines = [*self._get_lines(*args, data=data, **kwargs)]\n         for line in lines:\n             self.add_line(line)\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e80e49e53b..5b5a952fdc 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1613,6 +1613,10 @@ class Axis(martist.Artist):\n         if munits._is_natively_supported(x):\n             return x\n \n+        # Handle empty data structures\n+        if hasattr(x, '__len__') and len(x) == 0:\n+            return x\n+\n         if self.converter is None:\n             self.converter = munits.registry.get_converter(x)\n \ndiff --git a/lib/matplotlib/category.py b/lib/matplotlib/category.py\nindex c823b68fd9..c6b644e248 100644\n--- a/lib/matplotlib/category.py\n+++ b/lib/matplotlib/category.py\n@@ -50,6 +50,11 @@ class StrCategoryConverter(units.ConversionInterface):\n                 'Missing category information for StrCategoryConverter; '\n                 'this might be caused by unintendedly mixing categorical and '\n                 'numeric data')\n+\n+        # Handle empty data structures\n+        if hasattr(value, '__len__') and len(value) == 0:\n+            return value\n+\n         StrCategoryConverter._validate_unit(unit)\n         # dtype = object preserves numerical pass throughs\n         values = np.atleast_1d(np.array(value, dtype=object))\n"}
{"instance_id":"matplotlib__matplotlib-22865","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex c59b0ac815..9559c9a3d7 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -651,8 +651,17 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        if self.drawedges:\n+            if self.extend in ['both', 'min']:\n+                segments = [np.dstack([X, Y])[0]]\n+            else:\n+                segments = []\n+            segments.extend(np.dstack([X, Y])[1:-1])\n+            if self.extend in ['both', 'max']:\n+                segments.append(np.dstack([X, Y])[-1])\n+            self.dividers.set_segments(segments)\n+        else:\n+            self.dividers.set_segments([])\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n"}
{"instance_id":"matplotlib__matplotlib-22871","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 4d8ddf3ee5..acdac28d18 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -797,10 +797,7 @@ class ConciseDateFormatter(ticker.Formatter):\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n-                if level < 2:\n-                    show_offset = False\n                 break\n-            elif level == 0:\n                 # all tickdate are the same, so only micros might be different\n                 # set to the most precise (6: microseconds doesn't exist...)\n                 level = 5\n"}
{"instance_id":"matplotlib__matplotlib-23412","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex e062249589..0c893aac3a 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -586,10 +586,7 @@ class Patch(artist.Artist):\n         # docstring inherited\n         if not self.get_visible():\n             return\n-        # Patch has traditionally ignored the dashoffset.\n-        with cbook._setattr_cm(\n-                 self, _dash_pattern=(0, self._dash_pattern[1])), \\\n-             self._bind_draw_path_function(renderer) as draw_path:\n+        with self._bind_draw_path_function(renderer) as draw_path:\n             path = self.get_path()\n             transform = self.get_transform()\n             tpath = transform.transform_path_non_affine(path)\n"}
{"instance_id":"matplotlib__matplotlib-24026","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/rcsetup.py b/lib/matplotlib/rcsetup.py\nindex 0a0e0bb273..1f14a57431 100644\n--- a/lib/matplotlib/rcsetup.py\n+++ b/lib/matplotlib/rcsetup.py\n@@ -280,9 +280,6 @@ def validate_color_or_auto(s):\n \n \n def validate_color_for_prop_cycle(s):\n-    # N-th color cycle syntax can't go into the color cycle.\n-    if isinstance(s, str) and re.match(\"^C[0-9]$\", s):\n-        raise ValueError(f\"Cannot put cycle reference ({s!r}) in prop_cycler\")\n     return validate_color(s)\n \n \n"}
{"instance_id":"matplotlib__matplotlib-24177","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 2412f815cd..7a7c29a038 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6886,9 +6886,9 @@ such objects\n             for patch_list in patches:\n                 for patch in patch_list:\n                     if orientation == 'vertical':\n-                        patch.sticky_edges.y.append(0)\n+                        patch.sticky_edges.y.append(np.min(bottom))\n                     elif orientation == 'horizontal':\n-                        patch.sticky_edges.x.append(0)\n+                        patch.sticky_edges.x.append(np.min(bottom))\n \n             # we return patches, so put it back in the expected order\n             patches.reverse()\n"}
{"instance_id":"matplotlib__matplotlib-24570","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 3a506543ac..059a6c8ae3 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -166,10 +166,10 @@ def _get_aligned_offsets(hd_list, height, align=\"baseline\"):\n         descent = max(d for h, d in hd_list)\n         height = height_descent + descent\n         offsets = [0. for h, d in hd_list]\n-    elif align in [\"left\", \"top\"]:\n+    elif align in [\"left\", \"bottom\"]:\n         descent = 0.\n         offsets = [d for h, d in hd_list]\n-    elif align in [\"right\", \"bottom\"]:\n+    elif align in [\"right\", \"top\"]:\n         descent = 0.\n         offsets = [height - h + d for h, d in hd_list]\n     elif align == \"center\":\n"}
{"instance_id":"matplotlib__matplotlib-24627","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 99577ece53..60680a9757 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -233,6 +233,10 @@ class Artist:\n         # be no distinction between axes.add_line, axes.add_patch, etc.\n         # TODO: add legend support\n \n+    def unset_parent_references(self):\n+        \"\"\"Unset the artist's references to axes and figure.\"\"\"\n+        self.axes = None\n+        self.figure = None\n     def have_units(self):\n         \"\"\"Return whether units are set on any axis.\"\"\"\n         ax = self.axes\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 90b0bf117e..5595db46a4 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1392,6 +1392,10 @@ class _AxesBase(martist.Artist):\n \n         self.stale = True\n \n+        for artist in self.get_children():\n+            artist.axes = None\n+        for artist in self.get_children():\n+            artist.unset_parent_references()\n     def clear(self):\n         \"\"\"Clear the Axes.\"\"\"\n         # Act as an alias, or as the superclass implementation depending on the\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 6c18ba1a64..03194f1e4a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -962,6 +962,8 @@ default: %(va)s\n         self._supylabel = None\n \n         self.stale = True\n+        for artist in self.get_children():\n+            artist.figure = None\n \n     # synonym for `clear`.\n     def clf(self, keep_observers=False):\n"}
{"instance_id":"matplotlib__matplotlib-24637","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/backends/backend_svg.py b/lib/matplotlib/backends/backend_svg.py\nindex 03b376a698..9a007b0405 100644\n--- a/lib/matplotlib/backends/backend_svg.py\n+++ b/lib/matplotlib/backends/backend_svg.py\n@@ -963,11 +963,13 @@ class RendererSVG(RendererBase):\n             self.writer.start('g', **clip_attrs)\n \n         url = gc.get_url()\n-        if url is not None:\n-            self.writer.start('a', attrib={'xlink:href': url})\n-\n         attrib = {}\n         oid = gc.get_gid()\n+        if oid is not None:\n+            attrib['id'] = oid\n+        if url is not None:\n+            self.writer.start('a', attrib={'xlink:href': url})\n+            attrib['id'] = oid\n         if mpl.rcParams['svg.image_inline']:\n             buf = BytesIO()\n             Image.fromarray(im).save(buf, format=\"png\")\n@@ -985,6 +987,9 @@ class RendererSVG(RendererBase):\n             Image.fromarray(im).save(filename)\n             oid = oid or 'Im_' + self._make_id('image', filename)\n             attrib['xlink:href'] = filename\n+            Image.fromarray(im).save(filename)\n+            oid = oid or 'Im_' + self._make_id('image', filename)\n+            attrib['xlink:href'] = filename\n         attrib['id'] = oid\n \n         if transform is None:\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd078..05ebfc89a0 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1458,6 +1458,7 @@ or callable, default: value of *xycoords*\n                 self.arrow_patch.figure = self.figure\n             self.arrow_patch.draw(renderer)\n         self.patch.draw(renderer)\n+        self.offsetbox.set_gid(self.get_gid())\n         self.offsetbox.draw(renderer)\n         self.stale = False\n \n"}
{"instance_id":"matplotlib__matplotlib-24870","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 58d9591266..a4328cb710 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6456,6 +6456,10 @@ default: :rc:`scatter.edgecolors`\n         %(contour_doc)s\n         \"\"\"\n         kwargs['filled'] = False\n+        if 'levels' not in kwargs and len(args) > 0:\n+            _Z = args[-1]\n+            if isinstance(_Z, np.ndarray) and _Z.dtype == np.bool_:\n+                kwargs['levels'] = [0.5]\n         contours = mcontour.QuadContourSet(self, *args, **kwargs)\n         self._request_autoscale_view()\n         return contours\ndiff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 144eadeae2..e089cc9865 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1123,7 +1123,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         \"\"\"\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7  # Default, hard-wired.\n+                if self._A.dtype == np.bool_:\n+                    levels_arg = [0.5]\n+                else:\n+                    levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n         else:\n"}
{"instance_id":"matplotlib__matplotlib-25122","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex 3552904c3d..b90c7ada60 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -427,7 +427,7 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n             result /= (np.abs(window)**2).sum()\n         else:\n             # In this case, preserve power in the segment, not amplitude\n-            result /= np.abs(window).sum()**2\n+            result /= window.sum()**2\n \n     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs\n \n"}
{"instance_id":"matplotlib__matplotlib-25287","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex c0e706e2b3..f58336a054 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -969,7 +969,10 @@ class Axis(martist.Artist):\n                     self._major_tick_kw.get('label1On', False)\n                     or self._major_tick_kw.get('label2On', False))\n             if 'labelcolor' in kwtrans:\n-                self.offsetText.set_color(kwtrans['labelcolor'])\n+                labelcolor = kwtrans['labelcolor']\n+                if labelcolor == 'inherit':\n+                    labelcolor = self._major_tick_kw.get('color', 'black')\n+                self.offsetText.set_color(labelcolor)\n \n         self.stale = True\n \n@@ -2255,7 +2258,7 @@ class XAxis(Axis):\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['xtick.labelsize'],\n-            color=mpl.rcParams['xtick.color'],\n+            color=mpl.rcParams['xtick.color'] if mpl.rcParams['xtick.labelcolor'] == 'inherit' else mpl.rcParams['xtick.labelcolor'],\n         )\n         self.offset_text_position = 'bottom'\n \n@@ -2515,7 +2518,7 @@ class YAxis(Axis):\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['ytick.labelsize'],\n-            color=mpl.rcParams['ytick.color'],\n+            color=mpl.rcParams['ytick.color'] if mpl.rcParams['ytick.labelcolor'] == 'inherit' else mpl.rcParams['ytick.labelcolor'],\n         )\n         self.offset_text_position = 'left'\n \n"}
{"instance_id":"matplotlib__matplotlib-25479","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db956..6424bdf2cc 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -145,7 +145,9 @@ class ColormapRegistry(Mapping):\n             _api.warn_external(f\"Overwriting the cmap {name!r} \"\n                                \"that was already in the registry.\")\n \n-        self._cmaps[name] = cmap.copy()\n+        cmap = cmap.copy()\n+        cmap.name = name\n+        self._cmaps[name] = cmap\n \n     def unregister(self, name):\n         \"\"\"\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 58ce4c03fa..9a9a0c080b 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -2278,9 +2278,11 @@ def set_cmap(cmap: Colormap | str) -> None:\n     matplotlib.cm.register_cmap\n     matplotlib.cm.get_cmap\n     \"\"\"\n-    cmap = get_cmap(cmap)\n-\n-    rc('image', cmap=cmap.name)\n+    if isinstance(cmap, str):\n+        rc('image', cmap=cmap)\n+        cmap = get_cmap(cmap)\n+    else:\n+        rc('image', cmap=cmap.name)\n     im = gci()\n \n     if im is not None:\n"}
{"instance_id":"matplotlib__matplotlib-25775","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 4591316cf9..04891edffd 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -186,6 +186,7 @@ class Text(Artist):\n         if linespacing is None:\n             linespacing = 1.2  # Maybe use rcParam later.\n         self.set_linespacing(linespacing)\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self.set_rotation_mode(rotation_mode)\n \n     def update(self, kwargs):\n@@ -738,6 +739,7 @@ class Text(Artist):\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n             self._set_gc_clip(gc)\n+            gc.set_antialiased(self.get_antialiased())\n \n             angle = self.get_rotation()\n \n@@ -1317,6 +1319,27 @@ class Text(Artist):\n         \"\"\"Return whether mathtext parsing is considered for this `Text`.\"\"\"\n         return self._parse_math\n \n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether to use antialiased rendering.\n+\n+        Returns\n+        -------\n+        bool\n+        \"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, aa):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        aa : bool\n+        \"\"\"\n+        self._antialiased = bool(aa)\n+        self.stale = True\n+\n     def set_fontname(self, fontname):\n         \"\"\"\n         Alias for `set_family`.\n"}
{"instance_id":"matplotlib__matplotlib-25960","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..24d92b3e95 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1581,7 +1581,7 @@ default: %(va)s\n             relative height of ``height_ratios[i] / sum(height_ratios)``.\n             If not given, all rows will have the same height.\n         \"\"\"\n-        gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n+        gs = GridSpec(nrows=nrows, ncols=ncols, figure=self.figure,\n                       wspace=wspace, hspace=hspace,\n                       width_ratios=width_ratios,\n                       height_ratios=height_ratios)\n@@ -2274,17 +2274,20 @@ class SubFigure(FigureBase):\n             return\n         # need to figure out *where* this subplotspec is.\n         gs = self._subplotspec.get_gridspec()\n-        wr = np.asarray(gs.get_width_ratios())\n-        hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        fig_bottoms, fig_tops, fig_lefts, fig_rights = gs.get_grid_positions(self.figure)\n+        span = self._subplotspec.rowspan\n+        y0 = fig_bottoms[span.stop - 1]\n+        y1 = fig_tops[span.start]\n+        span = self._subplotspec.colspan\n+        x0 = fig_lefts[span.start]\n+        x1 = fig_rights[span.stop - 1]\n+        dx = x1 - x0\n+        dy = y1 - y0\n         if self.bbox_relative is None:\n             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n         else:\n             self.bbox_relative.p0 = (x0, y0)\n-            self.bbox_relative.p1 = (x0 + dx, y0 + dy)\n+            self.bbox_relative.p1 = (x1, y1)\n \n     def get_constrained_layout(self):\n         \"\"\"\n"}
{"instance_id":"matplotlib__matplotlib-26113","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5369eadbde..46fb698522 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -5014,7 +5014,7 @@ default: :rc:`scatter.edgecolors`\n             if mincnt is None:\n                 mincnt = 0\n             accum = np.array(\n-                [reduce_C_function(acc) if len(acc) > mincnt else np.nan\n+                [reduce_C_function(acc) if len(acc) >= mincnt else np.nan\n                  for Cs_at_i in [Cs_at_i1, Cs_at_i2]\n                  for acc in Cs_at_i[1:]],  # [1:] drops out-of-range points.\n                 float)\n"}
{"instance_id":"matplotlib__matplotlib-26208","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e3232c..839ce9db1d 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2875,7 +2875,7 @@ class _AxesBase(martist.Artist):\n                 # in mutatedx or mutatedy.\n                 return\n             else:\n-                x0, x1 = (-np.inf, np.inf)\n+                x0, x1 = axis.get_view_interval()\n             # If x0 and x1 are nonfinite, get default limits from the locator.\n             locator = axis.get_major_locator()\n             x0, x1 = locator.nonsingular(x0, x1)\ndiff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex c97a21e029..674e024dee 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -124,4 +124,6 @@ def stackplot(axes, x, *args,\n                                    facecolor=next(colors),\n                                    label=next(labels, None),\n                                    **kwargs))\n+    axes.relim()\n+    axes.autoscale_view()\n     return r\n"}
{"instance_id":"matplotlib__matplotlib-26291","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..e1029d1f30 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -70,6 +70,8 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n \n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        if renderer is None and hasattr(ax.figure, '_get_renderer'):\n+            renderer = ax.figure._get_renderer()\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\n"}
{"instance_id":"matplotlib__matplotlib-26342","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 3f84250b64..a4ffb69bbb 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -977,6 +977,18 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n                 self.axes.add_collection(col)\n         return self._old_style_split_collections\n \n+    def set_paths(self, paths):\n+        \"\"\"\n+        Set the paths of this ContourSet.\n+\n+        Parameters\n+        ----------\n+        paths : list of Path\n+            The new paths for the ContourSet.\n+        \"\"\"\n+        self._paths = paths\n+        self.stale = True\n+\n     def get_transform(self):\n         \"\"\"Return the `.Transform` instance used by this ContourSet.\"\"\"\n         if self._transform is None:\n"}
{"instance_id":"matplotlib__matplotlib-26466","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 934c5677ac..6c719661a1 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -705,7 +705,7 @@ class Axes(_AxesBase):\n                  arrowprops=None, annotation_clip=None, **kwargs):\n         # Signature must match Annotation. This is verified in\n         # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n+        a = mtext.Annotation(text, np.copy(xy), xytext=xytext, xycoords=xycoords,\n                              textcoords=textcoords, arrowprops=arrowprops,\n                              annotation_clip=annotation_clip, **kwargs)\n         a.set_transform(mtransforms.IdentityTransform())\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex d575a921ea..7761cb2e81 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -2588,7 +2588,7 @@ def annotate(\n ) -> Annotation:\n     return gca().annotate(\n         text,\n-        xy,\n+        np.copy(xy),\n         xytext=xytext,\n         xycoords=xycoords,\n         textcoords=textcoords,\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..3111d40274 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1811,7 +1811,7 @@ or callable, default: value of *xycoords*\n \n         \"\"\"\n         _AnnotationBase.__init__(self,\n-                                 xy,\n+                                 np.copy(xy),\n                                  xycoords=xycoords,\n                                  annotation_clip=annotation_clip)\n         # warn about wonky input data\n"}
{"instance_id":"mwaskom__seaborn-3069","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..7f4bdbfb 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -25,7 +25,7 @@ from seaborn._marks.base import Mark\n from seaborn._stats.base import Stat\n from seaborn._core.data import PlotData\n from seaborn._core.moves import Move\n-from seaborn._core.scales import Scale\n+from seaborn._core.scales import Scale, Nominal\n from seaborn._core.subplots import Subplots\n from seaborn._core.groupby import GroupBy\n from seaborn._core.properties import PROPERTIES, Property\n@@ -1643,6 +1643,20 @@ class Plotter:\n                     if isinstance(b, str):\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n+                # Adjustments for nominal scales\n+                scale = getattr(ax, f\"{axis}axis\").get_scale()\n+                if isinstance(scale, Nominal):\n+                    # Adjust axis limits to +/- 0.5 from the first and last tick\n+                    lo = lo - 0.5 if lo is not None else None\n+                    hi = hi + 0.5 if hi is not None else None\n+                    ax.set(**{f\"{axis}lim\": (lo, hi)})\n+                    # Invert the axis if it is on the y-axis\n+                    if axis == 'y':\n+                        ax.invert_yaxis()\n+                    # Manage grid visibility according to the theme\n+                    grid_enabled = mpl.rcParams.get('axes.grid', False)\n+                    if not grid_enabled:\n+                        ax.grid(False)\n \n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\ndiff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex bbd71ec1..da87a0a0 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -161,51 +161,39 @@ class Nominal(Scale):\n \n         units_seed = categorical_order(data, new.order)\n \n-        # TODO move to Nominal._get_scale?\n-        # TODO this needs some more complicated rethinking about how to pass\n-        # a unit dictionary down to these methods, along with how much we want\n-        # to invest in their API. What is it useful for tick() to do here?\n-        # (Ordinal may be different if we draw that contrast).\n-        # Any customization we do to allow, e.g., label wrapping will probably\n-        # require defining our own Formatter subclass.\n-        # We could also potentially implement auto-wrapping in an Axis subclass\n-        # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n-\n         class CatScale(mpl.scale.LinearScale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n                 ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+        # Adjust axis limits to +/- 0.5 from the first and last tick\n+        axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n \n         new._matplotlib_scale = mpl_scale\n \n-        # TODO array cast necessary to handle float/int mixture, which we need\n-        # to solve in a more systematic way probably\n-        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n         axis.update_units(stringify(np.array(units_seed)))\n \n-        # TODO define this more centrally\n+        # Add an invisible artist with sticky edges to set the margin to 0\n+        artist = mpl.patches.Rectangle((0, 0), 1, 1, visible=False)\n+        artist.sticky_edges.x.extend([-0.5, len(units_seed) - 0.5])\n+        axis.axes.add_artist(artist)\n+        axis.axes.margins(0)\n+\n+        # Defer to the theme if the user wants to force a grid\n+        grid_enabled = mpl.rcParams.get('axes.grid', False)\n+        if not grid_enabled:\n+            axis.grid(False)\n+\n+        # Invert the axis if it is on the y-axis\n+        if axis.axis_name == 'y':\n+            axis.invert()\n+\n         def convert_units(x):\n-            # TODO only do this with explicit order?\n-            # (But also category dtype?)\n-            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n-            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n-            # keep = x.isin(units_seed)\n             keep = np.array([x_ in units_seed for x_ in x], bool)\n             out = np.full(len(x), np.nan)\n             out[keep] = axis.convert_units(stringify(x[keep]))\n"}
{"instance_id":"mwaskom__seaborn-3187","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..69d75a14 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -647,7 +647,7 @@ class Continuous(ContinuousBase):\n             formatter = EngFormatter(unit, sep=sep)\n \n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True)\n \n         return formatter\n \n"}
{"instance_id":"pallets__flask-5014","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex eb50585d..af58c778 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -190,6 +190,9 @@ class Blueprint(Scaffold):\n             root_path=root_path,\n         )\n \n+        if not name:\n+            raise ValueError(\"Blueprint name cannot be empty.\")\n+\n         if \".\" in name:\n             raise ValueError(\"'name' may not contain a dot '.' character.\")\n \n"}
{"instance_id":"psf__requests-1142","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/adapters.py b/requests/adapters.py\nindex c350ae44..7d9341d5 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -154,6 +154,8 @@ class HTTPAdapter(BaseAdapter):\n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n \n+        if request.method == 'GET' and not request.body:\n+            request.headers.pop('Content-Length', None)\n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n         try:\ndiff --git a/requests/api.py b/requests/api.py\nindex 4a392117..9e5eb0ad 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -52,6 +52,8 @@ def get(url, **kwargs):\n     \"\"\"\n \n     kwargs.setdefault('allow_redirects', True)\n+    if 'headers' in kwargs and not kwargs.get('data') and 'Content-Length' in kwargs['headers']:\n+        del kwargs['headers']['Content-Length']\n     return request('get', url, **kwargs)\n \n \ndiff --git a/requests/models.py b/requests/models.py\nindex 99260453..e207fba5 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -377,7 +377,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                     else:\n                         content_type = 'application/x-www-form-urlencoded'\n \n-            self.prepare_content_length(body)\n+            if not (self.method == 'GET' and body is None):\n+                self.prepare_content_length(body)\n \n             # Add content-type if it wasn't explicitly provided.\n             if (content_type) and (not 'content-type' in self.headers):\n"}
{"instance_id":"psf__requests-1724","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/sessions.py b/requests/sessions.py\nindex cc72f65d..64d90c3c 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -311,7 +311,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"\n         # Create the Request.\n         req = Request(\n-            method = method.upper(),\n+            method = str(method).upper(),\n             url = url,\n             headers = headers,\n             files = files,\n"}
{"instance_id":"psf__requests-1766","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/auth.py b/requests/auth.py\nindex a3de123d..7dcb4543 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -144,7 +144,7 @@ class HTTPDigestAuth(AuthBase):\n         if entdig:\n             base += ', digest=\"%s\"' % entdig\n         if qop:\n-            base += ', qop=auth, nc=%s, cnonce=\"%s\"' % (ncvalue, cnonce)\n+            base += ', qop=\"auth\", nc=%s, cnonce=\"%s\"' % (ncvalue, cnonce)\n \n         return 'Digest %s' % (base)\n \n@@ -192,3 +192,4 @@ class HTTPDigestAuth(AuthBase):\n             pass\n         r.register_hook('response', self.handle_401)\n         return r\n+\n"}
{"instance_id":"psf__requests-1921","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/models.py b/requests/models.py\nindex cd232e68..ee4aa380 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -391,7 +391,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n+            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items() if value is not None)\n         else:\n             self.headers = CaseInsensitiveDict()\n \ndiff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..8bdd5548 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -283,12 +283,13 @@ class Session(SessionRedirectMixin):\n             auth = get_netrc_auth(request.url)\n \n         p = PreparedRequest()\n+        session_headers = {k: v for k, v in self.headers.items() if v is not None}\n         p.prepare(\n             method=request.method.upper(),\n             url=request.url,\n             files=request.files,\n             data=request.data,\n-            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),\n+            headers=merge_setting(request.headers, session_headers, dict_class=CaseInsensitiveDict),\n             params=merge_setting(request.params, self.params),\n             auth=merge_setting(auth, self.auth),\n             cookies=merged_cookies,\n"}
{"instance_id":"psf__requests-2931","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/models.py b/requests/models.py\nindex 9c624d3c..8f4fdacf 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -318,6 +318,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_method(self, method):\n         \"\"\"Prepares the given HTTP method.\"\"\"\n         self.method = method\n+        if isinstance(self.method, bytes):\n+            self.method = self.method.decode('utf-8')\n         if self.method is not None:\n             self.method = to_native_string(self.method.upper())\n \n@@ -326,12 +328,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         #: Accept objects that have string representations.\n         #: We're unable to blindly call unicode/str functions\n         #: as this will include the bytestring indicator (b'')\n-        #: on python 3.x.\n-        #: https://github.com/kennethreitz/requests/pull/2238\n         if isinstance(url, bytes):\n-            url = url.decode('utf8')\n+            url = url.decode('utf-8')\n         else:\n-            url = unicode(url) if is_py2 else str(url)\n+            url = str(url)\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n         # `data` etc to work around exceptions from `url_parse`, which\n@@ -399,7 +399,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n+            self.headers = CaseInsensitiveDict((to_native_string(name) if isinstance(name, bytes) else name, value) for name, value in headers.items())\n         else:\n             self.headers = CaseInsensitiveDict()\n \n@@ -444,10 +444,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 (body, content_type) = self._encode_files(files, data)\n             else:\n                 if data:\n-                    body = self._encode_params(data)\n-                    if isinstance(data, basestring) or hasattr(data, 'read'):\n-                        content_type = None\n+                    if isinstance(data, bytes):\n+                        body = data\n                     else:\n+                        body = self._encode_params(data)\n+                        content_type = None\n                         content_type = 'application/x-www-form-urlencoded'\n \n             self.prepare_content_length(body)\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 132cd2b5..98d80d07 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -689,17 +689,12 @@ def to_native_string(string, encoding='ascii'):\n     string in the native string type, encoding and decoding where necessary.\n     This assumes ASCII unless told otherwise.\n     \"\"\"\n-    out = None\n-\n     if isinstance(string, builtin_str):\n-        out = string\n+        return string\n+    elif isinstance(string, bytes):\n+        return string.decode(encoding, errors='replace')\n     else:\n-        if is_py2:\n-            out = string.encode(encoding)\n-        else:\n-            out = string.decode(encoding)\n-\n-    return out\n+        raise TypeError(\"Expected bytes or string, got {}\".format(type(string)))\n \n \n def urldefragauth(url):\n"}
{"instance_id":"psf__requests-5414","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/adapters.py b/requests/adapters.py\nindex fe22ff45..25a51cb8 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -411,12 +411,13 @@ class HTTPAdapter(BaseAdapter):\n \n         try:\n             conn = self.get_connection(request.url, proxies)\n+            self.cert_verify(conn, request.url, verify, cert)\n+            url = self.request_url(request, proxies)\n+            self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n         except LocationValueError as e:\n             raise InvalidURL(e, request=request)\n-\n-        self.cert_verify(conn, request.url, verify, cert)\n-        url = self.request_url(request, proxies)\n-        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n+        except UnicodeError:\n+            raise InvalidURL('URL has an invalid label.', request=request)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \ndiff --git a/requests/models.py b/requests/models.py\nindex e7d292d5..7b6bb815 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -353,8 +353,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n-        except idna.IDNAError:\n-            raise UnicodeError\n+        except (idna.IDNAError, UnicodeError):\n+            raise InvalidURL('URL has an invalid label.')\n         return host\n \n     def prepare_url(self, url, params):\n@@ -384,6 +384,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             scheme, auth, host, port, path, query, fragment = parse_url(url)\n         except LocationParseError as e:\n             raise InvalidURL(*e.args)\n+        # Check for empty labels in hostname\n+        if host and '.' in host:\n+            labels = host.split('.')\n+            if '' in labels:\n+                raise InvalidURL('URL has an invalid label.')\n \n         if not scheme:\n             error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n@@ -401,8 +406,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         if not unicode_is_ascii(host):\n             try:\n                 host = self._get_idna_encoded_host(host)\n-            except UnicodeError:\n-                raise InvalidURL('URL has an invalid label.')\n+            except InvalidURL:\n+                raise\n         elif host.startswith(u'*'):\n             raise InvalidURL('URL has an invalid label.')\n \n"}
{"instance_id":"psf__requests-6028","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/requests/adapters.py b/requests/adapters.py\nindex fe22ff45..01b80684 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -417,6 +417,11 @@ class HTTPAdapter(BaseAdapter):\n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n+        if proxies:\n+            proxy = select_proxy(request.url, proxies)\n+            if proxy:\n+                proxy_headers = self.proxy_headers(proxy)\n+                request.headers.update(proxy_headers)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \ndiff --git a/requests/auth.py b/requests/auth.py\nindex eeface39..1f64dd95 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -101,7 +101,7 @@ class HTTPProxyAuth(HTTPBasicAuth):\n     \"\"\"Attaches HTTP Proxy Authentication to a given Request object.\"\"\"\n \n     def __call__(self, r):\n-        r.headers['Proxy-Authorization'] = _basic_auth_str(self.username, self.password)\n+        r.headers['Proxy-Authorization'] = _basic_auth_str(self.username, self.password).encode('utf-8').decode('latin1')\n         return r\n \n \ndiff --git a/requests/utils.py b/requests/utils.py\nindex 1c2ae4e0..d6fa47bd 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -990,11 +990,9 @@ def get_auth_from_url(url):\n     \"\"\"\n     parsed = urlparse(url)\n \n-    try:\n-        auth = (unquote(parsed.username), unquote(parsed.password))\n-    except (AttributeError, TypeError):\n-        auth = ('', '')\n-\n+    username = unquote(parsed.username) if parsed.username else ''\n+    password = unquote(parsed.password) if parsed.password else ''\n+    auth = (username, password)\n     return auth\n \n \n"}
{"instance_id":"pydata__xarray-2905","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 45553eb9..3038bbf9 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -218,7 +218,8 @@ def as_compatible_data(data, fastpath=False):\n         data = np.timedelta64(getattr(data, \"value\", data), \"ns\")\n \n     # we don't want nested self-described arrays\n-    data = getattr(data, \"values\", data)\n+    if isinstance(data, (np.ndarray, pd.Series, pd.DataFrame)):\n+        data = getattr(data, \"values\", data)\n \n     if isinstance(data, np.ma.MaskedArray):\n         mask = np.ma.getmaskarray(data)\n@@ -242,6 +243,13 @@ def as_compatible_data(data, fastpath=False):\n                     '\"1\"'\n                 )\n \n+    # preserve objects that should be stored as object arrays\n+    if (\n+        not isinstance(data, np.ndarray)\n+        and hasattr(data, \"__array__\")\n+        and np.array(data, copy=False).dtype == np.dtype(\"O\")\n+    ):\n+        return data\n     # validate whether the data is valid data types.\n     data = np.asarray(data)\n \n"}
{"instance_id":"pydata__xarray-3095","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 379be8f5..5ad87e25 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1917,47 +1917,6 @@ class IndexVariable(Variable):\n \n         return cls(first_var.dims, data, attrs)\n \n-    def copy(self, deep=True, data=None):\n-        \"\"\"Returns a copy of this object.\n-\n-        `deep` is ignored since data is stored in the form of\n-        pandas.Index, which is already immutable. Dimensions, attributes\n-        and encodings are always copied.\n-\n-        Use `data` to create a new object with the same structure as\n-        original but entirely new data.\n-\n-        Parameters\n-        ----------\n-        deep : bool, optional\n-            Deep is ignored when data is given. Whether the data array is\n-            loaded into memory and copied onto the new object. Default is True.\n-        data : array_like, optional\n-            Data to use in the new object. Must have same shape as original.\n-\n-        Returns\n-        -------\n-        object : Variable\n-            New object with dimensions, attributes, encodings, and optionally\n-            data copied from original.\n-        \"\"\"\n-        if data is None:\n-            if deep:\n-                # self._data should be a `PandasIndexAdapter` instance at this\n-                # point, which doesn't have a copy method, so make a deep copy\n-                # of the underlying `pandas.MultiIndex` and create a new\n-                # `PandasIndexAdapter` instance with it.\n-                data = PandasIndexAdapter(self._data.array.copy(deep=True))\n-            else:\n-                data = self._data\n-        else:\n-            data = as_compatible_data(data)\n-            if self.shape != data.shape:\n-                raise ValueError(\"Data shape {} must match shape of object {}\"\n-                                 .format(data.shape, self.shape))\n-        return type(self)(self.dims, data, self._attrs,\n-                          self._encoding, fastpath=True)\n-\n     def equals(self, other, equiv=None):\n         # if equiv is specified, super up\n         if equiv is not None:\n"}
{"instance_id":"pydata__xarray-3151","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903b..5e884932 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -504,11 +504,11 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n         for dim in concatenated.dims:\n             if dim in concatenated:\n                 indexes = concatenated.indexes.get(dim)\n-                if not (indexes.is_monotonic_increasing\n-                        or indexes.is_monotonic_decreasing):\n-                    raise ValueError(\"Resulting object does not have monotonic\"\n-                                     \" global indexes along dimension {}\"\n-                                     .format(dim))\n+                if not indexes.is_monotonic_increasing and not indexes.is_monotonic_decreasing:\n+                    if not all(ds[dim].equals(concatenated[dim]) for ds in datasets):\n+                        raise ValueError(\"Resulting object does not have monotonic\"\n+                                         \" global indexes along dimension {}\"\n+                                         .format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n \n     return merge(concatenated_grouped_by_data_vars, compat=compat,\n"}
{"instance_id":"pydata__xarray-3305","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 807badde..10ff9c57 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -2875,7 +2875,10 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().quantile(\n             q, dim=dim, keep_attrs=keep_attrs, interpolation=interpolation\n         )\n-        return self._from_temp_dataset(ds)\n+        result = self._from_temp_dataset(ds)\n+        if keep_attrs:\n+            result.attrs = self.attrs\n+        return result\n \n     def rank(\n         self, dim: Hashable, pct: bool = False, keep_attrs: bool = None\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 2e9906ce..526a3bef 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1592,7 +1592,7 @@ class Variable(\n         \"\"\"\n         return self.broadcast_equals(other, equiv=duck_array_ops.array_notnull_equiv)\n \n-    def quantile(self, q, dim=None, interpolation=\"linear\"):\n+    def quantile(self, q, dim=None, interpolation=\"linear\", keep_attrs=False):\n         \"\"\"Compute the qth quantile of the data along the specified dimension.\n \n         Returns the qth quantiles(s) of the array elements.\n@@ -1658,7 +1658,8 @@ class Variable(\n         qs = np.nanpercentile(\n             self.data, q * 100.0, axis=axis, interpolation=interpolation\n         )\n-        return Variable(new_dims, qs)\n+        attrs = self.attrs if keep_attrs else None\n+        return Variable(new_dims, qs, attrs=attrs)\n \n     def rank(self, dim, pct=False):\n         \"\"\"Ranks the data.\n"}
{"instance_id":"pydata__xarray-3677","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex ac0a923d..a59a3918 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3604,6 +3604,9 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             If any variables conflict (see ``compat``).\n         \"\"\"\n         _check_inplace(inplace)\n+        from .dataarray import DataArray\n+        if isinstance(other, DataArray):\n+            other = other.to_dataset()\n         merge_result = dataset_merge_method(\n             self,\n             other,\n"}
{"instance_id":"pydata__xarray-3993","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..25162058 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3481,17 +3481,17 @@ class DataArray(AbstractArray, DataWithCoords):\n         return self._from_temp_dataset(ds)\n \n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n         .. note::\n-            This feature is limited to simple cartesian geometry, i.e. dim\n+            This feature is limited to simple cartesian geometry, i.e. coord\n             must be one dimensional.\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3523,14 +3523,13 @@ class DataArray(AbstractArray, DataWithCoords):\n           * x        (x) float64 0.0 0.1 1.1 1.2\n         Dimensions without coordinates: y\n         >>>\n-        >>> da.integrate(\"x\")\n+        >>> da.integrate(coord=\"x\")\n         <xarray.DataArray (y: 3)>\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n-\n     def unify_chunks(self) -> \"DataArray\":\n         \"\"\"Unify chunk size along all chunked dimensions of this DataArray.\n \n"}
{"instance_id":"pydata__xarray-4075","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 996d2e4c..6089a0f4 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,10 @@ class Weighted:\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        # Convert boolean weights to numeric by multiplying by 1\n+        weights = self.weights * 1 if self.weights.dtype == bool else self.weights\n+\n+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n@@ -253,3 +256,4 @@ def _inject_docstring(cls, cls_name):\n \n _inject_docstring(DataArrayWeighted, \"DataArray\")\n _inject_docstring(DatasetWeighted, \"Dataset\")\n+\n"}
{"instance_id":"pydata__xarray-4356","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py\nindex 41c8d258..53384180 100644\n--- a/xarray/core/nanops.py\n+++ b/xarray/core/nanops.py\n@@ -22,17 +22,19 @@ def _replace_nan(a, val):\n     return where_method(val, mask, a), mask\n \n \n-def _maybe_null_out(result, axis, mask, min_count=1):\n+def _maybe_null_out(result, axis, mask, a, min_count=1):\n     \"\"\"\n     xarray version of pandas.core.nanops._maybe_null_out\n     \"\"\"\n-    if hasattr(axis, \"__len__\"):  # if tuple or list\n-        raise ValueError(\n-            \"min_count is not available for reduction with more than one dimensions.\"\n-        )\n-\n     if axis is not None and getattr(result, \"ndim\", False):\n-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n+        if hasattr(axis, \"__len__\"):  # if tuple or list\n+            # Calculate total valid elements across specified dimensions using np.take\n+            total_elements = np.take(a.shape, axis).prod()\n+            valid_counts = total_elements - mask.sum()\n+        else:\n+            # For single dimension, use original logic\n+            valid_counts = mask.shape[axis] - mask.sum(axis)\n+        null_mask = (valid_counts - min_count) < 0\n         if null_mask.any():\n             dtype, fill_value = dtypes.maybe_promote(result.dtype)\n             result = result.astype(dtype)\n@@ -112,7 +114,7 @@ def nansum(a, axis=None, dtype=None, out=None, min_count=None):\n     a, mask = _replace_nan(a, 0)\n     result = _dask_or_eager_func(\"sum\")(a, axis=axis, dtype=dtype)\n     if min_count is not None:\n-        return _maybe_null_out(result, axis, mask, min_count)\n+        return _maybe_null_out(result, axis, mask, a, min_count)\n     else:\n         return result\n \n@@ -182,7 +184,7 @@ def nanprod(a, axis=None, dtype=None, out=None, min_count=None):\n     a, mask = _replace_nan(a, 1)\n     result = _dask_or_eager_func(\"nanprod\")(a, axis=axis, dtype=dtype, out=out)\n     if min_count is not None:\n-        return _maybe_null_out(result, axis, mask, min_count)\n+        return _maybe_null_out(result, axis, mask, a, min_count)\n     else:\n         return result\n \n@@ -197,3 +199,4 @@ def nancumprod(a, axis=None, dtype=None, out=None):\n     return _dask_or_eager_func(\"nancumprod\", eager_module=nputils)(\n         a, axis=axis, dtype=dtype\n     )\n+\n"}
{"instance_id":"pydata__xarray-4629","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex ca4e29b6..dff00804 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -501,7 +501,7 @@ def merge_attrs(variable_attrs, combine_attrs):\n     if combine_attrs == \"drop\":\n         return {}\n     elif combine_attrs == \"override\":\n-        return variable_attrs[0]\n+        return dict(variable_attrs[0])\n     elif combine_attrs == \"no_conflicts\":\n         result = dict(variable_attrs[0])\n         for attrs in variable_attrs[1:]:\n"}
{"instance_id":"pydata__xarray-4687","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 9fe93c88..b1193172 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1727,12 +1727,12 @@ def dot(*arrays, dims=None, **kwargs):\n     return result.transpose(*all_dims, missing_dims=\"ignore\")\n \n \n-def where(cond, x, y):\n+def where(cond, x, y, *, keep_attrs=False):\n     \"\"\"Return elements from `x` or `y` depending on `cond`.\n \n     Performs xarray-like broadcasting across input arguments.\n \n-    All dimension coordinates on `x` and `y`  must be aligned with each\n+    All dimension coordinates on `x` and `y` must be aligned with each\n     other and with `cond`.\n \n     Parameters\n@@ -1740,9 +1740,11 @@ def where(cond, x, y):\n     cond : scalar, array, Variable, DataArray or Dataset\n         When True, return values from `x`, otherwise returns values from `y`.\n     x : scalar, array, Variable, DataArray or Dataset\n-        values to choose from where `cond` is True\n+        Values to choose from where `cond` is True.\n     y : scalar, array, Variable, DataArray or Dataset\n-        values to choose from where `cond` is False\n+        Values to choose from where `cond` is False.\n+    keep_attrs : bool, default: False\n+        If True, the attributes (`attrs`) will be copied from `x` to the result.\n \n     Returns\n     -------\n@@ -1757,50 +1759,23 @@ def where(cond, x, y):\n     ...     dims=[\"lat\"],\n     ...     coords={\"lat\": np.arange(10)},\n     ...     name=\"sst\",\n+    ...     attrs={\"units\": \"degrees C\"},\n     ... )\n     >>> x\n     <xarray.DataArray 'sst' (lat: 10)>\n     array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n     Coordinates:\n       * lat      (lat) int64 0 1 2 3 4 5 6 7 8 9\n+    Attributes:\n+        units:    degrees C\n \n-    >>> xr.where(x < 0.5, x, x * 100)\n+    >>> xr.where(x < 0.5, x, x * 100, keep_attrs=True)\n     <xarray.DataArray 'sst' (lat: 10)>\n     array([ 0. ,  0.1,  0.2,  0.3,  0.4, 50. , 60. , 70. , 80. , 90. ])\n     Coordinates:\n       * lat      (lat) int64 0 1 2 3 4 5 6 7 8 9\n-\n-    >>> y = xr.DataArray(\n-    ...     0.1 * np.arange(9).reshape(3, 3),\n-    ...     dims=[\"lat\", \"lon\"],\n-    ...     coords={\"lat\": np.arange(3), \"lon\": 10 + np.arange(3)},\n-    ...     name=\"sst\",\n-    ... )\n-    >>> y\n-    <xarray.DataArray 'sst' (lat: 3, lon: 3)>\n-    array([[0. , 0.1, 0.2],\n-           [0.3, 0.4, 0.5],\n-           [0.6, 0.7, 0.8]])\n-    Coordinates:\n-      * lat      (lat) int64 0 1 2\n-      * lon      (lon) int64 10 11 12\n-\n-    >>> xr.where(y.lat < 1, y, -1)\n-    <xarray.DataArray (lat: 3, lon: 3)>\n-    array([[ 0. ,  0.1,  0.2],\n-           [-1. , -1. , -1. ],\n-           [-1. , -1. , -1. ]])\n-    Coordinates:\n-      * lat      (lat) int64 0 1 2\n-      * lon      (lon) int64 10 11 12\n-\n-    >>> cond = xr.DataArray([True, False], dims=[\"x\"])\n-    >>> x = xr.DataArray([1, 2], dims=[\"y\"])\n-    >>> xr.where(cond, x, 0)\n-    <xarray.DataArray (x: 2, y: 2)>\n-    array([[1, 2],\n-           [0, 0]])\n-    Dimensions without coordinates: x, y\n+    Attributes:\n+        units:    degrees C\n \n     See Also\n     --------\n@@ -1817,9 +1792,9 @@ def where(cond, x, y):\n         join=\"exact\",\n         dataset_join=\"exact\",\n         dask=\"allowed\",\n+        keep_attrs=keep_attrs,\n     )\n \n-\n def polyval(coord, coeffs, degree_dim=\"degree\"):\n     \"\"\"Evaluate a polynomial at specific values\n \n"}
{"instance_id":"pydata__xarray-4695","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 32b24ef1..cc6bde67 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1118,7 +1118,7 @@ class DataArray(AbstractArray, DataWithCoords):\n     def sel(\n         self,\n         indexers: Mapping[Hashable, Any] = None,\n-        method: str = None,\n+        selection_method: str = None,\n         tolerance=None,\n         drop: bool = False,\n         **indexers_kwargs: Any,\n@@ -1161,7 +1161,7 @@ class DataArray(AbstractArray, DataWithCoords):\n             If DataArrays are passed as indexers, xarray-style indexing will be\n             carried out. See :ref:`indexing` for the details.\n             One of indexers or indexers_kwargs must be provided.\n-        method : {None, \"nearest\", \"pad\", \"ffill\", \"backfill\", \"bfill\"}, optional\n+        selection_method : {None, \"nearest\", \"pad\", \"ffill\", \"backfill\", \"bfill\"}, optional\n             Method to use for inexact matches:\n \n             * None (default): only exact matches\n@@ -1199,12 +1199,11 @@ class DataArray(AbstractArray, DataWithCoords):\n         ds = self._to_temp_dataset().sel(\n             indexers=indexers,\n             drop=drop,\n-            method=method,\n+            selection_method=selection_method,\n             tolerance=tolerance,\n             **indexers_kwargs,\n         )\n         return self._from_temp_dataset(ds)\n-\n     def head(\n         self,\n         indexers: Union[Mapping[Hashable, int], int] = None,\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex dbac288c..2607c813 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -2161,7 +2161,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n     def sel(\n         self,\n         indexers: Mapping[Hashable, Any] = None,\n-        method: str = None,\n+        selection_method: str = None,\n         tolerance: Number = None,\n         drop: bool = False,\n         **indexers_kwargs: Any,\n@@ -2192,7 +2192,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             If DataArrays are passed as indexers, xarray-style indexing will be\n             carried out. See :ref:`indexing` for the details.\n             One of indexers or indexers_kwargs must be provided.\n-        method : {None, \"nearest\", \"pad\", \"ffill\", \"backfill\", \"bfill\"}, optional\n+        selection_method : {None, \"nearest\", \"pad\", \"ffill\", \"backfill\", \"bfill\"}, optional\n             Method to use for inexact matches:\n \n             * None (default): only exact matches\n@@ -2221,7 +2221,6 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             in this dataset, unless vectorized indexing was triggered by using\n             an array indexer, in which case the data will be a copy.\n \n-\n         See Also\n         --------\n         Dataset.isel\n@@ -2229,7 +2228,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         \"\"\"\n         indexers = either_dict_or_kwargs(indexers, indexers_kwargs, \"sel\")\n         pos_indexers, new_indexes = remap_label_indexers(\n-            self, indexers=indexers, method=method, tolerance=tolerance\n+            self, indexers=indexers, fill_method=selection_method, tolerance=tolerance\n         )\n         result = self.isel(indexers=pos_indexers, drop=drop)\n         return result._overwrite_indexes(new_indexes)\ndiff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 843feb04..f461b17a 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -240,13 +240,13 @@ def get_dim_indexers(data_obj, indexers):\n     return dim_indexers\n \n \n-def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):\n+def remap_label_indexers(data_obj, indexers, fill_method=None, tolerance=None):\n     \"\"\"Given an xarray data object and label based indexers, return a mapping\n     of equivalent location based indexers. Also return a mapping of updated\n     pandas index objects (in case of multi-index level drop).\n     \"\"\"\n-    if method is not None and not isinstance(method, str):\n-        raise TypeError(\"``method`` must be a string\")\n+    if fill_method is not None and not isinstance(fill_method, str):\n+        raise TypeError(\"``fill_method`` must be a string\")\n \n     pos_indexers = {}\n     new_indexes = {}\n@@ -257,9 +257,9 @@ def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):\n             index = data_obj.indexes[dim]\n         except KeyError:\n             # no index for this dimension: reuse the provided labels\n-            if method is not None or tolerance is not None:\n+            if fill_method is not None or tolerance is not None:\n                 raise ValueError(\n-                    \"cannot supply ``method`` or ``tolerance`` \"\n+                    \"cannot supply ``fill_method`` or ``tolerance`` \"\n                     \"when the indexed dimension does not have \"\n                     \"an associated coordinate.\"\n                 )\n@@ -267,11 +267,15 @@ def remap_label_indexers(data_obj, indexers, method=None, tolerance=None):\n         else:\n             coords_dtype = data_obj.coords[dim].dtype\n             label = maybe_cast_to_coords_dtype(label, coords_dtype)\n-            idxr, new_idx = convert_label_indexer(index, label, dim, method, tolerance)\n+            idxr, new_idx = convert_label_indexer(index, label, dim, fill_method, tolerance)\n             pos_indexers[dim] = idxr\n             if new_idx is not None:\n                 new_indexes[dim] = new_idx\n \n+    return pos_indexers, new_indexes\n+            if new_idx is not None:\n+                new_indexes[dim] = new_idx\n+\n     return pos_indexers, new_indexes\n \n \n"}
{"instance_id":"pydata__xarray-4966","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py\nindex b035ff82..938752c4 100644\n--- a/xarray/coding/variables.py\n+++ b/xarray/coding/variables.py\n@@ -316,6 +316,14 @@ class UnsignedIntegerCoder(VariableCoder):\n                     if \"_FillValue\" in attrs:\n                         new_fill = unsigned_dtype.type(attrs[\"_FillValue\"])\n                         attrs[\"_FillValue\"] = new_fill\n+            elif data.dtype.kind == \"u\":\n+                if unsigned == \"false\":\n+                    signed_dtype = np.dtype(\"i%s\" % data.dtype.itemsize)\n+                    transform = partial(np.asarray, dtype=signed_dtype)\n+                    data = lazy_elemwise_func(data, transform, signed_dtype)\n+                    if \"_FillValue\" in attrs:\n+                        new_fill = signed_dtype.type(attrs[\"_FillValue\"])\n+                        attrs[\"_FillValue\"] = new_fill\n             else:\n                 warnings.warn(\n                     \"variable %r has _Unsigned attribute but is not \"\n"}
{"instance_id":"pydata__xarray-6461","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 7676d8e5..885c1b51 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1829,7 +1829,7 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: attrs[1]\n+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else {}\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n"}
{"instance_id":"pydata__xarray-6599","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..53cc57b2 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1933,7 +1933,7 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1941,10 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(\n+                data=x.data.astype(\"timedelta64[ns]\").astype(np.float64)\n+            )\n         return x\n \n     if isinstance(data, Dataset):\n"}
{"instance_id":"pydata__xarray-6721","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/backends/zarr.py b/xarray/backends/zarr.py\nindex a73483b4..dbff3611 100644\n--- a/xarray/backends/zarr.py\n+++ b/xarray/backends/zarr.py\n@@ -84,6 +84,9 @@ class ZarrArrayWrapper(BackendArray):\n         # if self.ndim == 0:\n         # could possibly have a work-around for 0d data here\n \n+    @property\n+    def chunks(self):\n+        return self.get_array().chunks\n \n def _determine_zarr_chunks(enc_chunks, var_chunks, ndim, name, safe_chunks):\n     \"\"\"\ndiff --git a/xarray/core/common.py b/xarray/core/common.py\nindex 3c328f42..5101b5fe 100644\n--- a/xarray/core/common.py\n+++ b/xarray/core/common.py\n@@ -2023,7 +2023,7 @@ def get_chunksizes(\n \n     chunks: dict[Any, tuple[int, ...]] = {}\n     for v in variables:\n-        if hasattr(v.data, \"chunks\"):\n+        if hasattr(v._data, \"chunks\"):  # Check if variable is backed by dask\n             for dim, c in v.chunksizes.items():\n                 if dim in chunks and c != chunks[dim]:\n                     raise ValueError(\n@@ -2031,6 +2031,16 @@ def get_chunksizes(\n                         \"This can be fixed by calling unify_chunks().\"\n                     )\n                 chunks[dim] = c\n+        elif hasattr(v._data, 'encoding') and 'chunks' in v._data.encoding:\n+            encoding_chunks = v._data.encoding.get('chunks')\n+            if encoding_chunks is not None:\n+                for dim, c in zip(v.dims, encoding_chunks):\n+                    if dim in chunks and c != chunks[dim]:\n+                        raise ValueError(\n+                            f\"Object has inconsistent chunks along dimension {dim}. \"\n+                            \"This can be fixed by calling unify_chunks().\"\n+                        )\n+                    chunks[dim] = c\n     return Frozen(chunks)\n \n \ndiff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex cbbd507e..5ab787fc 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -20,6 +20,7 @@ from .options import OPTIONS\n from .pycompat import dask_version, integer_types, is_duck_dask_array, sparse_array_type\n from .types import T_Xarray\n from .utils import either_dict_or_kwargs, get_valid_numpy_dtype\n+from .utils import Frozen\n \n if TYPE_CHECKING:\n     from .indexes import Index\n@@ -511,6 +512,16 @@ class LazilyIndexedArray(ExplicitlyIndexedNDArrayMixin):\n             elif isinstance(k, np.ndarray):\n                 shape.append(k.size)\n         return tuple(shape)\n+    @property\n+    def chunks(self):\n+        chunks = {}\n+        for i, k in enumerate(self.key.tuple):\n+            if isinstance(k, slice):\n+                if hasattr(self.array, 'chunks') and self.array.chunks is not None:\n+                    chunks[self.array.dims[i]] = self.array.chunksizes[self.array.dims[i]]\n+                elif hasattr(self.array, 'encoding') and 'chunks' in self.array.encoding:\n+                    chunks[self.array.dims[i]] = self.array.encoding['chunks'][i]\n+        return Frozen(chunks) if chunks else None\n \n     def __array__(self, dtype=None):\n         array = as_indexable(self.array)\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 2d115ff0..ef0b8ea8 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -985,18 +985,21 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):\n     __hash__ = None  # type: ignore[assignment]\n \n     @property\n-    def chunks(self) -> tuple[tuple[int, ...], ...] | None:\n+    def chunks(self):\n         \"\"\"\n         Tuple of block lengths for this dataarray's data, in order of dimensions, or None if\n         the underlying data is not a dask array.\n-\n         See Also\n         --------\n         Variable.chunk\n         Variable.chunksizes\n         xarray.unify_chunks\n         \"\"\"\n-        return getattr(self._data, \"chunks\", None)\n+        if hasattr(self._data, 'chunks'):\n+            return self._data.chunks\n+        elif hasattr(self._data, 'encoding') and 'chunks' in self._data.encoding:\n+            return tuple(self._data.encoding.get('chunks'))\n+        return None\n \n     @property\n     def chunksizes(self) -> Mapping[Any, tuple[int, ...]]:\n"}
{"instance_id":"pydata__xarray-6744","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex aef290f6..5955f04d 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,9 +270,29 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n+\n+        window_size = int(self.window[0])\n+        array_size = len(self.window_labels)\n+\n+        if self.center[0]:\n+            # For centered windows, shift by (window_size - 1) // 2\n+            offset = (window_size - 1) // 2\n+            stops = np.arange(1, array_size + 1)\n+            starts = stops - window_size\n+\n+            # Adjust starts and stops for centering\n+            starts = starts + offset\n+            stops = stops + offset\n+\n+            # Handle boundary conditions\n+            starts = np.clip(starts, 0, array_size)\n+            stops = np.clip(stops, 0, array_size)\n+        else:\n+            # Original behavior for non-centered windows\n+            stops = np.arange(1, array_size + 1)\n+            starts = stops - window_size\n+            starts[: window_size] = 0\n+\n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n"}
{"instance_id":"pydata__xarray-6938","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 9dfdb660..1f397447 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -2097,7 +2097,7 @@ class DataArray(\n         Dataset.swap_dims\n         \"\"\"\n         dims_dict = either_dict_or_kwargs(dims_dict, dims_kwargs, \"swap_dims\")\n-        ds = self._to_temp_dataset().swap_dims(dims_dict)\n+        ds = self._to_temp_dataset().copy(deep=True).swap_dims(dims_dict)\n         return self._from_temp_dataset(ds)\n \n     # change type of self and return to T_DataArray once\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c775d05c..20cb0f10 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3767,12 +3767,14 @@ class Dataset(\n         coord_names = self._coord_names.copy()\n         coord_names.update({dim for dim in dims_dict.values() if dim in self.variables})\n \n+        variables: dict[Hashable, Variable] = {}\n+        indexes: dict[Hashable, Index] = {}\n         variables: dict[Hashable, Variable] = {}\n         indexes: dict[Hashable, Index] = {}\n         for k, v in self.variables.items():\n             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)\n             if k in result_dims:\n-                var = v.to_index_variable()\n+                var = v.to_index_variable().copy(deep=True)\n                 var.dims = dims\n                 if k in self._indexes:\n                     indexes[k] = self._indexes[k]\n@@ -3783,10 +3785,9 @@ class Dataset(\n                     variables.update(index_vars)\n                     coord_names.update(index_vars)\n             else:\n-                var = v.to_base_variable()\n+                var = v.to_base_variable().copy(deep=True)\n                 var.dims = dims\n                 variables[k] = var\n-\n         return self._replace_with_new_dims(variables, coord_names, indexes=indexes)\n \n     # change type of self and return to T_Dataset once\n"}
{"instance_id":"pydata__xarray-6992","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 620f32f8..3da0edcf 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -362,10 +362,11 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n             key\n             for key in self._dataset._variables\n             if key not in self._dataset._coord_names\n+            and key not in self._dataset._indexes.keys()\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return len(set(self._dataset._variables) - self._dataset._coord_names - set(self._dataset._indexes.keys()))\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n"}
{"instance_id":"pydata__xarray-7229","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..753d13f3 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1857,13 +1857,9 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n-    if keep_attrs is True:\n-        # keep the attributes of x, the second parameter, by default to\n-        # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n \n     # alignment for three arguments is complicated, so don't support it yet\n-    return apply_ufunc(\n+    result = apply_ufunc(\n         duck_array_ops.where,\n         cond,\n         x,\n@@ -1873,6 +1869,11 @@ def where(cond, x, y, keep_attrs=None):\n         dask=\"allowed\",\n         keep_attrs=keep_attrs,\n     )\n+    if keep_attrs:\n+        for coord in result.coords:\n+            if coord in x.coords:\n+                result.coords[coord].attrs = x.coords[coord].attrs\n+    return result\n \n \n @overload\n"}
{"instance_id":"pydata__xarray-7233","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex c194ec08..11a07aac 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -973,7 +973,8 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):\n             else:\n                 reshaped[key] = var\n \n-        should_be_coords = set(window_dim) & set(self.obj.coords)\n+        # Preserve all original coordinates, not just those being coarsened\n+        should_be_coords = set(self.obj.coords)\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n"}
{"instance_id":"pydata__xarray-7393","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex f3f03c94..d646ddc0 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -829,9 +829,10 @@ class PandasMultiIndex(PandasIndex):\n                 level = None\n                 dtype = None\n             else:\n-                level = name\n-                dtype = self.level_coords_dtype[name]\n-\n+                if var is not None:\n+                    dtype = var.dtype\n+                else:\n+                    dtype = self.level_coords_dtype[name]\n             var = variables.get(name, None)\n             if var is not None:\n                 attrs = var.attrs\ndiff --git a/xarray/core/utils.py b/xarray/core/utils.py\nindex 86c644de..14de8766 100644\n--- a/xarray/core/utils.py\n+++ b/xarray/core/utils.py\n@@ -112,6 +112,8 @@ def get_valid_numpy_dtype(array: np.ndarray | pd.Index):\n     elif hasattr(array, \"categories\"):\n         # category isn't a real numpy dtype\n         dtype = array.categories.dtype  # type: ignore[union-attr]\n+    elif np.issubdtype(array.dtype, np.integer):\n+        dtype = array.dtype\n     elif not is_valid_numpy_dtype(array.dtype):\n         dtype = np.dtype(\"O\")\n     else:\n"}
{"instance_id":"pylint-dev__pylint-4551","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/checkers/classes.py b/pylint/checkers/classes.py\nindex 4d86a6bbb..14788efe6 100644\n--- a/pylint/checkers/classes.py\n+++ b/pylint/checkers/classes.py\n@@ -854,6 +854,12 @@ a metaclass class method.\",\n                 self.add_message(\"no-init\", args=node, node=node)\n         self._check_slots(node)\n         self._check_proper_bases(node)\n+        # Extract type hints from class attributes\n+        for attr_name, assignments in node.instance_attrs.items():\n+            for assignment in assignments:\n+                if hasattr(assignment, 'annotation') and assignment.annotation:\n+                    attr_type = assignment.annotation.as_string()\n+                    # Store or process the type hint as needed\n         self._check_consistent_mro(node)\n \n     def _check_consistent_mro(self, node):\ndiff --git a/pylint/pyreverse/diadefslib.py b/pylint/pyreverse/diadefslib.py\nindex 5d803c929..22816b76e 100644\n--- a/pylint/pyreverse/diadefslib.py\n+++ b/pylint/pyreverse/diadefslib.py\n@@ -81,10 +81,20 @@ class DiaDefGenerator:\n         return node.root().name != BUILTINS_NAME\n \n     def add_class(self, node):\n-        \"\"\"visit one class and add it to diagram\"\"\"\n+        \"\"\"Visit one class and add it to diagram, including type hints.\"\"\"\n         self.linker.visit(node)\n+        # Extract type hints from class attributes\n+        attributes = {}\n+        for attr_name, assignments in node.instance_attrs.items():\n+            for assignment in assignments:\n+                if hasattr(assignment, 'annotation') and assignment.annotation:\n+                    attr_type = assignment.annotation.as_string()\n+                else:\n+                    attr_type = 'Unknown'\n+                attributes[attr_name] = attr_type\n+        # Store type hints in the class node for later use\n+        node._type_hints = attributes\n         self.classdiagram.add_object(self.get_title(node), node)\n-\n     def get_ancestors(self, node, level):\n         \"\"\"return ancestor nodes of a class node\"\"\"\n         if level == 0:\ndiff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 8fa122022..e786173d8 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -165,7 +165,11 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n         for assignattrs in node.instance_attrs.values():\n             for assignattr in assignattrs:\n                 if not isinstance(assignattr, astroid.Unknown):\n-                    self.handle_assignattr_type(assignattr, node)\n+                    if hasattr(assignattr, 'annotation') and assignattr.annotation:\n+                        attr_type = assignattr.annotation.as_string()\n+                        node.instance_attrs_type[assignattr.attrname].append(attr_type)\n+                    else:\n+                        self.handle_assignattr_type(assignattr, node)\n         # resolve implemented interface\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\ndiff --git a/pylint/pyreverse/writer.py b/pylint/pyreverse/writer.py\nindex 0d80bb9ca..d6241c178 100644\n--- a/pylint/pyreverse/writer.py\n+++ b/pylint/pyreverse/writer.py\n@@ -92,8 +92,26 @@ class DiagramWriter:\n \n     def get_values(self, obj):\n         \"\"\"get label and shape for classes.\"\"\"\n-        raise NotImplementedError\n-\n+        label = obj.title\n+        if obj.shape == \"interface\":\n+            label = \"«interface»\\\\n%s\" % label\n+        if not self.config.only_classnames:\n+            # Retrieve attributes with type hints\n+            attrs = []\n+            for attr in obj.attrs:\n+                if hasattr(obj.node, '_type_hints'):\n+                    attr_type = obj.node._type_hints.get(attr, 'Unknown')\n+                else:\n+                    attr_type = 'Unknown'\n+                attrs.append(f\"{attr} : {attr_type}\")\n+            label = r\"{}|{}\\l|\".format(label, r\"\\l\".join(attrs))\n+            for func in obj.methods:\n+                if func.args.args:\n+                    args = [arg.name for arg in func.args.args if arg.name != \"self\"]\n+                else:\n+                    args = []\n+                label = r\"{}{}({})\\l\".format(label, func.name, \", \".join(args))\n+            label = \"{%s}\" % label\n     def close_graph(self):\n         \"\"\"finalize the graph\"\"\"\n         raise NotImplementedError\n@@ -123,27 +141,6 @@ class DotWriter(DiagramWriter):\n         \"\"\"get project title\"\"\"\n         return obj.title\n \n-    def get_values(self, obj):\n-        \"\"\"get label and shape for classes.\n-\n-        The label contains all attributes and methods\n-        \"\"\"\n-        label = obj.title\n-        if obj.shape == \"interface\":\n-            label = \"«interface»\\\\n%s\" % label\n-        if not self.config.only_classnames:\n-            label = r\"{}|{}\\l|\".format(label, r\"\\l\".join(obj.attrs))\n-            for func in obj.methods:\n-                if func.args.args:\n-                    args = [arg.name for arg in func.args.args if arg.name != \"self\"]\n-                else:\n-                    args = []\n-                label = r\"{}{}({})\\l\".format(label, func.name, \", \".join(args))\n-            label = \"{%s}\" % label\n-        if is_exception(obj.node):\n-            return dict(fontcolor=\"red\", label=label, shape=\"record\")\n-        return dict(label=label, shape=\"record\")\n-\n     def close_graph(self):\n         \"\"\"print the dot graph into <file_name>\"\"\"\n         self.printer.generate(self.file_name)\n@@ -216,3 +213,4 @@ class VCGWriter(DiagramWriter):\n         \"\"\"close graph and file\"\"\"\n         self.printer.close_graph()\n         self.graph_file.close()\n+\n"}
{"instance_id":"pylint-dev__pylint-4604","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..1c5761006 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2043,11 +2043,15 @@ class VariablesChecker(BaseChecker):\n                         # Filter special objects (__doc__, __all__) etc.,\n                         # because they can be imported for exporting.\n                         continue\n-\n-                    if is_type_annotation_import:\n-                        # Most likely a typing import if it wasn't used so far.\n+                    if not is_type_annotation_import:\n+                        self.add_message(\n+                            \"unused-import\",\n+                            args=real_name,\n+                            node=stmt,\n+                        )\n+                        continue\n+                    if as_name == \"_\":\n                         continue\n-\n                     if as_name == \"_\":\n                         continue\n                     if as_name is None:\n"}
{"instance_id":"pylint-dev__pylint-4661","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py\nindex 84774d0e3..2a1f90d9f 100644\n--- a/pylint/config/__init__.py\n+++ b/pylint/config/__init__.py\n@@ -28,7 +28,7 @@\n # Copyright (c) 2019 Ashley Whetter <ashley@awhetter.co.uk>\n # Copyright (c) 2019 Hugo van Kemenade <hugovk@users.noreply.github.com>\n # Copyright (c) 2021 Marc Mueller <30130371+cdce8p@users.noreply.github.com>\n-\n+#\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n \n@@ -60,10 +60,14 @@ if \"PYLINTHOME\" in os.environ:\n     PYLINT_HOME = os.environ[\"PYLINTHOME\"]\n     if USER_HOME == \"~\":\n         USER_HOME = os.path.dirname(PYLINT_HOME)\n-elif USER_HOME == \"~\":\n-    PYLINT_HOME = \".pylint.d\"\n else:\n-    PYLINT_HOME = os.path.join(USER_HOME, \".pylint.d\")\n+    XDG_DATA_HOME = os.environ.get(\"XDG_DATA_HOME\")\n+    if XDG_DATA_HOME:\n+        PYLINT_HOME = os.path.join(XDG_DATA_HOME, \"pylint\")\n+    elif USER_HOME != \"~\":\n+        PYLINT_HOME = os.path.join(USER_HOME, \".local\", \"share\", \"pylint\")\n+    else:\n+        PYLINT_HOME = \".pylint.d\"\n \n \n def _get_pdata_path(base_name, recurs):\n@@ -99,7 +103,6 @@ def find_pylintrc():\n     for config_file in find_default_config_files():\n         if config_file.endswith(\"pylintrc\"):\n             return config_file\n-\n     return None\n \n \n@@ -110,11 +113,10 @@ ENV_HELP = (\n The following environment variables are used:\n     * PYLINTHOME\n     Path to the directory where persistent data for the run will be stored. If\n-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working\n-directory).\n+not set, it defaults to $XDG_DATA_HOME/pylint (usually ~/.local/share/pylint).\n     * PYLINTRC\n     Path to the configuration file. See the documentation for the method used\n to search for configuration file.\n \"\"\"\n-    % globals()  # type: ignore\n )\n+\n"}
{"instance_id":"pylint-dev__pylint-4970","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex c65b1c893..27a6ed7fe 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -393,6 +393,8 @@ class Similar:\n         self._display_sims(self._compute_sims())\n \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n+        if self.min_lines == 0:\n+            return []\n         \"\"\"compute similarities in appended files\"\"\"\n         no_duplicates: Dict[int, List[Set[LinesChunkLimits_T]]] = defaultdict(list)\n \ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 59276a50a..2716c7c44 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -657,6 +657,9 @@ class PyLinter(\n             if self._reporters:\n                 self._load_reporters()\n \n+        elif optname == \"min-similarity-lines\":\n+            if int(value) == 0:\n+                self.disable('similar')\n         try:\n             checkers.BaseTokenChecker.set_option(self, optname, value, action, optdict)\n         except config.UnsupportedAction:\n"}
{"instance_id":"pylint-dev__pylint-6386","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py\nindex c793cc85a..e3c287da4 100644\n--- a/pylint/lint/base_options.py\n+++ b/pylint/lint/base_options.py\n@@ -538,7 +538,7 @@ def _make_run_options(self: Run) -> Options:\n         (\n             \"verbose\",\n             {\n-                \"action\": _DoNothingAction,\n+                \"action\": \"store_true\",\n                 \"kwargs\": {},\n                 \"short\": \"v\",\n                 \"help\": \"In verbose mode, extra non-checker-related info \"\n"}
{"instance_id":"pylint-dev__pylint-6528","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex b20cd873c..9d879195d 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -128,11 +128,15 @@ def expand_modules(\n             ):\n                 if filepath == subfilepath:\n                     continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n+                subbasename = os.path.basename(subfilepath)\n+                if (\n+                    subbasename in ignore_list\n+                    or _is_in_ignore_list_re(subbasename, ignore_list_re)\n+                    or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re)\n+                ):\n                     continue\n \n+\n                 modpath = _modpath_from_file(\n                     subfilepath, is_namespace, path=additional_search_path\n                 )\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..f49202eb6 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -577,7 +577,13 @@ class PyLinter(\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n-                        # Skip subtree of already discovered package.\n+                        continue\n+                    basename = os.path.basename(root)\n+                    if (\n+                        basename in self.config.ignore\n+                        or _is_in_ignore_list_re(basename, self.config.ignore_patterns)\n+                        or _is_in_ignore_list_re(root, self._ignore_paths)\n+                    ):\n                         continue\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n@@ -587,9 +593,13 @@ class PyLinter(\n                             os.path.join(root, file)\n                             for file in files\n                             if file.endswith(\".py\")\n+                            and file not in self.config.ignore\n+                            and not _is_in_ignore_list_re(file, self.config.ignore_patterns)\n                         )\n             else:\n                 yield something\n+            else:\n+                yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n@@ -725,14 +735,12 @@ class PyLinter(\n \n     def _iterate_file_descrs(\n         self, files_or_modules: Sequence[str]\n-    ) -> Iterator[FileItem]:\n-        \"\"\"Return generator yielding file descriptions (tuples of module name, file path, base name).\n-\n-        The returned generator yield one item for each Python module that should be linted.\n-        \"\"\"\n-        for descr in self._expand_files(files_or_modules):\n-            name, filepath, is_arg = descr[\"name\"], descr[\"path\"], descr[\"isarg\"]\n-            if self.should_analyze_file(name, filepath, is_argument=is_arg):\n+        result, errors = expand_modules(\n+            modules,\n+            self.config.ignore,\n+            self.config.ignore_patterns,\n+            self._ignore_paths,\n+        )\n                 yield FileItem(name, filepath, descr[\"basename\"])\n \n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n"}
{"instance_id":"pylint-dev__pylint-6903","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex a7e5d5574..942933677 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -58,6 +58,8 @@ def _query_cpu() -> int | None:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n         avail_cpu = int(cpu_shares / 1024)\n+    if avail_cpu is not None and avail_cpu < 1:\n+        avail_cpu = 1\n     return avail_cpu\n \n \n@@ -230,3 +232,4 @@ class _PylintConfigRun(Run):\n \n     Used by _PylintConfigRun to make the 'pylint-config' command work.\n     \"\"\"\n+\n"}
{"instance_id":"pylint-dev__pylint-7277","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..403411cb0 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -86,7 +86,7 @@ def modify_sys_path() -> None:\n     stdlib or pylint's own modules.\n     CPython issue: https://bugs.python.org/issue33053\n \n-    - Remove the first entry. This will always be either \"\" or the working directory\n+    - Remove the first entry only if it is \"\", \".\" or the working directory\n     - Remove the working directory from the second and third entries\n       if PYTHONPATH includes a \":\" at the beginning or the end.\n       https://github.com/PyCQA/pylint/issues/3636\n@@ -96,7 +96,8 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+    if sys.path[0] in (\"\", \".\", os.getcwd()):\n+        sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n@@ -106,3 +107,4 @@ def modify_sys_path() -> None:\n \n \n version = __version__\n+\n"}
{"instance_id":"pylint-dev__pylint-8898","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/pylint/checkers/base/name_checker/checker.py b/pylint/checkers/base/name_checker/checker.py\nindex 42a7c6b2e..5c5c6bf2b 100644\n--- a/pylint/checkers/base/name_checker/checker.py\n+++ b/pylint/checkers/base/name_checker/checker.py\n@@ -29,7 +29,7 @@ from pylint.checkers.base.name_checker.naming_style import (\n     _create_naming_options,\n )\n from pylint.checkers.utils import is_property_deleter, is_property_setter\n-from pylint.typing import Options\n+from pylint.custom_typing import Options\n \n if TYPE_CHECKING:\n     from pylint.lint.pylinter import PyLinter\ndiff --git a/pylint/checkers/base/name_checker/naming_style.py b/pylint/checkers/base/name_checker/naming_style.py\nindex 0198ae7d1..0f98d2f6c 100644\n--- a/pylint/checkers/base/name_checker/naming_style.py\n+++ b/pylint/checkers/base/name_checker/naming_style.py\n@@ -8,7 +8,7 @@ import re\n from re import Pattern\n \n from pylint import constants\n-from pylint.typing import OptionDict, Options\n+from pylint.custom_typing import OptionDict, Options\n \n \n class NamingStyle:\ndiff --git a/pylint/checkers/base_checker.py b/pylint/checkers/base_checker.py\nindex 9785f9c4a..41987043b 100644\n--- a/pylint/checkers/base_checker.py\n+++ b/pylint/checkers/base_checker.py\n@@ -18,7 +18,7 @@ from pylint.constants import _MSG_ORDER, MAIN_CHECKER_NAME, WarningScope\n from pylint.exceptions import InvalidMessageError\n from pylint.interfaces import Confidence\n from pylint.message.message_definition import MessageDefinition\n-from pylint.typing import (\n+from pylint.custom_typing import (\n     ExtraMessageOptions,\n     MessageDefinitionTuple,\n     OptionDict,\ndiff --git a/pylint/checkers/classes/class_checker.py b/pylint/checkers/classes/class_checker.py\nindex ff93ac07c..236190aef 100644\n--- a/pylint/checkers/classes/class_checker.py\n+++ b/pylint/checkers/classes/class_checker.py\n@@ -40,7 +40,7 @@ from pylint.checkers.utils import (\n     uninferable_final_decorators,\n )\n from pylint.interfaces import HIGH, INFERENCE\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint.pylinter import PyLinter\ndiff --git a/pylint/checkers/deprecated.py b/pylint/checkers/deprecated.py\nindex 821a9836c..68f56e62f 100644\n--- a/pylint/checkers/deprecated.py\n+++ b/pylint/checkers/deprecated.py\n@@ -15,7 +15,7 @@ from astroid import nodes\n from pylint.checkers import utils\n from pylint.checkers.base_checker import BaseChecker\n from pylint.checkers.utils import get_import_name, infer_all, safe_infer\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n ACCEPTABLE_NODES = (\n     astroid.BoundMethod,\ndiff --git a/pylint/checkers/design_analysis.py b/pylint/checkers/design_analysis.py\nindex bea1ef53c..888c75c9f 100644\n--- a/pylint/checkers/design_analysis.py\n+++ b/pylint/checkers/design_analysis.py\n@@ -16,7 +16,7 @@ from astroid import nodes\n \n from pylint.checkers import BaseChecker\n from pylint.checkers.utils import is_enum, only_required_for_messages\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/exceptions.py b/pylint/checkers/exceptions.py\nindex ce3f9367f..c0741a159 100644\n--- a/pylint/checkers/exceptions.py\n+++ b/pylint/checkers/exceptions.py\n@@ -19,7 +19,7 @@ from astroid.typing import InferenceResult, SuccessfulInferenceResult\n from pylint import checkers\n from pylint.checkers import utils\n from pylint.interfaces import HIGH, INFERENCE\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/format.py b/pylint/checkers/format.py\nindex f4de61659..32a210775 100644\n--- a/pylint/checkers/format.py\n+++ b/pylint/checkers/format.py\n@@ -24,7 +24,7 @@ from pylint.checkers import BaseRawFileChecker, BaseTokenChecker\n from pylint.checkers.utils import only_required_for_messages\n from pylint.constants import WarningScope\n from pylint.interfaces import HIGH\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n from pylint.utils.pragma_parser import OPTION_PO, PragmaParserError, parse_pragma\n \n if TYPE_CHECKING:\ndiff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 82ea529cb..4cc8ec657 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -32,7 +32,7 @@ from pylint.exceptions import EmptyReportError\n from pylint.graph import DotBackend, get_cycles\n from pylint.interfaces import HIGH\n from pylint.reporters.ureports.nodes import Paragraph, Section, VerbatimText\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n from pylint.utils import IsortDriver\n from pylint.utils.linterstats import LinterStats\n \ndiff --git a/pylint/checkers/logging.py b/pylint/checkers/logging.py\nindex 461047bdf..f774a7406 100644\n--- a/pylint/checkers/logging.py\n+++ b/pylint/checkers/logging.py\n@@ -16,7 +16,7 @@ from astroid.typing import InferenceResult\n from pylint import checkers\n from pylint.checkers import utils\n from pylint.checkers.utils import infer_all\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\nindex f81dc43e7..5675bf2f5 100644\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -13,7 +13,7 @@ from typing import TYPE_CHECKING\n from astroid import nodes\n \n from pylint.checkers import BaseRawFileChecker, BaseTokenChecker\n-from pylint.typing import ManagedMessage\n+from pylint.custom_typing import ManagedMessage\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/newstyle.py b/pylint/checkers/newstyle.py\nindex 0c2c559fe..2b6310a5b 100644\n--- a/pylint/checkers/newstyle.py\n+++ b/pylint/checkers/newstyle.py\n@@ -17,7 +17,7 @@ from pylint.checkers.utils import (\n     node_frame_class,\n     only_required_for_messages,\n )\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex fc50ed415..7596f8055 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -60,7 +60,7 @@ from astroid import nodes\n \n from pylint.checkers import BaseChecker, BaseRawFileChecker, table_lines_from_stats\n from pylint.reporters.ureports.nodes import Section, Table\n-from pylint.typing import MessageDefinitionTuple, Options\n+from pylint.custom_typing import MessageDefinitionTuple, Options\n from pylint.utils import LinterStats, decoding_stream\n \n if TYPE_CHECKING:\ndiff --git a/pylint/checkers/stdlib.py b/pylint/checkers/stdlib.py\nindex e1213d1bd..4646f0f4e 100644\n--- a/pylint/checkers/stdlib.py\n+++ b/pylint/checkers/stdlib.py\n@@ -17,7 +17,7 @@ from astroid.typing import InferenceResult\n from pylint import interfaces\n from pylint.checkers import BaseChecker, DeprecatedMixin, utils\n from pylint.interfaces import HIGH, INFERENCE\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/strings.py b/pylint/checkers/strings.py\nindex 7002a551d..43869d6de 100644\n--- a/pylint/checkers/strings.py\n+++ b/pylint/checkers/strings.py\n@@ -20,7 +20,7 @@ from astroid.typing import SuccessfulInferenceResult\n from pylint.checkers import BaseChecker, BaseRawFileChecker, BaseTokenChecker, utils\n from pylint.checkers.utils import only_required_for_messages\n from pylint.interfaces import HIGH\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/typecheck.py b/pylint/checkers/typecheck.py\nindex f95bf4c2e..690b79d2b 100644\n--- a/pylint/checkers/typecheck.py\n+++ b/pylint/checkers/typecheck.py\n@@ -51,7 +51,7 @@ from pylint.checkers.utils import (\n )\n from pylint.constants import PY310_PLUS\n from pylint.interfaces import HIGH, INFERENCE\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 6d929a071..f4cf50085 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -32,7 +32,7 @@ from pylint.checkers.utils import (\n )\n from pylint.constants import PY39_PLUS, TYPING_NEVER, TYPING_NORETURN\n from pylint.interfaces import CONTROL_FLOW, HIGH, INFERENCE, INFERENCE_FAILURE\n-from pylint.typing import MessageDefinitionTuple\n+from pylint.custom_typing import MessageDefinitionTuple\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\ndiff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 30a5fd175..4ff49cf4a 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,10 +112,12 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a string into a list of regular expressions, correctly handling commas within regexes.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    # Use a regular expression to split on commas that are not within parentheses or brackets\n+    regex_list = re.findall(r'(?:[^,(]|\\([^)]*\\))+', value)\n+    for pattern in regex_list:\n+        patterns.append(_regex_transformer(pattern.strip()))\n     return patterns\n \n \ndiff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py\nindex b99c9476f..8b02349dd 100644\n--- a/pylint/config/arguments_manager.py\n+++ b/pylint/config/arguments_manager.py\n@@ -33,7 +33,7 @@ from pylint.config.exceptions import (\n from pylint.config.help_formatter import _HelpFormatter\n from pylint.config.utils import _convert_option_to_argument, _parse_rich_type_value\n from pylint.constants import MAIN_CHECKER_NAME\n-from pylint.typing import DirectoryNamespaceDict, OptionDict\n+from pylint.custom_typing import DirectoryNamespaceDict, OptionDict\n \n if sys.version_info >= (3, 11):\n     import tomllib\ndiff --git a/pylint/config/arguments_provider.py b/pylint/config/arguments_provider.py\nindex 7f75718ca..e914cb607 100644\n--- a/pylint/config/arguments_provider.py\n+++ b/pylint/config/arguments_provider.py\n@@ -10,7 +10,7 @@ from collections.abc import Iterator\n from typing import Any\n \n from pylint.config.arguments_manager import _ArgumentsManager\n-from pylint.typing import OptionDict, Options\n+from pylint.custom_typing import OptionDict, Options\n \n \n class _ArgumentsProvider:\ndiff --git a/pylint/constants.py b/pylint/constants.py\nindex fd649f07f..e5ca86881 100644\n--- a/pylint/constants.py\n+++ b/pylint/constants.py\n@@ -12,7 +12,7 @@ import astroid\n import platformdirs\n \n from pylint.__pkginfo__ import __version__\n-from pylint.typing import MessageTypesFullName\n+from pylint.custom_typing import MessageTypesFullName\n \n PY38_PLUS = sys.version_info[:2] >= (3, 8)\n PY39_PLUS = sys.version_info[:2] >= (3, 9)\ndiff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py\nindex ee811db4e..aa84a2389 100644\n--- a/pylint/lint/base_options.py\n+++ b/pylint/lint/base_options.py\n@@ -28,7 +28,7 @@ from pylint.config.callback_actions import (\n     _MessageHelpAction,\n     _OutputFormatAction,\n )\n-from pylint.typing import Options\n+from pylint.custom_typing import Options\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter, Run\ndiff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 1e8fd032f..1e6410cbb 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -11,7 +11,7 @@ from re import Pattern\n \n from astroid import modutils\n \n-from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n+from pylint.custom_typing import ErrorDescriptionDict, ModuleDescriptionDict\n \n \n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\ndiff --git a/pylint/lint/message_state_handler.py b/pylint/lint/message_state_handler.py\nindex 26028f0fa..2faab491f 100644\n--- a/pylint/lint/message_state_handler.py\n+++ b/pylint/lint/message_state_handler.py\n@@ -18,7 +18,7 @@ from pylint.constants import (\n )\n from pylint.interfaces import HIGH\n from pylint.message import MessageDefinition\n-from pylint.typing import ManagedMessage\n+from pylint.custom_typing import ManagedMessage\n from pylint.utils.pragma_parser import (\n     OPTION_PO,\n     InvalidPragmaError,\ndiff --git a/pylint/lint/parallel.py b/pylint/lint/parallel.py\nindex 34becdf3c..249b1fbf1 100644\n--- a/pylint/lint/parallel.py\n+++ b/pylint/lint/parallel.py\n@@ -14,7 +14,7 @@ import dill\n from pylint import reporters\n from pylint.lint.utils import _augment_sys_path\n from pylint.message import Message\n-from pylint.typing import FileItem\n+from pylint.custom_typing import FileItem\n from pylint.utils import LinterStats, merge_stats\n \n try:\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex cecf4f195..38d3f4ba4 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -57,7 +57,7 @@ from pylint.message import Message, MessageDefinition, MessageDefinitionStore\n from pylint.reporters.base_reporter import BaseReporter\n from pylint.reporters.text import TextReporter\n from pylint.reporters.ureports import nodes as report_nodes\n-from pylint.typing import (\n+from pylint.custom_typing import (\n     DirectoryNamespaceDict,\n     FileItem,\n     ManagedMessage,\ndiff --git a/pylint/message/message.py b/pylint/message/message.py\nindex 6ee8c5f78..03403be0f 100644\n--- a/pylint/message/message.py\n+++ b/pylint/message/message.py\n@@ -8,7 +8,7 @@ from dataclasses import asdict, dataclass\n \n from pylint.constants import MSG_TYPES\n from pylint.interfaces import UNDEFINED, Confidence\n-from pylint.typing import MessageLocationTuple\n+from pylint.custom_typing import MessageLocationTuple\n \n \n @dataclass(unsafe_hash=True)\ndiff --git a/pylint/pyreverse/main.py b/pylint/pyreverse/main.py\nindex 58128bb57..f76d63e3f 100644\n--- a/pylint/pyreverse/main.py\n+++ b/pylint/pyreverse/main.py\n@@ -23,7 +23,7 @@ from pylint.pyreverse.utils import (\n     check_if_graphviz_supports_format,\n     insert_default_options,\n )\n-from pylint.typing import Options\n+from pylint.custom_typing import Options\n \n DIRECTLY_SUPPORTED_FORMATS = (\n     \"dot\",\ndiff --git a/pylint/reporters/json_reporter.py b/pylint/reporters/json_reporter.py\nindex 176946e72..2c927c650 100644\n--- a/pylint/reporters/json_reporter.py\n+++ b/pylint/reporters/json_reporter.py\n@@ -12,7 +12,7 @@ from typing import TYPE_CHECKING, Optional, TypedDict\n from pylint.interfaces import UNDEFINED\n from pylint.message import Message\n from pylint.reporters.base_reporter import BaseReporter\n-from pylint.typing import MessageLocationTuple\n+from pylint.custom_typing import MessageLocationTuple\n \n if TYPE_CHECKING:\n     from pylint.lint.pylinter import PyLinter\ndiff --git a/pylint/reporters/reports_handler_mix_in.py b/pylint/reporters/reports_handler_mix_in.py\nindex 95d45ba91..7b569e037 100644\n--- a/pylint/reporters/reports_handler_mix_in.py\n+++ b/pylint/reporters/reports_handler_mix_in.py\n@@ -10,7 +10,7 @@ from typing import TYPE_CHECKING, DefaultDict, List, Tuple\n \n from pylint.exceptions import EmptyReportError\n from pylint.reporters.ureports.nodes import Section\n-from pylint.typing import ReportsCallable\n+from pylint.custom_typing import ReportsCallable\n from pylint.utils import LinterStats\n \n if TYPE_CHECKING:\ndiff --git a/pylint/utils/linterstats.py b/pylint/utils/linterstats.py\nindex e7a088b7b..960178f63 100644\n--- a/pylint/utils/linterstats.py\n+++ b/pylint/utils/linterstats.py\n@@ -6,7 +6,7 @@ from __future__ import annotations\n \n from typing import Literal, TypedDict, cast\n \n-from pylint.typing import MessageTypesFullName\n+from pylint.custom_typing import MessageTypesFullName\n \n \n class BadNames(TypedDict):\ndiff --git a/pylint/utils/utils.py b/pylint/utils/utils.py\nindex fa7f7b92f..1370fec86 100644\n--- a/pylint/utils/utils.py\n+++ b/pylint/utils/utils.py\n@@ -39,7 +39,7 @@ from typing import (\n from astroid import Module, modutils, nodes\n \n from pylint.constants import PY_EXTS\n-from pylint.typing import OptionDict\n+from pylint.custom_typing import OptionDict\n \n if TYPE_CHECKING:\n     from pylint.lint import PyLinter\n"}
{"instance_id":"pytest-dev__pytest-10051","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..e3b404e41 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -441,6 +441,7 @@ class LogCaptureFixture:\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n+        self._item.stash[caplog_records_key] = {}\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n"}
{"instance_id":"pytest-dev__pytest-10081","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 851e4943b..338bcd42f 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -316,7 +316,7 @@ class TestCaseFunction(Function):\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\n-            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self._testcase):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n"}
{"instance_id":"pytest-dev__pytest-10356","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex 800a25c92..1516374e3 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -356,10 +356,18 @@ class MarkDecorator:\n \n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    \"\"\"Obtain the unpacked marks that are stored on an object, considering MRO.\"\"\"\n+    mark_list = []\n+    if inspect.isclass(obj):\n+        for base in reversed(inspect.getmro(obj)):\n+            marks = getattr(base, \"pytestmark\", [])\n+            if not isinstance(marks, list):\n+                marks = [marks]\n+            mark_list.extend(marks)\n+    else:\n+        mark_list = getattr(obj, \"pytestmark\", [])\n+        if not isinstance(mark_list, list):\n+            mark_list = [mark_list]\n     return normalize_mark_list(mark_list)\n \n \n@@ -381,15 +389,28 @@ def normalize_mark_list(\n \n \n def store_mark(obj, mark: Mark) -> None:\n-    \"\"\"Store a Mark on an object.\n+    \"\"\"Store a Mark on an object, considering MRO for classes.\n \n     This is used to implement the Mark declarations/decorators correctly.\n     \"\"\"\n     assert isinstance(mark, Mark), mark\n-    # Always reassign name to avoid updating pytestmark in a reference that\n-    # was only borrowed.\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n-\n+    # Collect all marks from obj and its base classes\n+    marks = []\n+    if inspect.isclass(obj):\n+        for base in reversed(inspect.getmro(obj)):\n+            marks.extend(get_unpacked_marks(base))\n+    else:\n+        marks.extend(get_unpacked_marks(obj))\n+    # Add the new mark\n+    marks.append(mark)\n+    # Deduplicate marks based on name\n+    seen = set()\n+    unique_marks = []\n+    for m in marks:\n+        if m.name not in seen:\n+            unique_marks.append(m)\n+            seen.add(m.name)\n+    obj.pytestmark = unique_marks\n \n # Typing for builtin pytest marks. This is cheating; it gives builtin marks\n # special privilege, and breaks modularity. But practicality beats purity...\n"}
{"instance_id":"pytest-dev__pytest-5262","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 25eab7fdf..cd48fa24f 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -416,9 +416,6 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if \"b\" not in mode:\n-            mode += \"b\"\n-        f = os.fdopen(newfd, mode, 0)  # no buffering\n     return EncodedFile(f, encoding or default_encoding)\n \n \n"}
{"instance_id":"pytest-dev__pytest-5631","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex d238061b4..d39e7123c 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -68,7 +68,7 @@ def num_mock_patch_args(function):\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n         return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n+            [p for p in patchings if not p.attribute_name and any(p.new is s for s in sentinels)]\n         )\n     return len(patchings)\n \n@@ -330,3 +330,4 @@ class FuncargnamesCompatAttr:\n \n         warnings.warn(FUNCARGNAMES, stacklevel=2)\n         return self.fixturenames\n+\n"}
{"instance_id":"pytest-dev__pytest-5787","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex a0f4d15ce..49ff6fc16 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -811,41 +811,32 @@ class FormattedExcinfo:\n         return traceback, extraline\n \n     def repr_excinfo(self, excinfo):\n-\n         repr_chain = []\n-        e = excinfo.value\n+        e = excinfo\n         descr = None\n         seen = set()\n         while e is not None and id(e) not in seen:\n             seen.add(id(e))\n-            if excinfo:\n-                reprtraceback = self.repr_traceback(excinfo)\n-                reprcrash = excinfo._getreprcrash()\n+            if e:\n+                reprtraceback = self.repr_traceback(e)\n+                reprcrash = e._getreprcrash()\n             else:\n-                # fallback to native repr if the exception doesn't have a traceback:\n-                # ExceptionInfo objects require a full traceback to work\n+                # Fallback to native repr if the exception doesn't have a traceback\n                 reprtraceback = ReprTracebackNative(\n-                    traceback.format_exception(type(e), e, None)\n+                    traceback.format_exception(type(e.value), e.value, None)\n                 )\n                 reprcrash = None\n-\n-            repr_chain += [(reprtraceback, reprcrash, descr)]\n-            if e.__cause__ is not None and self.chain:\n-                e = e.__cause__\n-                excinfo = (\n-                    ExceptionInfo((type(e), e, e.__traceback__))\n-                    if e.__traceback__\n-                    else None\n+            repr_chain.append((reprtraceback, reprcrash, descr))\n+            if e.value.__cause__ is not None and self.chain:\n+                e = ExceptionInfo(\n+                    (type(e.value.__cause__), e.value.__cause__, e.value.__cause__.__traceback__)\n                 )\n                 descr = \"The above exception was the direct cause of the following exception:\"\n             elif (\n-                e.__context__ is not None and not e.__suppress_context__ and self.chain\n+                e.value.__context__ is not None and not e.value.__suppress_context__ and self.chain\n             ):\n-                e = e.__context__\n-                excinfo = (\n-                    ExceptionInfo((type(e), e, e.__traceback__))\n-                    if e.__traceback__\n-                    else None\n+                e = ExceptionInfo(\n+                    (type(e.value.__context__), e.value.__context__, e.value.__context__.__traceback__)\n                 )\n                 descr = \"During handling of the above exception, another exception occurred:\"\n             else:\ndiff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..ce2fe34f8 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -12,6 +12,7 @@ from _pytest._code.code import ReprFuncArgs\n from _pytest._code.code import ReprLocals\n from _pytest._code.code import ReprTraceback\n from _pytest._code.code import TerminalRepr\n+from _pytest._code.code import ExceptionChainRepr\n from _pytest.outcomes import skip\n from _pytest.pathlib import Path\n \n@@ -162,31 +163,55 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            if isinstance(rep.longrepr, ExceptionChainRepr):\n+                chain = []\n+                for repr_traceback, repr_crash, description in rep.longrepr.chain:\n+                    reprtraceback = repr_traceback.__dict__.copy()\n+                    new_entries = []\n+                    for entry in repr_traceback.reprentries:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    reprtraceback[\"reprentries\"] = new_entries\n+                    chain.append({\n+                        \"reprtraceback\": reprtraceback,\n+                        \"reprcrash\": repr_crash.__dict__.copy(),\n+                        \"description\": description,\n+                    })\n+                return {\n+                    \"chain\": chain,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            else:\n+                reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+                reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                reprtraceback[\"reprentries\"] = new_entries\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n-\n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n-            if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n+            if isinstance(self.longrepr, ExceptionChainRepr):\n+                d[\"longrepr\"] = disassembled_report(self)\n+            elif hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n                 self.longrepr, \"reprcrash\"\n             ):\n                 d[\"longrepr\"] = disassembled_report(self)\n@@ -198,30 +223,63 @@ class BaseReport:\n             if isinstance(d[name], (py.path.local, Path)):\n                 d[name] = str(d[name])\n             elif name == \"result\":\n+                reprentry = None\n                 d[name] = None  # for now\n         return d\n \n     @classmethod\n     def _from_json(cls, reportdict):\n-        \"\"\"\n-        This was originally the serialize_report() function from xdist (ca03269).\n-\n-        Factory method that returns either a TestReport or CollectReport, depending on the calling\n-        class. It's the callers responsibility to know which class to pass here.\n-\n-        Experimental method.\n-        \"\"\"\n         if reportdict[\"longrepr\"]:\n-            if (\n-                \"reprcrash\" in reportdict[\"longrepr\"]\n-                and \"reprtraceback\" in reportdict[\"longrepr\"]\n+            longrepr = reportdict[\"longrepr\"]\n+            if \"chain\" in longrepr:\n+                chain = []\n+                for entry in longrepr[\"chain\"]:\n+                    reprtraceback = entry[\"reprtraceback\"]\n+                    reprcrash = entry[\"reprcrash\"]\n+                    description = entry[\"description\"]\n+                    unserialized_entries = []\n+                    for entry_data in reprtraceback[\"reprentries\"]:\n+                        data = entry_data[\"data\"]\n+                        entry_type = entry_data[\"type\"]\n+                        if entry_type == \"ReprEntry\":\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data[\"reprfuncargs\"]:\n+                                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                            if data[\"reprfileloc\"]:\n+                                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                            if data[\"reprlocals\"]:\n+                                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+                            reprentry = ReprEntry(\n+                                lines=data[\"lines\"],\n+                                reprfuncargs=reprfuncargs,\n+                                reprlocals=reprlocals,\n+                                filelocrepr=reprfileloc,\n+                                style=data[\"style\"],\n+                            )\n+                        elif entry_type == \"ReprEntryNative\":\n+                            reprentry = ReprEntryNative(data[\"lines\"])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    reprtraceback_obj = ReprTraceback(\n+                        reprentries=unserialized_entries,\n+                        **{k: v for k, v in reprtraceback.items() if k != \"reprentries\"}\n+                    )\n+                    reprcrash_obj = ReprFileLocation(**reprcrash)\n+                    chain.append((reprtraceback_obj, reprcrash_obj, description))\n+                exception_info = ExceptionChainRepr(chain)\n+                for section in longrepr[\"sections\"]:\n+                    exception_info.addsection(*section)\n+                reportdict[\"longrepr\"] = exception_info\n+            elif (\n+                \"reprcrash\" in longrepr\n+                and \"reprtraceback\" in longrepr\n             ):\n-\n-                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n-                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n-\n+                reprtraceback = longrepr[\"reprtraceback\"]\n+                reprcrash = longrepr[\"reprcrash\"]\n                 unserialized_entries = []\n-                reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n                     data = entry_data[\"data\"]\n                     entry_type = entry_data[\"type\"]\n@@ -235,7 +293,6 @@ class BaseReport:\n                             reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n                         if data[\"reprlocals\"]:\n                             reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n-\n                         reprentry = ReprEntry(\n                             lines=data[\"lines\"],\n                             reprfuncargs=reprfuncargs,\n@@ -249,16 +306,15 @@ class BaseReport:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n-\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n                 )\n-\n-                for section in reportdict[\"longrepr\"][\"sections\"]:\n+                for section in longrepr[\"sections\"]:\n                     exception_info.addsection(*section)\n                 reportdict[\"longrepr\"] = exception_info\n-\n+            else:\n+                reportdict[\"longrepr\"] = longrepr\n         return cls(**reportdict)\n \n \n"}
{"instance_id":"pytest-dev__pytest-5809","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/pastebin.py b/src/_pytest/pastebin.py\nindex 41576a615..f4ff24edc 100644\n--- a/src/_pytest/pastebin.py\n+++ b/src/_pytest/pastebin.py\n@@ -79,7 +79,7 @@ def create_new_paste(contents):\n \n     params = {\n         \"code\": contents,\n-        \"lexer\": \"python3\" if sys.version_info[0] >= 3 else \"python\",\n+        \"lexer\": \"text\",\n         \"expiry\": \"1week\",\n     }\n     url = \"https://bpaste.net\"\n@@ -112,3 +112,4 @@ def pytest_terminal_summary(terminalreporter):\n             assert len(s)\n             pastebinurl = create_new_paste(s)\n             tr.write_line(\"%s --> %s\" % (msg, pastebinurl))\n+\n"}
{"instance_id":"pytest-dev__pytest-5840","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..47c3d828e 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -419,7 +419,8 @@ class PytestPluginManager(PluginManager):\n             if conftestpath.isfile():\n                 mod = self._importconftest(conftestpath)\n                 clist.append(mod)\n-        self._dirpath2confmods[directory] = clist\n+        key = py.path.local(os.path.normcase(str(directory)))\n+        self._dirpath2confmods[key] = clist\n         return clist\n \n     def _rget_with_confmod(self, name, path):\n@@ -437,7 +438,7 @@ class PytestPluginManager(PluginManager):\n         # symlinks to actual files.\n         conftestpath = unique_path(conftestpath)\n         try:\n-            return self._conftestpath2mod[conftestpath]\n+            return self._conftestpath2mod[os.path.normcase(str(conftestpath))]\n         except KeyError:\n             pkgpath = conftestpath.pypkgpath()\n             if pkgpath is None:\ndiff --git a/src/_pytest/config/findpaths.py b/src/_pytest/config/findpaths.py\nindex ec991316a..9b852c0de 100644\n--- a/src/_pytest/config/findpaths.py\n+++ b/src/_pytest/config/findpaths.py\n@@ -62,7 +62,7 @@ def get_common_ancestor(paths):\n         if common_ancestor is None:\n             common_ancestor = path\n         else:\n-            if path.relto(common_ancestor) or path == common_ancestor:\n+            if path.relto(common_ancestor) or os.path.normcase(str(path)) == os.path.normcase(str(common_ancestor)):\n                 continue\n             elif common_ancestor.relto(path):\n                 common_ancestor = path\ndiff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 23eff52dd..2a12bfb3a 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -457,7 +457,7 @@ class Session(nodes.FSCollector):\n             parts = self._parsearg(arg)\n             self._initialparts.append(parts)\n             initialpaths.append(parts[0])\n-        self._initialpaths = frozenset(initialpaths)\n+        self._initialpaths = frozenset(os.path.normcase(str(p)) for p in initialpaths)\n         rep = collect_one_node(self)\n         self.ihook.pytest_collectreport(report=rep)\n         self.trace.root.indent -= 1\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b6947..39317ab8f 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -343,4 +343,7 @@ def unique_path(path):\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    if sys.platform.startswith('win'):\n+        return path.absolute()\n+    else:\n+        return path.resolve()\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 913a93bc0..e9d05f440 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -619,9 +619,8 @@ class Package(Module):\n                 else:\n                     duplicate_paths.add(path)\n \n-        if self.fspath == path:  # __init__.py\n+        if os.path.normcase(str(self.fspath)) == os.path.normcase(str(path)):  # __init__.py\n             return [self]\n-\n         return ihook.pytest_collect_file(path=path, parent=self)\n \n     def isinitpath(self, path):\n@@ -638,9 +637,9 @@ class Package(Module):\n         for path in this_path.visit(rec=self._recurse, bf=True, sort=True):\n             # We will visit our own __init__.py file, in which case we skip it.\n             is_file = path.isfile()\n-            if is_file:\n+        parts[0] = path.resolve()\n                 if path.basename == \"__init__.py\" and path.dirpath() == this_path:\n-                    continue\n+        parts[0] = path.resolve()\n \n             parts_ = parts(path.strpath)\n             if any(\n"}
{"instance_id":"pytest-dev__pytest-6197","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 306e5f217..4bd8f1fdf 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -178,7 +178,7 @@ def pytest_collect_file(path, parent):\n     if ext == \".py\":\n         if not parent.session.isinitpath(path):\n             if not path_matches_patterns(\n-                path, parent.config.getini(\"python_files\") + [\"__init__.py\"]\n+                path, parent.config.getini(\"python_files\")\n             ):\n                 return\n         ihook = parent.session.gethookproxy(path)\n"}
{"instance_id":"pytest-dev__pytest-6202","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex b8b365ad3..5f2af31e2 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -286,7 +286,7 @@ class PyobjMixin(PyobjContext):\n             parts.append(name)\n         parts.reverse()\n         s = \".\".join(parts)\n-        return s.replace(\".[\", \"[\")\n+        return s\n \n     def reportinfo(self):\n         # XXX caching?\n"}
{"instance_id":"pytest-dev__pytest-7205","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py\nindex c9cc589ff..fb438af9c 100644\n--- a/src/_pytest/setuponly.py\n+++ b/src/_pytest/setuponly.py\n@@ -1,4 +1,5 @@\n import pytest\n+from _pytest._io.saferepr import saferepr\n \n \n def pytest_addoption(parser):\n@@ -66,7 +67,7 @@ def _show_fixture_action(fixturedef, msg):\n             tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n \n     if hasattr(fixturedef, \"cached_param\"):\n-        tw.write(\"[{}]\".format(fixturedef.cached_param))\n+        tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param)))\n \n     tw.flush()\n \n@@ -78,3 +79,4 @@ def _show_fixture_action(fixturedef, msg):\n def pytest_cmdline_main(config):\n     if config.option.setuponly:\n         config.option.setupshow = True\n+\n"}
{"instance_id":"pytest-dev__pytest-7236","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545af..766489762 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -205,6 +205,9 @@ class TestCaseFunction(Function):\n         expecting_failure_class = getattr(self, \"__unittest_expecting_failure__\", False)\n         return bool(expecting_failure_class or expecting_failure_method)\n \n+    def _is_skipped(self):\n+        return getattr(self._testcase, \"__unittest_skip__\", False) or getattr(self.obj, \"__unittest_skip__\", False)\n+\n     def runtest(self):\n         from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n \n@@ -220,7 +223,7 @@ class TestCaseFunction(Function):\n             # arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not self._is_skipped():\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n@@ -301,3 +304,4 @@ def check_testcase_implements_trial_reporter(done=[]):\n \n     classImplements(TestCaseFunction, IReporter)\n     done.append(1)\n+\n"}
{"instance_id":"pytest-dev__pytest-7324","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex a40b23470..55e6c4ff3 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -410,7 +410,7 @@ class Traceback(List[TracebackEntry]):\n \n \n co_equal = compile(\n-    \"__recursioncache_locals_1 == __recursioncache_locals_2\", \"?\", \"eval\"\n+    \"__recursioncache_locals_1 == __recursioncache_locals_2\", \"?\", \"eval\", dont_inherit=True\n )\n \n \ndiff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py\nindex 3f732792f..e2221afa6 100644\n--- a/src/_pytest/_code/source.py\n+++ b/src/_pytest/_code/source.py\n@@ -204,7 +204,7 @@ class Source:\n                 filename = base + \"%r %s:%d>\" % (filename, fn, lineno)\n         source = \"\\n\".join(self.lines) + \"\\n\"\n         try:\n-            co = compile(source, filename, mode, flag)\n+            co = compile(source, filename, mode, flag, dont_inherit)\n         except SyntaxError as ex:\n             # re-represent syntax errors from parsing python strings\n             msglines = self.lines[: ex.lineno]\ndiff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex cec0c5501..5cf46e7fb 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -941,15 +941,6 @@ class AssertionRewriter(ast.NodeVisitor):\n         test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n         expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n         return name, self.explanation_param(expr)\n-\n-    def visit_BoolOp(self, boolop: ast.BoolOp) -> Tuple[ast.Name, str]:\n-        res_var = self.variable()\n-        expl_list = self.assign(ast.List([], ast.Load()))\n-        app = ast.Attribute(expl_list, \"append\", ast.Load())\n-        is_or = int(isinstance(boolop.op, ast.Or))\n-        body = save = self.statements\n-        fail_save = self.expl_stmts\n-        levels = len(boolop.values) - 1\n         self.push_format_context()\n         # Process each operand, short-circuiting if needed.\n         for i, v in enumerate(boolop.values):\n"}
{"instance_id":"pytest-dev__pytest-7521","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 3f9c60fb9..06f9ede60 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -478,7 +478,7 @@ class FDCapture(FDCaptureBinary):\n     def snap(self):\n         self._assert_state(\"snap\", (\"started\", \"suspended\"))\n         self.tmpfile.seek(0)\n-        res = self.tmpfile.read()\n+        res = self.tmpfile.buffer.read().decode(self.tmpfile.encoding, errors=self.tmpfile.errors)\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n         return res\n"}
{"instance_id":"pytest-dev__pytest-7571","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 11031f2f2..f696be836 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -356,6 +356,9 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        # restore handler's level\n+        if hasattr(self, '_initial_handler_level'):\n+            self.handler.setLevel(self._initial_handler_level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n@@ -432,6 +435,8 @@ class LogCaptureFixture:\n         \"\"\"\n         logger_obj = logging.getLogger(logger)\n         # save the original log-level to restore it during teardown\n+        if not hasattr(self, '_initial_handler_level'):\n+            self._initial_handler_level = self.handler.level\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n"}
{"instance_id":"pytest-dev__pytest-7982","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex f0bdb1481..64c7fec6f 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -558,7 +558,7 @@ def visit(\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\n-        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n+        if entry.is_dir(follow_symlinks=True) and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n"}
{"instance_id":"pytest-dev__pytest-8399","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 719eb4e88..3f88d7a9e 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -144,7 +144,7 @@ def _make_xunit_fixture(\n         scope=scope,\n         autouse=True,\n         # Use a unique name to speed up lookup.\n-        name=f\"unittest_{setup_name}_fixture_{obj.__qualname__}\",\n+        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n     )\n     def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n         if _is_skipped(self):\n"}
{"instance_id":"scikit-learn__scikit-learn-10844","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py\nindex a987778ae..9bcca75a2 100644\n--- a/sklearn/metrics/cluster/supervised.py\n+++ b/sklearn/metrics/cluster/supervised.py\n@@ -856,7 +856,7 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\n-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.\n+    return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\n"}
{"instance_id":"scikit-learn__scikit-learn-10908","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 9b1ebd632..8b110def2 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -300,9 +300,9 @@ class VectorizerMixin(object):\n \n     def _check_vocabulary(self):\n         \"\"\"Check if vocabulary is empty or missing (not fit-ed)\"\"\"\n-        msg = \"%(name)s - Vocabulary wasn't fitted.\"\n-        check_is_fitted(self, 'vocabulary_', msg=msg),\n-\n+        if not self.fixed_vocabulary_:\n+            msg = \"%(name)s - Vocabulary wasn't fitted.\"\n+            check_is_fitted(self, 'vocabulary_', msg=msg)\n         if len(self.vocabulary_) == 0:\n             raise ValueError(\"Vocabulary is empty\")\n \n@@ -728,12 +728,20 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):\n         if max_df < 0 or min_df < 0:\n             raise ValueError(\"negative value for max_df or min_df\")\n         self.max_features = max_features\n-        if max_features is not None:\n-            if (not isinstance(max_features, numbers.Integral) or\n-                    max_features <= 0):\n+        if self.max_features is not None:\n+            if (not isinstance(self.max_features, numbers.Integral) or\n+                    self.max_features <= 0):\n                 raise ValueError(\n                     \"max_features=%r, neither a positive integer nor None\"\n-                    % max_features)\n+                    % self.max_features)\n+\n+        self.ngram_range = ngram_range\n+        self.vocabulary = vocabulary\n+        self.fixed_vocabulary_ = self.vocabulary is not None\n+        if self.fixed_vocabulary_:\n+            self._validate_vocabulary()\n+        self.binary = binary\n+        self.dtype = dtype\n         self.ngram_range = ngram_range\n         self.vocabulary = vocabulary\n         self.binary = binary\n"}
{"instance_id":"scikit-learn__scikit-learn-11310","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 99d6096af..b6b311420 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -18,6 +18,7 @@ from functools import partial, reduce\n from itertools import product\n import operator\n import warnings\n+import time\n \n import numpy as np\n from scipy.stats import rankdata\n@@ -764,12 +765,15 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                 self.best_index_]\n \n         if self.refit:\n+            # Record the time it takes to refit the best model\n+            refit_start_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+            self.refit_time_ = time.time() - refit_start_time\n \n         # Store the only scorer not as a dict for single metric evaluation\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n"}
{"instance_id":"scikit-learn__scikit-learn-11578","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex e4ea696ce..faefd80a0 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -922,7 +922,7 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n         check_input=False, max_squared_sum=max_squared_sum,\n         sample_weight=sample_weight)\n \n-    log_reg = LogisticRegression(fit_intercept=fit_intercept)\n+    log_reg = LogisticRegression(fit_intercept=fit_intercept, multi_class=multi_class)\n \n     # The score method of Logistic Regression has a classes_ attribute.\n     if multi_class == 'ovr':\n"}
{"instance_id":"scikit-learn__scikit-learn-12585","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/base.py b/sklearn/base.py\nindex 56ffb18bf..34998270c 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -48,7 +48,7 @@ def clone(estimator, safe=True):\n     # XXX: not handling dictionaries\n     if estimator_type in (list, tuple, set, frozenset):\n         return estimator_type([clone(e, safe=safe) for e in estimator])\n-    elif not hasattr(estimator, 'get_params'):\n+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\n         if not safe:\n             return copy.deepcopy(estimator)\n         else:\n"}
{"instance_id":"scikit-learn__scikit-learn-12682","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/examples/decomposition/plot_sparse_coding.py b/examples/decomposition/plot_sparse_coding.py\nindex 528817ad0..eb566b6da 100644\n--- a/examples/decomposition/plot_sparse_coding.py\n+++ b/examples/decomposition/plot_sparse_coding.py\n@@ -79,8 +79,8 @@ for subplot, (D, title) in enumerate(zip((D_fixed, D_multi),\n     # Do a wavelet approximation\n     for title, algo, alpha, n_nonzero, color in estimators:\n         coder = SparseCoder(dictionary=D, transform_n_nonzero_coefs=n_nonzero,\n-                            transform_alpha=alpha, transform_algorithm=algo)\n-        x = coder.transform(y.reshape(1, -1))\n+                            transform_alpha=alpha, transform_algorithm=algo,\n+                            max_iter=10000)\n         density = len(np.flatnonzero(x))\n         x = np.ravel(np.dot(x, D))\n         squared_error = np.sum((y - x) ** 2)\ndiff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..c4f3e0fe1 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -896,11 +896,18 @@ class SparseCodingMixin(TransformerMixin):\n \n         X = check_array(X)\n \n-        code = sparse_encode(\n-            X, self.components_, algorithm=self.transform_algorithm,\n-            n_nonzero_coefs=self.transform_n_nonzero_coefs,\n-            alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+        if self.transform_algorithm == 'lasso_cd':\n+            code = sparse_encode(\n+                X, self.components_, algorithm=self.transform_algorithm,\n+                n_nonzero_coefs=self.transform_n_nonzero_coefs,\n+                alpha=self.transform_alpha, n_jobs=self.n_jobs,\n+                positive=self.positive_code, max_iter=self.max_iter)\n+        else:\n+            code = sparse_encode(\n+                X, self.components_, algorithm=self.transform_algorithm,\n+                n_nonzero_coefs=self.transform_n_nonzero_coefs,\n+                alpha=self.transform_alpha, n_jobs=self.n_jobs,\n+                positive=self.positive_code)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -991,12 +998,13 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 split_sign=False, n_jobs=None, positive_code=False, max_iter=1000):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n                                        positive_code)\n+        self.max_iter = max_iter\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n"}
{"instance_id":"scikit-learn__scikit-learn-12973","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 03b34a0dc..7285b3014 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1506,6 +1506,8 @@ class LassoLarsIC(LassoLars):\n \n         Gram = self.precompute\n \n+        if copy_X is None:\n+            copy_X = self.copy_X\n         alphas_, active_, coef_path_, self.n_iter_ = lars_path(\n             X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0,\n             method='lasso', verbose=self.verbose, max_iter=max_iter,\n"}
{"instance_id":"scikit-learn__scikit-learn-13124","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 24394f869..8c4295c9b 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -620,7 +620,7 @@ class StratifiedKFold(_BaseKFold):\n         super().__init__(n_splits, shuffle, random_state)\n \n     def _make_test_folds(self, X, y=None):\n-        rng = self.random_state\n+        rng = check_random_state(self.random_state)\n         y = np.asarray(y)\n         type_of_target_y = type_of_target(y)\n         allowed_target_types = ('binary', 'multiclass')\n@@ -645,29 +645,25 @@ class StratifiedKFold(_BaseKFold):\n                            \" be less than n_splits=%d.\"\n                            % (min_groups, self.n_splits)), Warning)\n \n-        # pre-assign each sample to a test fold index using individual KFold\n-        # splitting strategies for each class so as to respect the balance of\n-        # classes\n-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n-        # will break when the data is not 100% stratifiable for all classes.\n-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n-        per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n-            for count in y_counts]\n+        # Get indices of samples for each class\n+        class_indices = [np.where(y == class_)[0] for class_ in unique_y]\n+\n+        # Shuffle indices within each class if requested\n+        if self.shuffle:\n+            for indices in class_indices:\n+                rng.shuffle(indices)\n \n+        # Assign samples from each class to test folds\n         test_folds = np.zeros(n_samples, dtype=np.int)\n-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n-                cls_test_folds = test_folds[y == cls]\n-                # the test split can be too big because we used\n-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n-                # stratifiable for all the classes\n-                # (we use a warning instead of raising an exception)\n-                # If this is the case, let's trim it:\n-                test_split = test_split[test_split < len(cls_test_folds)]\n-                cls_test_folds[test_split] = test_fold_indices\n-                test_folds[y == cls] = cls_test_folds\n+        for i, indices in enumerate(class_indices):\n+            # Split indices into n_splits groups\n+            fold_sizes = np.full(self.n_splits, len(indices) // self.n_splits, dtype=np.int)\n+            fold_sizes[:len(indices) % self.n_splits] += 1\n+            current = 0\n+            for fold_idx, fold_size in enumerate(fold_sizes):\n+                start, stop = current, current + fold_size\n+                test_folds[indices[start:stop]] = fold_idx\n+                current = stop\n \n         return test_folds\n \n"}
{"instance_id":"scikit-learn__scikit-learn-13135","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py\nindex dd969c12b..f180d948b 100644\n--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n@@ -172,6 +172,7 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):\n                 # 1D k-means procedure\n                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n+                centers.sort()  # Sort the centers to ensure monotonic bin edges\n                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n \n@@ -293,3 +294,4 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):\n             Xinv[:, jj] = bin_centers[np.int_(Xinv[:, jj])]\n \n         return Xinv\n+\n"}
{"instance_id":"scikit-learn__scikit-learn-13328","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 937cc20f8..75e23b798 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -532,6 +532,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                 FutureWarning)\n \n         # make sure we actually converted to numeric:\n+        # make sure boolean arrays are converted to float\n+        if dtype_numeric and array.dtype.kind == \"b\":\n+            array = array.astype(np.float64)\n         if dtype_numeric and array.dtype.kind == \"O\":\n             array = array.astype(np.float64)\n         if not allow_nd and array.ndim >= 3:\n"}
{"instance_id":"scikit-learn__scikit-learn-14053","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 1fe11e596..cddb52822 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -890,7 +890,12 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        feature_names_ = []\n+        for i in tree_.feature:\n+            if i != _tree.TREE_UNDEFINED and i < len(feature_names):\n+                feature_names_.append(feature_names[i])\n+            else:\n+                feature_names_.append(\"undefined\")\n     else:\n         feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n \n"}
{"instance_id":"scikit-learn__scikit-learn-14141","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex e5d3141bf..0538e2e97 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -46,6 +46,7 @@ def _get_deps_info():\n         \"numpy\",\n         \"scipy\",\n         \"Cython\",\n+        \"joblib\",\n         \"pandas\",\n         \"matplotlib\",\n     ]\n@@ -115,3 +116,4 @@ def show_versions():\n     print('\\nPython deps:')\n     for k, stat in deps_info.items():\n         print(\"{k:>10}: {stat}\".format(k=k, stat=stat))\n+\n"}
{"instance_id":"scikit-learn__scikit-learn-14496","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\nindex 4f7eb11ab..228d88c4e 100755\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -437,7 +437,7 @@ if metric=’precomputed’.\n     n_samples = X.shape[0]\n     _validate_size(min_samples, n_samples, 'min_samples')\n     if min_samples <= 1:\n-        min_samples = max(2, min_samples * n_samples)\n+        min_samples = int(round(max(2, min_samples * n_samples)))\n \n     # Start all points as 'unprocessed' ##\n     reachability_ = np.empty(n_samples)\n"}
{"instance_id":"scikit-learn__scikit-learn-14629","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\nindex 95669a212..2ea8553d2 100644\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -855,11 +855,31 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n     predictions = func(X_test)\n     if method in ['decision_function', 'predict_proba', 'predict_log_proba']:\n         if isinstance(predictions, list):\n-            predictions = [_enforce_prediction_order(\n-                estimator.classes_[i_label], predictions[i_label],\n-                n_classes=len(set(y[:, i_label])), method=method)\n-                for i_label in range(len(predictions))]\n+            if estimator.__class__.__name__ == 'MultiOutputClassifier':\n+                predictions = [\n+                    _enforce_prediction_order(\n+                        estimator.estimators_[i_label].classes_,\n+                        predictions[i_label],\n+                        n_classes=len(set(y[:, i_label])),\n+                        method=method\n+                    )\n+                    for i_label in range(len(predictions))\n+                ]\n+            else:\n+                predictions = [\n+                    _enforce_prediction_order(\n+                        estimator.classes_,\n+                        predictions[i_label],\n+                        n_classes=len(set(y[:, i_label])),\n+                        method=method\n+                    )\n+                    for i_label in range(len(predictions))\n+                ]\n         else:\n+            n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]\n+            predictions = _enforce_prediction_order(\n+                estimator.classes_, predictions, n_classes, method\n+            )\n             # A 2D y array should be a binary label indicator matrix\n             n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]\n             predictions = _enforce_prediction_order(\n"}
{"instance_id":"scikit-learn__scikit-learn-14710","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\nindex ad6a5a8ca..0b41b4a7b 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py\n@@ -426,11 +426,16 @@ class BaseHistGradientBoosting(BaseEstimator, ABC):\n \n         Scores are computed on validation data or on training data.\n         \"\"\"\n+        if hasattr(self, 'classes_'):\n+            y_small_train = self.classes_[y_small_train.astype(int)]\n+\n         self.train_score_.append(\n             self.scorer_(self, X_binned_small_train, y_small_train)\n         )\n \n         if self._use_validation_data:\n+            if hasattr(self, 'classes_'):\n+                y_val = self.classes_[y_val.astype(int)]\n             self.validation_score_.append(\n                 self.scorer_(self, X_binned_val, y_val)\n             )\n"}
{"instance_id":"scikit-learn__scikit-learn-15100","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex bb5a9d646..11236d958 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -130,10 +130,7 @@ def strip_accents_unicode(s):\n         ASCII equivalent.\n     \"\"\"\n     normalized = unicodedata.normalize('NFKD', s)\n-    if normalized == s:\n-        return s\n-    else:\n-        return ''.join([c for c in normalized if not unicodedata.combining(c)])\n+    return ''.join([c for c in normalized if not unicodedata.combining(c)])\n \n \n def strip_accents_ascii(s):\n"}
{"instance_id":"scikit-learn__scikit-learn-25102","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..907195e40 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    dtypes=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -36,6 +37,9 @@ def _wrap_in_pandas_container(\n     index : array-like, default=None\n         Index for data.\n \n+    dtypes : Series, default=None\n+        Dtypes for data.\n+\n     Returns\n     -------\n     dataframe : DataFrame\n@@ -57,9 +61,19 @@ def _wrap_in_pandas_container(\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if dtypes is not None:\n+            dtypes = dtypes[dtypes.index.isin(data_to_wrap.columns)]\n+            if len(dtypes):\n+                data_to_wrap = data_to_wrap.astype(dtypes)\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        dtypes = dtypes[dtypes.index.isin(df.columns)]\n+        if len(dtypes):\n+            df = df.astype(dtypes)\n+\n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,10 +141,12 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    dtypes = original_input.dtypes if hasattr(original_input, \"dtypes\") else None\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n         columns=estimator.get_feature_names_out,\n+        dtypes=dtypes,\n     )\n \n \n@@ -277,3 +293,5 @@ def _safe_set_output(estimator, *, transform=None):\n             \"is not available.\"\n         )\n     return estimator.set_output(transform=transform)\n+\n+\n"}
{"instance_id":"scikit-learn__scikit-learn-25232","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 1d918bc0c..f0c737fb3 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -309,7 +309,10 @@ class IterativeImputer(_BaseImputer):\n         random_state=None,\n         add_indicator=False,\n         keep_empty_features=False,\n+        fill_value=None,\n     ):\n+        self.fill_value = fill_value\n+        self._parameter_constraints[\"fill_value\"] = [None, Interval(Real, None, None, closed=\"both\"), str]\n         super().__init__(\n             missing_values=missing_values,\n             add_indicator=add_indicator,\n@@ -613,6 +616,7 @@ class IterativeImputer(_BaseImputer):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n+                fill_value=self.fill_value if self.initial_strategy == \"constant\" else None,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n"}
{"instance_id":"scikit-learn__scikit-learn-25931","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex 4d6c1c3f0..6515dc02d 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -343,6 +343,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             # we take the opposite as we consider the opposite of their score.\n             self.offset_ = -0.5\n             return self\n+        self._check_feature_names(X, reset=True)\n \n         # else, define offset_ wrt contamination parameter\n         self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex eb56caa5e..9016cceea 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -642,6 +642,9 @@ def check_array(\n     estimator=None,\n     input_name=\"\",\n ):\n+    estimator_name = _check_estimator_name(estimator)\n+    if hasattr(array, \"columns\"):\n+        _check_feature_names_in(estimator, array.columns)\n \n     \"\"\"Input validation on an array, list, sparse matrix or similar.\n \n"}
{"instance_id":"scikit-learn__scikit-learn-25973","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/feature_selection/_sequential.py b/sklearn/feature_selection/_sequential.py\nindex e983c55de..270089810 100644\n--- a/sklearn/feature_selection/_sequential.py\n+++ b/sklearn/feature_selection/_sequential.py\n@@ -177,15 +177,19 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n         cv=5,\n         n_jobs=None,\n     ):\n-\n         self.estimator = estimator\n         self.n_features_to_select = n_features_to_select\n         self.tol = tol\n         self.direction = direction\n         self.scoring = scoring\n-        self.cv = cv\n-        self.n_jobs = n_jobs\n \n+        # If cv is an iterable but not a cv splitter or string, materialize it\n+        if hasattr(cv, \"__iter__\") and not (hasattr(cv, \"split\") or isinstance(cv, str)):\n+            self.cv = list(cv)\n+        else:\n+            self.cv = cv\n+\n+        self.n_jobs = n_jobs\n     def fit(self, X, y=None):\n         \"\"\"Learn the features to select from X.\n \n@@ -305,11 +309,15 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n             if self.direction == \"backward\":\n                 candidate_mask = ~candidate_mask\n             X_new = X[:, candidate_mask]\n+            if hasattr(self.cv, \"__iter__\") and not (hasattr(self.cv, \"split\") or isinstance(self.cv, str)):\n+                cv = list(self.cv)\n+            else:\n+                cv = self.cv\n             scores[feature_idx] = cross_val_score(\n                 estimator,\n                 X_new,\n                 y,\n-                cv=self.cv,\n+                cv=cv,\n                 scoring=self.scoring,\n                 n_jobs=self.n_jobs,\n             ).mean()\ndiff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex dded962a3..a5389087d 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2450,15 +2450,17 @@ def check_cv(cv=5, y=None, *, classifier=False):\n         else:\n             return KFold(cv)\n \n-    if not hasattr(cv, \"split\") or isinstance(cv, str):\n-        if not isinstance(cv, Iterable) or isinstance(cv, str):\n-            raise ValueError(\n-                \"Expected cv as an integer, cross-validation \"\n-                \"object (from sklearn.model_selection) \"\n-                \"or an iterable. Got %s.\" % cv\n-            )\n+    # Check if cv is an iterable first\n+    if isinstance(cv, Iterable) and not (hasattr(cv, \"split\") or isinstance(cv, str)):\n         return _CVIterableWrapper(cv)\n \n+    if not hasattr(cv, \"split\") or isinstance(cv, str):\n+        raise ValueError(\n+            \"Expected cv as an integer, cross-validation \"\n+            \"object (from sklearn.model_selection) \"\n+            \"or an iterable. Got %s.\" % cv\n+        )\n+\n     return cv  # New style cv objects are passed without any modification\n \n \n"}
{"instance_id":"scikit-learn__scikit-learn-26194","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\nindex 0cdead923..4018bc361 100644\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -1083,7 +1083,10 @@ def roc_curve(\n     # to make sure that the curve starts at (0, 0)\n     tps = np.r_[0, tps]\n     fps = np.r_[0, fps]\n-    thresholds = np.r_[thresholds[0] + 1, thresholds]\n+    if thresholds[0] <= 1:\n+        thresholds = np.r_[1.0, thresholds]\n+    else:\n+        thresholds = np.r_[thresholds[0] + 1, thresholds]\n \n     if fps[-1] <= 0:\n         warnings.warn(\n"}
{"instance_id":"scikit-learn__scikit-learn-26323","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1..6eb607769 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -303,6 +303,14 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Handle remainder if it's an estimator\n+        if (\n+            hasattr(self, \"remainder\")\n+            and self.remainder not in {\"passthrough\", \"drop\"}\n+            and hasattr(self.remainder, \"fit\")\n+        ):\n+            _safe_set_output(self.remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\n"}
{"instance_id":"scikit-learn__scikit-learn-9288","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex b7fbdf7da..a03053214 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -378,16 +378,14 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n                 best_n_iter = n_iter_\n     else:\n         # parallelisation of k-means runs\n-        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n         results = Parallel(n_jobs=n_jobs, verbose=0)(\n             delayed(kmeans_single)(X, sample_weight, n_clusters,\n                                    max_iter=max_iter, init=init,\n                                    verbose=verbose, tol=tol,\n                                    precompute_distances=precompute_distances,\n                                    x_squared_norms=x_squared_norms,\n-                                   # Change seed to ensure variety\n-                                   random_state=seed)\n-            for seed in seeds)\n+                                   random_state=random_state)\n+            for _ in range(n_init))\n         # Get results with the lowest inertia\n         labels, inertia, centers, n_iters = zip(*results)\n         best = np.argmin(inertia)\n"}
{"instance_id":"sphinx-doc__sphinx-10323","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex dc44ed314..16101ef9f 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -224,10 +224,9 @@ class LiteralIncludeReader:\n                        self.start_filter,\n                        self.end_filter,\n                        self.lines_filter,\n+                       self.dedent_filter,\n                        self.prepend_filter,\n-                       self.append_filter,\n-                       self.dedent_filter]\n-            lines = self.read_file(self.filename, location=location)\n+                       self.append_filter]\n             for func in filters:\n                 lines = func(lines, location=location)\n \n@@ -343,7 +342,13 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            if lines:\n+                import re\n+                indent_match = re.match(r'^(\\s*)', lines[0])\n+                indent = indent_match.group(1)\n+            else:\n+                indent = ''\n+            lines.insert(0, indent + prepend + '\\n')\n \n         return lines\n \n"}
{"instance_id":"sphinx-doc__sphinx-10435","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 9437fe9a5..a679035c3 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -110,6 +110,7 @@ class CodeBlock(SphinxDirective):\n     def run(self) -> List[Node]:\n         document = self.state.document\n         code = '\\n'.join(self.content)\n+        code = code.strip()\n         location = self.state_machine.get_source_and_line(self.lineno)\n \n         linespec = self.options.get('emphasize-lines')\ndiff --git a/sphinx/highlighting.py b/sphinx/highlighting.py\nindex a7e5e4940..f1fe15fdd 100644\n--- a/sphinx/highlighting.py\n+++ b/sphinx/highlighting.py\n@@ -138,6 +138,7 @@ class PygmentsBridge:\n         if not isinstance(source, str):\n             source = source.decode()\n \n+        source = source.strip()\n         lexer = self.get_lexer(source, lang, opts, force, location)\n \n         # highlight via Pygments\ndiff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 7cc5fd14b..2248d1ced 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -375,6 +375,7 @@ def code_role(name: str, rawtext: str, text: str, lineno: int,\n \n     if language and language not in classes:\n         classes.append(language)\n+    text = text.strip()\n \n     node = nodes.literal(rawtext, text, classes=classes, language=language)\n \ndiff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..792814526 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -721,10 +721,10 @@ class LaTeXTranslator(SphinxTranslator):\n         pass\n \n     def visit_desc_inline(self, node: Element) -> None:\n-        self.body.append(r'\\sphinxcode{\\sphinxupquote{')\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n \n     def depart_desc_inline(self, node: Element) -> None:\n-        self.body.append('}}')\n+        self.body.append('}}%')\n \n     # Nodes for high-level structure in signatures\n     ##############################################\n"}
{"instance_id":"sphinx-doc__sphinx-10449","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..e76545ebd 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1578,7 +1578,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if self.config.autodoc_typehints_format == \"short\":\n             kwargs.setdefault('unqualified_typehints', True)\n \n-        sig = super().format_signature()\n+        if self.config.autodoc_typehints == \"description\":\n+            kwargs.setdefault('show_annotation', False)\n+\n+        sig = super().format_signature(**kwargs)\n         sigs = []\n \n         overloads = self.get_overloaded_signatures()\n"}
{"instance_id":"sphinx-doc__sphinx-10466","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex e8bc547b7..5cdbd4747 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -32,7 +32,7 @@ class Message:\n     \"\"\"An entry of translatable message.\"\"\"\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        self.locations = list(dict.fromkeys(locations))  # Remove duplicates while preserving order\n         self.uuids = uuids\n \n \n@@ -119,7 +119,7 @@ class I18nBuilder(Builder):\n     def init(self) -> None:\n         super().init()\n         self.env.set_versioning_method(self.versioning_method,\n-                                       self.env.config.gettext_uuid)\n+                                   self.env.config.gettext_uuid)\n         self.tags = I18nTags()\n         self.catalogs: DefaultDict[str, Catalog] = defaultdict(Catalog)\n \n@@ -294,3 +294,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n+\n"}
{"instance_id":"sphinx-doc__sphinx-10614","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/builders/html/__init__.py b/sphinx/builders/html/__init__.py\nindex 832b9a91a..d65cd9484 100644\n--- a/sphinx/builders/html/__init__.py\n+++ b/sphinx/builders/html/__init__.py\n@@ -669,9 +669,9 @@ class StandaloneHTMLBuilder(Builder):\n \n         self.secnumbers = self.env.toc_secnumbers.get(docname, {})\n         self.fignumbers = self.env.toc_fignumbers.get(docname, {})\n+        self.current_docname = docname\n         self.imgpath = relative_uri(self.get_target_uri(docname), '_images')\n         self.dlpath = relative_uri(self.get_target_uri(docname), '_downloads')\n-        self.current_docname = docname\n         self.docwriter.write(doctree, destination)\n         self.docwriter.assemble_parts()\n         body = self.docwriter.parts['fragment']\ndiff --git a/sphinx/ext/graphviz.py b/sphinx/ext/graphviz.py\nindex 8b21d9e3b..b75e2fffd 100644\n--- a/sphinx/ext/graphviz.py\n+++ b/sphinx/ext/graphviz.py\n@@ -33,6 +33,7 @@ from sphinx.writers.latex import LaTeXTranslator\n from sphinx.writers.manpage import ManualPageTranslator\n from sphinx.writers.texinfo import TexinfoTranslator\n from sphinx.writers.text import TextTranslator\n+from sphinx.util.osutil import relative_uri\n \n if TYPE_CHECKING:\n     from sphinx.config import Config\n@@ -235,10 +236,9 @@ def fix_svg_relative_paths(self: SphinxTranslator, filepath: str) -> None:\n             continue\n \n         old_path = path.join(self.builder.outdir, url)\n-        new_path = path.relpath(\n-            old_path,\n-            start=path.join(self.builder.outdir, self.builder.imgpath),\n-        )\n+        doc_uri = self.builder.get_target_uri(self.builder.current_docname)\n+        new_path = relative_uri(doc_uri, url)\n+        new_path = relative_uri(doc_uri, url)\n         modified_url = urlunsplit((scheme, hostname, new_path, query, fragment))\n \n         element.set(href_name, modified_url)\ndiff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 6e3985512..3a641f654 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -58,6 +58,7 @@ from sphinx.util.typing import OptionSpec\n from sphinx.writers.html import HTML5Translator\n from sphinx.writers.latex import LaTeXTranslator\n from sphinx.writers.texinfo import TexinfoTranslator\n+from sphinx.util.osutil import relative_uri\n \n module_sig_re = re.compile(r'''^(?:([\\w.]*)\\.)?  # module names\n                            (\\w+)  \\s* $          # class/final module name\n"}
{"instance_id":"sphinx-doc__sphinx-10673","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 35e16e623..49aacd23e 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -118,7 +118,7 @@ class TocTree(SphinxDirective):\n                 docname = docname_join(self.env.docname, docname)\n                 if url_re.match(ref) or ref == 'self':\n                     toctree['entries'].append((title, ref))\n-                elif docname not in self.env.found_docs:\n+                elif docname not in self.env.found_docs and docname not in ('genindex', 'modindex', 'search'):\n                     if excluded(self.env.doc2path(docname, False)):\n                         message = __('toctree contains reference to excluded document %r')\n                         subtype = 'excluded'\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex b0d21b492..ffb1d97b8 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -835,7 +835,12 @@ class StandardDomain(Domain):\n             # contain the section name after the label\n             docname, labelid, sectname = self.labels.get(target, ('', '', ''))\n         if not docname:\n-            return None\n+            if target in ('genindex', 'modindex', 'search'):\n+                docname = target\n+                labelid = ''\n+                sectname = _(target.capitalize())\n+            else:\n+                return None\n \n         return self.build_reference_node(fromdocname, builder,\n                                          docname, labelid, sectname, 'ref')\ndiff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 9678e3c7c..d39e287e6 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -165,14 +165,27 @@ class TocTree:\n                                        ref, location=toctreenode)\n                 except KeyError:\n                     # this is raised if the included file does not exist\n-                    if excluded(self.env.doc2path(ref, False)):\n+                    if ref in ('genindex', 'modindex', 'search'):\n+                        # Handle built-in documents\n+                        reference = nodes.reference('', '', internal=True,\n+                                                    refuri=ref,\n+                                                    anchorname='',\n+                                                    *[nodes.Text(title or ref)])\n+                        para = addnodes.compact_paragraph('', '', reference)\n+                        item = nodes.list_item('', para)\n+                        toc = nodes.bullet_list('', item)\n+                    elif excluded(self.env.doc2path(ref, False)):\n                         message = __('toctree contains reference to excluded document %r')\n+                        logger.warning(message, ref, location=toctreenode)\n+                        continue\n                     elif not included(self.env.doc2path(ref, False)):\n                         message = __('toctree contains reference to non-included document %r')\n+                        logger.warning(message, ref, location=toctreenode)\n+                        continue\n                     else:\n                         message = __('toctree contains reference to nonexisting document %r')\n-\n-                    logger.warning(message, ref, location=toctreenode)\n+                        logger.warning(message, ref, location=toctreenode)\n+                        continue\n                 else:\n                     # if titles_only is given, only keep the main title and\n                     # sub-toctrees\ndiff --git a/sphinx/environment/collectors/toctree.py b/sphinx/environment/collectors/toctree.py\nindex 52a8fd8d1..205d41e0d 100644\n--- a/sphinx/environment/collectors/toctree.py\n+++ b/sphinx/environment/collectors/toctree.py\n@@ -175,6 +175,9 @@ class TocTreeCollector(EnvironmentCollector):\n                 if url_re.match(ref) or ref == 'self':\n                     # don't mess with those\n                     continue\n+                elif ref in ('genindex', 'modindex', 'search'):\n+                    # Handle built-in documents, no need to assign section numbers\n+                    continue\n                 elif ref in assigned:\n                     logger.warning(__('%s is already assigned section numbers '\n                                       '(nested numbered toctree?)'), ref,\n@@ -186,6 +189,16 @@ class TocTreeCollector(EnvironmentCollector):\n                     _walk_toc(env.tocs[ref], secnums, depth, env.titles.get(ref))\n                     if secnums != old_secnumbers.get(ref):\n                         rewrite_needed.append(ref)\n+                    logger.warning(__('%s is already assigned section numbers '\n+                                      '(nested numbered toctree?)'), ref,\n+                                   location=toctreenode, type='toc', subtype='secnum')\n+                elif ref in env.tocs:\n+                    secnums: Dict[str, Tuple[int, ...]] = {}\n+                    env.toc_secnumbers[ref] = secnums\n+                    assigned.add(ref)\n+                    _walk_toc(env.tocs[ref], secnums, depth, env.titles.get(ref))\n+                    if secnums != old_secnumbers.get(ref):\n+                        rewrite_needed.append(ref)\n \n         for docname in env.numbered_toctrees:\n             assigned.add(docname)\n"}
{"instance_id":"sphinx-doc__sphinx-11510","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..0e041bc35 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -376,6 +376,11 @@ class Include(BaseInclude, SphinxDirective):\n         rel_filename, filename = self.env.relfn2path(self.arguments[0])\n         self.arguments[0] = filename\n         self.env.note_included(filename)\n+        docname = self.env.path2doc(filename)\n+        if docname:\n+            with open(filename, 'r', encoding=self.config.source_encoding) as f:\n+                content = f.read()\n+            self.env.app.emit('source-read', docname, [content])\n         return super().run()\n \n \ndiff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex cf698ea6d..8d74d9c6d 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -576,6 +576,10 @@ class BuildEnvironment:\n         if doc:\n             self.included[self.docname].add(doc)\n \n+            filepath = self.doc2path(doc)\n+            with open(filepath, 'r', encoding=self.config.source_encoding) as f:\n+                content = f.read()\n+            self.app.emit('source-read', doc, [content])\n     def note_reread(self) -> None:\n         \"\"\"Add the current document to the list of documents that will\n         automatically be re-read at the next build.\n"}
{"instance_id":"sphinx-doc__sphinx-7440","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex d820cfe5c..edc110d2a 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -305,7 +305,7 @@ def make_glossary_term(env: \"BuildEnvironment\", textnodes: Iterable[Node], index\n         term['ids'].append(node_id)\n \n     std = cast(StandardDomain, env.get_domain('std'))\n-    std.note_object('term', termtext.lower(), node_id, location=term)\n+    std.note_object('term', termtext, node_id, location=term)\n \n     # add an index entry too\n     indexnode = addnodes.index()\n"}
{"instance_id":"sphinx-doc__sphinx-7454","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f917dbdf3..b4f36604c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -21,6 +21,14 @@ from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n \n \n+def stringify(annotation: Any) -> str:\n+    \"\"\"Stringify type annotation object, ensuring 'None' is handled appropriately.\"\"\"\n+    result = typing.stringify(annotation)\n+    if result == 'None':\n+        return 'builtins.None'\n+    return result\n+\n+\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n     \"\"\"Record type hints to env object.\"\"\"\n@@ -31,9 +39,9 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation[param.name] = stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                annotation['return'] = stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n@@ -68,7 +76,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     if desc:\n         # insert just before sub object descriptions (ex. methods, nested classes, etc.)\n         index = node.index(desc[0])\n-        node.insert(index - 1, [field_list])\n+        node.insert(index - 1, field_list)\n     else:\n         node += field_list\n \n@@ -126,7 +134,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n         node += field\n \n \n@@ -139,3 +147,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n+\n"}
{"instance_id":"sphinx-doc__sphinx-7462","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..6c8dc13fc 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -115,10 +115,11 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return result\n         elif isinstance(node, ast.Tuple):\n             result = []\n-            for elem in node.elts:\n-                result.extend(unparse(elem))\n-                result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if node.elts:\n+                for elem in node.elts:\n+                    result.extend(unparse(elem))\n+                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\ndiff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 4d8aa8955..fb2a7152d 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -114,7 +114,10 @@ def unparse(node: ast.AST) -> str:\n     elif isinstance(node, ast.UnaryOp):\n         return \"%s %s\" % (unparse(node.op), unparse(node.operand))\n     elif isinstance(node, ast.Tuple):\n-        return \", \".join(unparse(e) for e in node.elts)\n+        if node.elts:\n+            return \", \".join(unparse(e) for e in node.elts)\n+        else:\n+            return \"()\"\n     elif sys.version_info > (3, 6) and isinstance(node, ast.Constant):\n         # this branch should be placed at last\n         return repr(node.value)\n"}
{"instance_id":"sphinx-doc__sphinx-7590","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/addnodes.py b/sphinx/addnodes.py\nindex 847a6d715..8d4672f69 100644\n--- a/sphinx/addnodes.py\n+++ b/sphinx/addnodes.py\n@@ -113,6 +113,8 @@ class desc_signature(nodes.Part, nodes.Inline, nodes.TextElement):\n     \"\"\"\n \n \n+    is_udl = False\n+    \"\"\"Boolean indicating if the signature represents a C++ User Defined Literal.\"\"\"\n class desc_signature_line(nodes.Part, nodes.Inline, nodes.FixedTextElement):\n     \"\"\"Node for a line in a multi-line object signatures.\n \ndiff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py\nindex 57f775272..4890875c1 100644\n--- a/sphinx/ext/autosummary/__init__.py\n+++ b/sphinx/ext/autosummary/__init__.py\n@@ -346,10 +346,15 @@ class Autosummary(SphinxDirective):\n             except TypeError:\n                 # the documenter does not support ``show_annotation`` option\n                 sig = documenter.format_signature()\n-\n             if not sig:\n                 sig = ''\n             else:\n+                if documenter.objtype.startswith('cpp'):\n+                    # Avoid mangling signatures for C++ to preserve User Defined Literals\n+                    sig = sig\n+                else:\n+                    max_chars = max(10, max_item_chars - len(display_name))\n+                    sig = mangle_signature(sig, max_chars=max_chars)\n                 max_chars = max(10, max_item_chars - len(display_name))\n                 sig = mangle_signature(sig, max_chars=max_chars)\n \ndiff --git a/sphinx/highlighting.py b/sphinx/highlighting.py\nindex 4dc9ce543..1ca46c598 100644\n--- a/sphinx/highlighting.py\n+++ b/sphinx/highlighting.py\n@@ -19,7 +19,7 @@ from pygments.formatters import HtmlFormatter, LatexFormatter\n from pygments.lexer import Lexer\n from pygments.lexers import get_lexer_by_name, guess_lexer\n from pygments.lexers import PythonLexer, Python3Lexer, PythonConsoleLexer, \\\n-    CLexer, TextLexer, RstLexer\n+    CLexer, CppLexer, TextLexer, RstLexer\n from pygments.style import Style\n from pygments.styles import get_style_by_name\n from pygments.util import ClassNotFound\ndiff --git a/sphinx/util/cfamily.py b/sphinx/util/cfamily.py\nindex 790a492a5..bcca35d59 100644\n--- a/sphinx/util/cfamily.py\n+++ b/sphinx/util/cfamily.py\n@@ -67,6 +67,21 @@ char_literal_re = re.compile(r'''(?x)\n     )'\n ''')\n \n+user_defined_literal_re = re.compile(r'''(?x)\n+    # Regex for C++ User Defined Literals\n+    (\n+        (?:[0-9]+\n+            (?:\\.[0-9]+)?\n+            (?:[eE][+-]?[0-9]+)?\n+        )\n+      | (?:0[xX][0-9a-fA-F]+)\n+      | (?:0[bB][01]+)\n+      | (?:0[0-7]+)\n+      | '(?:\\\\.|[^\\\\'])*'\n+      | \"(?:\\\\.|[^\\\\\"])*\"\n+    )\n+    [a-zA-Z_][a-zA-Z0-9_]*  # UDL suffix\n+''')\n \n def verify_description_mode(mode: str) -> None:\n     if mode not in ('lastIsName', 'noneIsName', 'markType', 'markName', 'param'):\ndiff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex 9390ba5de..491d6dafa 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -1747,17 +1747,17 @@ class LaTeXTranslator(SphinxTranslator):\n                 labels += self.hypertarget_to(node.parent)\n             if labels and not self.in_footnote:\n                 self.body.append('\\n\\\\def\\\\sphinxLiteralBlockLabel{' + labels + '}')\n-\n             lang = node.get('language', 'default')\n+            if lang == 'cpp':\n+                lang = 'c++'  # Ensure Pygments uses the correct lexer for C++\n             linenos = node.get('linenos', False)\n             highlight_args = node.get('highlight_args', {})\n             highlight_args['force'] = node.get('force', False)\n-            if lang is self.builder.config.highlight_language:\n+            if lang == self.builder.config.highlight_language:\n                 # only pass highlighter options for original language\n                 opts = self.builder.config.highlight_options\n             else:\n                 opts = {}\n-\n             hlcode = self.highlighter.highlight_block(\n                 node.rawsource, lang, opts=opts, linenos=linenos,\n                 location=(self.curfilestack[-1], node.line), **highlight_args\n@@ -1766,8 +1766,6 @@ class LaTeXTranslator(SphinxTranslator):\n                 self.body.append('\\n\\\\sphinxSetupCodeBlockInFootnote')\n                 hlcode = hlcode.replace('\\\\begin{Verbatim}',\n                                         '\\\\begin{sphinxVerbatim}')\n-            # if in table raise verbatim flag to avoid \"tabulary\" environment\n-            # and opt for sphinxVerbatimintable to handle caption & long lines\n             elif self.table:\n                 self.table.has_problematic = True\n                 self.table.has_verbatim = True\n@@ -1778,6 +1776,25 @@ class LaTeXTranslator(SphinxTranslator):\n                                         '\\\\begin{sphinxVerbatim}')\n             # get consistent trailer\n             hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n+            if self.table and not self.in_footnote:\n+                hlcode += '\\\\end{sphinxVerbatimintable}'\n+            else:\n+                hlcode += '\\\\end{sphinxVerbatim}'\n+            hllines = str(highlight_args.get('hl_lines', []))[1:-1]\n+            if hllines:\n+                self.body.append('\\n\\\\fvset{hllines={, %s,}}%%' % hllines)\n+            self.body.append('\\n' + hlcode + '\\n')\n+            if hllines:\n+                self.body.append('\\\\sphinxresetverbatimhllines\\n')\n+            raise nodes.SkipNode\n+        else:\n+            self.table.has_verbatim = True\n+            hlcode = hlcode.replace('\\\\begin{Verbatim}',\n+                                    '\\\\begin{sphinxVerbatim}')\n+        # get consistent trailer\n+                                        '\\\\begin{sphinxVerbatim}')\n+            # get consistent trailer\n+            hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n             if self.table and not self.in_footnote:\n                 hlcode += '\\\\end{sphinxVerbatimintable}'\n             else:\n"}
{"instance_id":"sphinx-doc__sphinx-7748","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex b801f4030..8890180a5 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -6666,47 +6666,38 @@ class CPPObject(ObjectDescription):\n         env.temp_data['cpp:last_symbol'] = None\n         return super().run()\n \n-    def handle_signature(self, sig: str, signode: desc_signature) -> ASTDeclaration:\n+    def handle_signature(self, sig: str, signode: desc_signature) -> List[ASTDeclaration]:\n         parentSymbol = self.env.temp_data['cpp:parent_symbol']\n \n         parser = DefinitionParser(sig, location=signode, config=self.env.config)\n         try:\n-            ast = self.parse_definition(parser)\n+            ast_list = parser.parse_declaration(self.object_type, self.objtype)\n             parser.assert_end()\n         except DefinitionError as e:\n             logger.warning(e, location=signode)\n-            # It is easier to assume some phony name than handling the error in\n-            # the possibly inner declarations.\n             name = _make_phony_error_name()\n             symbol = parentSymbol.add_name(name)\n             self.env.temp_data['cpp:last_symbol'] = symbol\n             raise ValueError\n \n-        try:\n-            symbol = parentSymbol.add_declaration(ast, docname=self.env.docname)\n-            # append the new declaration to the sibling list\n-            assert symbol.siblingAbove is None\n-            assert symbol.siblingBelow is None\n-            symbol.siblingAbove = self.env.temp_data['cpp:last_symbol']\n-            if symbol.siblingAbove is not None:\n-                assert symbol.siblingAbove.siblingBelow is None\n-                symbol.siblingAbove.siblingBelow = symbol\n-            self.env.temp_data['cpp:last_symbol'] = symbol\n-        except _DuplicateSymbolError as e:\n-            # Assume we are actually in the old symbol,\n-            # instead of the newly created duplicate.\n-            self.env.temp_data['cpp:last_symbol'] = e.symbol\n-            logger.warning(\"Duplicate declaration, %s\", sig, location=signode)\n-\n-        if ast.objectType == 'enumerator':\n-            self._add_enumerator_to_parent(ast)\n+        declarations = []\n+        for ast in ast_list:\n+            try:\n+                symbol = parentSymbol.add_declaration(ast, docname=self.env.docname)\n+                symbol.siblingAbove = self.env.temp_data['cpp:last_symbol']\n+                if symbol.siblingAbove is not None:\n+                    symbol.siblingAbove.siblingBelow = symbol\n+                self.env.temp_data['cpp:last_symbol'] = symbol\n+                declarations.append(ast)\n+            except _DuplicateSymbolError as e:\n+                self.env.temp_data['cpp:last_symbol'] = e.symbol\n+                logger.warning(\"Duplicate declaration, %s\", sig, location=signode)\n \n-        # note: handle_signature may be called multiple time per directive,\n-        # if it has multiple signatures, so don't mess with the original options.\n         options = dict(self.options)\n         options['tparam-line-spec'] = 'tparam-line-spec' in self.options\n-        self.describe_signature(signode, ast, options)\n-        return ast\n+        for ast in declarations:\n+            self.describe_signature(signode, ast, options)\n+        return declarations\n \n     def before_content(self) -> None:\n         lastSymbol = self.env.temp_data['cpp:last_symbol']  # type: Symbol\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex fc1136ae2..dcbcd49ef 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -354,89 +354,73 @@ class PyObject(ObjectDescription):\n         \"\"\"\n         return False\n \n-    def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n-        \"\"\"Transform a Python signature into RST nodes.\n+    def handle_signature(self, sig: str, signode: desc_signature) -> List[Tuple[str, str]]:\n+        \"\"\"Transform Python signatures into RST nodes and return a list of (fullname, classname).\"\"\"\n+        signatures = []\n+        for part in sig.splitlines():\n+            m = py_sig_re.match(part)\n+            if m is None:\n+                continue\n+            prefix, name, arglist, retann = m.groups()\n+            modname = self.options.get('module', self.env.ref_context.get('py:module'))\n+            classname = self.env.ref_context.get('py:class')\n+            if classname:\n+                add_module = False\n+                if prefix and (prefix == classname or prefix.startswith(classname + \".\")):\n+                    fullname = prefix + name\n+                    prefix = prefix[len(classname):].lstrip('.')\n+                elif prefix:\n+                    fullname = classname + '.' + prefix + name\n+                else:\n+                    fullname = classname + '.' + name\n+            else:\n+                add_module = True\n+                if prefix:\n+                    classname = prefix.rstrip('.')\n+                    fullname = prefix + name\n+                else:\n+                    classname = ''\n+                    fullname = name\n \n-        Return (fully qualified name of the thing, classname if any).\n+            signode['module'] = modname\n+            signode['class'] = classname\n+            signode['fullname'] = fullname\n \n-        If inside a class, the current class name is handled intelligently:\n-        * it is stripped from the displayed name if present\n-        * it is added to the full name (return value) if not present\n-        \"\"\"\n-        m = py_sig_re.match(sig)\n-        if m is None:\n-            raise ValueError\n-        prefix, name, arglist, retann = m.groups()\n+            sig_prefix = self.get_signature_prefix(sig)\n+            if sig_prefix:\n+                signode += addnodes.desc_annotation(sig_prefix, sig_prefix)\n \n-        # determine module and class name (if applicable), as well as full name\n-        modname = self.options.get('module', self.env.ref_context.get('py:module'))\n-        classname = self.env.ref_context.get('py:class')\n-        if classname:\n-            add_module = False\n-            if prefix and (prefix == classname or\n-                           prefix.startswith(classname + \".\")):\n-                fullname = prefix + name\n-                # class name is given again in the signature\n-                prefix = prefix[len(classname):].lstrip('.')\n-            elif prefix:\n-                # class name is given in the signature, but different\n-                # (shouldn't happen)\n-                fullname = classname + '.' + prefix + name\n-            else:\n-                # class name is not given in the signature\n-                fullname = classname + '.' + name\n-        else:\n-            add_module = True\n             if prefix:\n-                classname = prefix.rstrip('.')\n-                fullname = prefix + name\n+                signode += addnodes.desc_addname(prefix, prefix)\n+            elif add_module and self.env.config.add_module_names:\n+                if modname and modname != 'exceptions':\n+                    nodetext = modname + '.'\n+                    signode += addnodes.desc_addname(nodetext, nodetext)\n+\n+            signode += addnodes.desc_name(name, name)\n+            if arglist:\n+                try:\n+                    signode += _parse_arglist(arglist)\n+                except SyntaxError:\n+                    _pseudo_parse_arglist(signode, arglist)\n+                except NotImplementedError as exc:\n+                    logger.warning(\"could not parse arglist (%r): %s\", arglist, exc, location=signode)\n+                    _pseudo_parse_arglist(signode, arglist)\n             else:\n-                classname = ''\n-                fullname = name\n+                if self.needs_arglist():\n+                    signode += addnodes.desc_parameterlist()\n \n-        signode['module'] = modname\n-        signode['class'] = classname\n-        signode['fullname'] = fullname\n+            if retann:\n+                children = _parse_annotation(retann)\n+                signode += addnodes.desc_returns(retann, '', *children)\n \n-        sig_prefix = self.get_signature_prefix(sig)\n-        if sig_prefix:\n-            signode += addnodes.desc_annotation(sig_prefix, sig_prefix)\n+            anno = self.options.get('annotation')\n+            if anno:\n+                signode += addnodes.desc_annotation(' ' + anno, ' ' + anno)\n \n-        if prefix:\n-            signode += addnodes.desc_addname(prefix, prefix)\n-        elif add_module and self.env.config.add_module_names:\n-            if modname and modname != 'exceptions':\n-                # exceptions are a special case, since they are documented in the\n-                # 'exceptions' module.\n-                nodetext = modname + '.'\n-                signode += addnodes.desc_addname(nodetext, nodetext)\n-\n-        signode += addnodes.desc_name(name, name)\n-        if arglist:\n-            try:\n-                signode += _parse_arglist(arglist)\n-            except SyntaxError:\n-                # fallback to parse arglist original parser.\n-                # it supports to represent optional arguments (ex. \"func(foo [, bar])\")\n-                _pseudo_parse_arglist(signode, arglist)\n-            except NotImplementedError as exc:\n-                logger.warning(\"could not parse arglist (%r): %s\", arglist, exc,\n-                               location=signode)\n-                _pseudo_parse_arglist(signode, arglist)\n-        else:\n-            if self.needs_arglist():\n-                # for callables, add an empty parameter list\n-                signode += addnodes.desc_parameterlist()\n+            signatures.append((fullname, prefix))\n \n-        if retann:\n-            children = _parse_annotation(retann)\n-            signode += addnodes.desc_returns(retann, '', *children)\n-\n-        anno = self.options.get('annotation')\n-        if anno:\n-            signode += addnodes.desc_annotation(' ' + anno, ' ' + anno)\n-\n-        return fullname, prefix\n+        return signatures\n \n     def get_index_text(self, modname: str, name: Tuple[str, str]) -> str:\n         \"\"\"Return the text for the index entry of the object.\"\"\"\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be999..0043a18b6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1045,31 +1045,27 @@ class DocstringSignatureMixin:\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n         result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n-            # no lines in docstring, no match\n             if not doclines:\n                 continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n-            if base not in valid_names:\n-                continue\n-            # re-prepare docstring to ignore more leading indentation\n-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            for line in doclines:\n+                match = py_ext_sig_re.match(line)\n+                if not match:\n+                    continue\n+                exmod, path, base, args, retann = match.groups()\n+                valid_names = [self.objpath[-1]]  # type: ignore\n+                if isinstance(self, ClassDocumenter):\n+                    valid_names.append('__init__')\n+                    if hasattr(self.object, '__mro__'):\n+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+                if base not in valid_names:\n+                    continue\n+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n+                                                            tabsize=tab_width)\n+                results.append((args, retann))\n+        return results if results else None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 15f0d66e2..d8ac42753 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -409,54 +409,32 @@ def is_builtin_class_method(obj: Any, attr_name: str) -> bool:\n \n \n def signature(subject: Callable, bound_method: bool = False, follow_wrapped: bool = False\n-              ) -> inspect.Signature:\n-    \"\"\"Return a Signature object for the given *subject*.\n-\n-    :param bound_method: Specify *subject* is a bound method or not\n-    :param follow_wrapped: Same as ``inspect.signature()``.\n-                           Defaults to ``False`` (get a signature of *subject*).\n-    \"\"\"\n+              ) -> List[inspect.Signature]:\n+    \"\"\"Return a list of Signature objects for the given *subject*.\"\"\"\n+    signatures = []\n     try:\n         try:\n-            signature = inspect.signature(subject, follow_wrapped=follow_wrapped)\n+            sig = inspect.signature(subject, follow_wrapped=follow_wrapped)\n+            signatures.append(sig)\n         except ValueError:\n-            # follow built-in wrappers up (ex. functools.lru_cache)\n-            signature = inspect.signature(subject)\n-        parameters = list(signature.parameters.values())\n-        return_annotation = signature.return_annotation\n+            sig = inspect.signature(subject)\n+            signatures.append(sig)\n     except IndexError:\n-        # Until python 3.6.4, cpython has been crashed on inspection for\n-        # partialmethods not having any arguments.\n-        # https://bugs.python.org/issue33009\n         if hasattr(subject, '_partialmethod'):\n-            parameters = []\n-            return_annotation = Parameter.empty\n+            signatures.append(inspect.Signature([]))\n         else:\n             raise\n \n-    try:\n-        # Update unresolved annotations using ``get_type_hints()``.\n-        annotations = typing.get_type_hints(subject)\n-        for i, param in enumerate(parameters):\n-            if isinstance(param.annotation, str) and param.name in annotations:\n-                parameters[i] = param.replace(annotation=annotations[param.name])\n-        if 'return' in annotations:\n-            return_annotation = annotations['return']\n-    except Exception:\n-        # ``get_type_hints()`` does not support some kind of objects like partial,\n-        # ForwardRef and so on.\n-        pass\n-\n-    if bound_method:\n-        if inspect.ismethod(subject):\n-            # ``inspect.signature()`` considers the subject is a bound method and removes\n-            # first argument from signature.  Therefore no skips are needed here.\n-            pass\n-        else:\n-            if len(parameters) > 0:\n-                parameters.pop(0)\n+    # Handle additional signatures for overloaded methods\n+    if hasattr(subject, 'overloads'):\n+        for overload in subject.overloads:\n+            try:\n+                sig = inspect.signature(overload, follow_wrapped=follow_wrapped)\n+                signatures.append(sig)\n+            except ValueError:\n+                continue\n \n-    return inspect.Signature(parameters, return_annotation=return_annotation)\n+    return signatures\n \n \n def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,\n"}
{"instance_id":"sphinx-doc__sphinx-7757","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex fc1136ae2..a013a761b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -178,7 +178,8 @@ def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n                 node += nodes.Text(' ')\n             else:\n                 node += addnodes.desc_sig_operator('', '=')\n-            node += nodes.inline('', param.default, classes=['default_value'],\n+            default_value = repr(param.default)\n+            node += nodes.inline('', default_value, classes=['default_value'],\n                                  support_smartquotes=False)\n \n         params += node\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be999..23e68a2a1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1133,7 +1133,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                 sig = inspect.signature(self.object, follow_wrapped=True)\n             else:\n                 sig = inspect.signature(self.object)\n-            args = stringify_signature(sig, **kwargs)\n+            args = stringify_signature(sig, show_defaults=True, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\ndiff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 9bafff11c..0dd20d2eb 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -93,14 +93,12 @@ class _UnparseVisitor(ast.NodeVisitor):\n \n     def visit_arguments(self, node: ast.arguments) -> str:\n         defaults = list(node.defaults)\n-        positionals = len(node.args)\n-        posonlyargs = 0\n-        if hasattr(node, \"posonlyargs\"):  # for py38+\n-            posonlyargs += len(node.posonlyargs)  # type:ignore\n-            positionals += posonlyargs\n-        for _ in range(len(defaults), positionals):\n+        posonlyargs = getattr(node, 'posonlyargs', [])\n+        num_posonly = len(posonlyargs)\n+        num_args = len(node.args)\n+        total_positionals = num_posonly + num_args\n+        for _ in range(len(defaults), total_positionals):\n             defaults.insert(0, None)\n-\n         kw_defaults = list(node.kw_defaults)\n         for _ in range(len(kw_defaults), len(node.kwonlyargs)):\n             kw_defaults.insert(0, None)\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 85eeb4376..e44494f94 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -193,10 +193,11 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             self.body.append(self.param_separator)\n         if self.optional_param_level == 0:\n             self.required_params_left -= 1\n-        if not node.hasattr('noemph'):\n-            self.body.append('<em>')\n+        self.body.append(node.astext())\n+        raise nodes.SkipNode\n \n     def depart_desc_parameter(self, node: Element) -> None:\n+        pass\n         if not node.hasattr('noemph'):\n             self.body.append('</em>')\n         if self.required_params_left:\ndiff --git a/sphinx/writers/manpage.py b/sphinx/writers/manpage.py\nindex 7da2f4e8f..37bf99283 100644\n--- a/sphinx/writers/manpage.py\n+++ b/sphinx/writers/manpage.py\n@@ -188,6 +188,8 @@ class ManualPageTranslator(SphinxTranslator, BaseTranslator):\n             self.body.append(', ')\n         else:\n             self.first_param = 0\n+        self.body.append(node.astext())\n+        raise nodes.SkipNode\n \n     def depart_desc_parameter(self, node: Element) -> None:\n         pass\n"}
{"instance_id":"sphinx-doc__sphinx-7889","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 98a3a3a96..4b6bab891 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -70,7 +70,7 @@ class _MockObject:\n \n def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                    attributes: Any = None) -> Any:\n-    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n+    attrs = {'__module__': str(module), '__display_name__': str(module) + '.' + str(name)}\n     attrs.update(attributes or {})\n \n     return type(name, (superclass,), attrs)\ndiff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py\nindex 0984377c5..02c2f3eb8 100644\n--- a/sphinx/ext/autosummary/__init__.py\n+++ b/sphinx/ext/autosummary/__init__.py\n@@ -62,6 +62,7 @@ from os import path\n from types import ModuleType\n from typing import Any, Dict, List, Tuple\n from typing import cast\n+from typing import TypeVar\n \n from docutils import nodes\n from docutils.nodes import Element, Node, system_message\n@@ -309,58 +310,58 @@ class Autosummary(SphinxDirective):\n \n             self.bridge.result = StringList()  # initialize for each documenter\n             full_name = real_name\n-            if not isinstance(obj, ModuleType):\n-                # give explicitly separated module name, so that members\n-                # of inner classes can be documented\n-                full_name = modname + '::' + full_name[len(modname) + 1:]\n-            # NB. using full_name here is important, since Documenters\n-            #     handle module prefixes slightly differently\n-            doccls = get_documenter(self.env.app, obj, parent)\n-            documenter = doccls(self.bridge, full_name)\n-            if not documenter.parse_name():\n-                logger.warning(__('failed to parse name %s'), real_name,\n-                               location=self.get_source_info())\n-                items.append((display_name, '', '', real_name))\n-                continue\n-            if not documenter.import_object():\n-                logger.warning(__('failed to import object %s'), real_name,\n-                               location=self.get_source_info())\n-                items.append((display_name, '', '', real_name))\n-                continue\n-            if documenter.options.members and not documenter.check_module():\n-                continue\n-\n-            # try to also get a source code analyzer for attribute docs\n-            try:\n-                documenter.analyzer = ModuleAnalyzer.for_module(\n-                    documenter.get_real_modname())\n-                # parse right now, to get PycodeErrors on parsing (results will\n-                # be cached anyway)\n-                documenter.analyzer.find_attr_docs()\n-            except PycodeError as err:\n-                logger.debug('[autodoc] module analyzer failed: %s', err)\n-                # no source file -- e.g. for builtin and C modules\n-                documenter.analyzer = None\n-\n-            # -- Grab the signature\n-\n-            try:\n-                sig = documenter.format_signature(show_annotation=False)\n-            except TypeError:\n-                # the documenter does not support ``show_annotation`` option\n-                sig = documenter.format_signature()\n-\n-            if not sig:\n+            full_name = real_name\n+            if isinstance(obj, TypeVar):\n+                display_name = obj.__name__\n+                full_name = obj.__name__\n                 sig = ''\n+                summary = ''\n             else:\n-                max_chars = max(10, max_item_chars - len(display_name))\n-                sig = mangle_signature(sig, max_chars=max_chars)\n-\n-            # -- Grab the summary\n-\n-            documenter.add_content(None)\n-            summary = extract_summary(self.bridge.result.data[:], self.state.document)\n-\n+                if not isinstance(obj, ModuleType):\n+                    # give explicitly separated module name, so that members\n+                    # of inner classes can be documented\n+                    full_name = modname + '::' + full_name[len(modname) + 1:]\n+                # NB. using full_name here is important, since Documenters\n+                #     handle module prefixes slightly differently\n+                doccls = get_documenter(self.env.app, obj, parent)\n+                documenter = doccls(self.bridge, full_name)\n+                if not documenter.parse_name():\n+                    logger.warning(__('failed to parse name %s'), real_name,\n+                                   location=self.get_source_info())\n+                    items.append((display_name, '', '', real_name))\n+                    continue\n+                if not documenter.import_object():\n+                    logger.warning(__('failed to import object %s'), real_name,\n+                                   location=self.get_source_info())\n+                    items.append((display_name, '', '', real_name))\n+                    continue\n+                if documenter.options.members and not documenter.check_module():\n+                    continue\n+                # try to also get a source code analyzer for attribute docs\n+                try:\n+                    documenter.analyzer = ModuleAnalyzer.for_module(\n+                        documenter.get_real_modname())\n+                    # parse right now, to get PycodeErrors on parsing (results will\n+                    # be cached anyway)\n+                    documenter.analyzer.find_attr_docs()\n+                except PycodeError as err:\n+                    logger.debug('[autodoc] module analyzer failed: %s', err)\n+                    # no source file -- e.g. for builtin and C modules\n+                    documenter.analyzer = None\n+                # -- Grab the signature\n+                try:\n+                    sig = documenter.format_signature(show_annotation=False)\n+                except TypeError:\n+                    # the documenter does not support ``show_annotation`` option\n+                    sig = documenter.format_signature()\n+                if not sig:\n+                    sig = ''\n+                else:\n+                    max_chars = max(10, max_item_chars - len(display_name))\n+                    sig = mangle_signature(sig, max_chars=max_chars)\n+                # -- Grab the summary\n+                documenter.add_content(None)\n+                summary = extract_summary(self.bridge.result.data[:], self.state.document)\n             items.append((display_name, sig, summary, real_name))\n \n         return items\ndiff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex 7583d9894..15441ab47 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -327,10 +327,16 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         shortname = qualname\n     else:\n         shortname = qualname.rsplit(\".\", 1)[-1]\n-\n-    ns['fullname'] = name\n-    ns['module'] = modname\n-    ns['objname'] = qualname\n+    if isinstance(name, TypeVar):\n+        ns['fullname'] = name.__name__\n+        ns['module'] = getattr(name, '__module__', modname)\n+        ns['objname'] = name.__name__\n+        ns['name'] = name.__name__\n+    else:\n+        ns['fullname'] = name\n+        ns['module'] = modname\n+        ns['objname'] = qualname\n+        ns['name'] = shortname\n     ns['name'] = shortname\n \n     ns['objtype'] = doc.objtype\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 441f850d1..8097ca5cb 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -24,6 +24,7 @@ from inspect import (  # NOQA\n from io import StringIO\n from typing import Any, Callable, Mapping, List, Optional, Tuple\n from typing import cast\n+from typing import TypeVar\n \n from sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning\n from sphinx.pycode.ast import ast  # for py35-37\ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 18b363eca..fcbe492f0 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -87,8 +87,10 @@ def _stringify_py37(annotation: Any) -> str:\n     else:\n         # we weren't able to extract the base type, appending arguments would\n         # only make them appear twice\n-        return repr(annotation)\n-\n+            args = ', '.join(\n+                a.__name__ if isinstance(a, TypeVar) else stringify(a)\n+                for a in annotation.__args__\n+            )\n     if getattr(annotation, '__args__', None):\n         if qualname == 'Union':\n             if len(annotation.__args__) > 1 and annotation.__args__[-1] is NoneType:\n"}
{"instance_id":"sphinx-doc__sphinx-7910","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9300a2cce..3640f6844 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -346,6 +346,8 @@ class Documenter:\n                                     attrgetter=self.get_attr,\n                                     warningiserror=self.env.config.autodoc_warningiserror)\n                 self.module, self.parent, self.object_name, self.object = ret\n+                if inspect.isfunction(self.object):\n+                    self.object = inspect.unwrap(self.object)\n                 return True\n             except ImportError as exc:\n                 logger.warning(exc.args[0], type='autodoc', subtype='import_object')\n"}
{"instance_id":"sphinx-doc__sphinx-7985","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd5317087..59b83223f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -100,9 +100,9 @@ class CheckExternalLinksBuilder(Builder):\n         open(path.join(self.outdir, 'output.json'), 'w').close()\n \n         # create queues and worker threads\n-        self.wqueue = queue.Queue()  # type: queue.Queue\n-        self.rqueue = queue.Queue()  # type: queue.Queue\n-        self.workers = []  # type: List[threading.Thread]\n+        self.wqueue = queue.Queue()\n+        self.rqueue = queue.Queue()\n+        self.workers = []\n         for i in range(self.app.config.linkcheck_workers):\n             thread = threading.Thread(target=self.check_thread)\n             thread.setDaemon(True)\n@@ -112,7 +112,7 @@ class CheckExternalLinksBuilder(Builder):\n     def check_thread(self) -> None:\n         kwargs = {\n             'allow_redirects': True,\n-        }  # type: Dict\n+        }\n         if self.app.config.linkcheck_timeout:\n             kwargs['timeout'] = self.app.config.linkcheck_timeout\n \n@@ -131,6 +131,50 @@ class CheckExternalLinksBuilder(Builder):\n \n             return {}\n \n+        def check() -> Tuple[str, str, int]:\n+            # check for various conditions without bothering the network\n+            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n+                return 'unchecked', '', 0\n+            elif not uri.startswith(('http:', 'https:')):\n+                # It's a local URI, check if the file exists\n+                if path.isabs(uri):\n+                    # Absolute path, relative to source directory\n+                    file_path = path.join(self.env.srcdir, uri.lstrip('/'))\n+                else:\n+                    # Relative path, relative to current document's directory\n+                    doc_path = self.env.doc2path(docname, base=None)\n+                    doc_dir = path.dirname(doc_path)\n+                    file_path = path.normpath(path.join(doc_dir, uri))\n+\n+                if path.exists(file_path):\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', 'Local file not found: {}'.format(uri), 0\n+            elif uri in self.good:\n+                return 'working', 'old', 0\n+            elif uri in self.broken:\n+                return 'broken', self.broken[uri], 0\n+            elif uri in self.redirected:\n+                return 'redirected', self.redirected[uri][0], self.redirected[uri][1]\n+            for rex in self.to_ignore:\n+                if rex.match(uri):\n+                    return 'ignored', '', 0\n+\n+            # need to actually check the URI\n+            for _ in range(self.app.config.linkcheck_retries):\n+                status, info, code = check_uri()\n+                if status != \"broken\":\n+                    break\n+\n+            if status == \"working\":\n+                self.good.add(uri)\n+            elif status == \"broken\":\n+                self.broken[uri] = info\n+            elif status == \"redirected\":\n+                self.redirected[uri] = (info, code)\n+\n+            return (status, info, code)\n+\n         def check_uri() -> Tuple[str, str, int]:\n             # split off anchor\n             if '#' in uri:\n@@ -208,37 +252,6 @@ class CheckExternalLinksBuilder(Builder):\n                 else:\n                     return 'redirected', new_url, 0\n \n-        def check() -> Tuple[str, str, int]:\n-            # check for various conditions without bothering the network\n-            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n-                return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n-            elif uri in self.good:\n-                return 'working', 'old', 0\n-            elif uri in self.broken:\n-                return 'broken', self.broken[uri], 0\n-            elif uri in self.redirected:\n-                return 'redirected', self.redirected[uri][0], self.redirected[uri][1]\n-            for rex in self.to_ignore:\n-                if rex.match(uri):\n-                    return 'ignored', '', 0\n-\n-            # need to actually check the URI\n-            for _ in range(self.app.config.linkcheck_retries):\n-                status, info, code = check_uri()\n-                if status != \"broken\":\n-                    break\n-\n-            if status == \"working\":\n-                self.good.add(uri)\n-            elif status == \"broken\":\n-                self.broken[uri] = info\n-            elif status == \"redirected\":\n-                self.redirected[uri] = (info, code)\n-\n-            return (status, info, code)\n-\n         while True:\n             uri, docname, lineno = self.wqueue.get()\n             if uri is None:\n@@ -267,10 +280,6 @@ class CheckExternalLinksBuilder(Builder):\n             else:\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n-        elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n-            self.write_linkstat(linkstat)\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n@@ -371,3 +380,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n+\n"}
{"instance_id":"sphinx-doc__sphinx-8035","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8c3509c3b..ec3b14f1e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -655,9 +655,12 @@ class Documenter:\n                     keep = True\n                 isattr = True\n             elif want_all and isprivate:\n-                # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if isinstance(self.options.private_members, (list, tuple)):\n+                    keep = membername in self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n+                else:\n+                    keep = self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\ndiff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py\nindex 9a3428f5d..6f734c5a9 100644\n--- a/sphinx/ext/autodoc/directive.py\n+++ b/sphinx/ext/autodoc/directive.py\n@@ -86,6 +86,8 @@ def process_documenter_options(documenter: \"Type[Documenter]\", config: Config, o\n             if name in config.autodoc_default_options and not negated:\n                 options[name] = config.autodoc_default_options[name]\n \n+    if 'private-members' in options:\n+        options['private-members'] = [elem.strip() for elem in options['private-members'].split(',') if elem.strip()]\n     return Options(assemble_option_dict(options.items(), documenter.option_spec))\n \n \n"}
{"instance_id":"sphinx-doc__sphinx-8056","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py\nindex 855affa95..8811bbb7f 100644\n--- a/sphinx/ext/autosummary/__init__.py\n+++ b/sphinx/ext/autosummary/__init__.py\n@@ -358,15 +358,11 @@ class Autosummary(SphinxDirective):\n \n             # -- Grab the signature\n \n-            try:\n-                sig = documenter.format_signature(show_annotation=False)\n-            except TypeError:\n-                # the documenter does not support ``show_annotation`` option\n-                sig = documenter.format_signature()\n-\n+            sig = documenter.format_signature()\n             if not sig:\n                 sig = ''\n             else:\n+                sig = sig.strip()\n                 max_chars = max(10, max_item_chars - len(display_name))\n                 sig = mangle_signature(sig, max_chars=max_chars)\n \ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..1a8ef4631 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1095,7 +1095,9 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        _name_list = [n.strip() for n in _name.split(',')]\n+        _name_list = [self._escape_args_and_kwargs(n) for n in _name_list]\n+        _name = ', '.join(_name_list)\n         _type = _convert_numpy_type_spec(\n             _type,\n             location=self._get_location(),\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 4375bf326..2ebc2ebff 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -187,20 +187,21 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     #     foo([a, ]b, c[, d])\n     #\n     def visit_desc_parameter(self, node: Element) -> None:\n-        if self.first_param:\n-            self.first_param = 0\n-        elif not self.required_params_left:\n-            self.body.append(self.param_separator)\n-        if self.optional_param_level == 0:\n-            self.required_params_left -= 1\n-        if not node.hasattr('noemph'):\n-            self.body.append('<em>')\n+        param_text = node.astext()\n+        params = [p.strip() for p in param_text.split(',')]\n+        for i, param in enumerate(params):\n+            if i > 0 or not self.first_param:\n+                self.body.append(self.param_separator)\n+                self.first_param = 0\n+            if not node.hasattr('noemph'):\n+                self.body.append('<em>%s</em>' % param)\n+            else:\n+                self.body.append(param)\n+        raise nodes.SkipChildren\n \n     def depart_desc_parameter(self, node: Element) -> None:\n-        if not node.hasattr('noemph'):\n-            self.body.append('</em>')\n-        if self.required_params_left:\n-            self.body.append(self.param_separator)\n+        pass\n+        self.body.append(self.param_separator)\n \n     def visit_desc_optional(self, node: Element) -> None:\n         self.optional_param_level += 1\ndiff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex 73a22a76b..2f06ab953 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -786,16 +786,20 @@ class LaTeXTranslator(SphinxTranslator):\n         self.body.append('}{')\n \n     def visit_desc_parameter(self, node: Element) -> None:\n-        if not self.first_param:\n-            self.body.append(', ')\n-        else:\n-            self.first_param = 0\n-        if not node.hasattr('noemph'):\n-            self.body.append(r'\\emph{')\n+        param_text = node.astext()\n+        params = [p.strip() for p in param_text.split(',')]\n+        for i, param in enumerate(params):\n+            if not self.first_param or i > 0:\n+                self.body.append(', ')\n+            else:\n+                self.first_param = 0\n+            if not node.hasattr('noemph'):\n+                self.body.append(r'\\emph{%s}' % self.encode(param))\n+            else:\n+                self.body.append(self.encode(param))\n \n     def depart_desc_parameter(self, node: Element) -> None:\n-        if not node.hasattr('noemph'):\n-            self.body.append('}')\n+        pass\n \n     def visit_desc_optional(self, node: Element) -> None:\n         self.body.append(r'\\sphinxoptional{')\n"}
{"instance_id":"sphinx-doc__sphinx-8120","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/application.py b/sphinx/application.py\nindex 385b74d8a..197a1dc56 100644\n--- a/sphinx/application.py\n+++ b/sphinx/application.py\n@@ -293,7 +293,7 @@ class Sphinx:\n                 if catalog.domain == 'sphinx' and catalog.is_outdated():\n                     catalog.write_mo(self.config.language)\n \n-            locale_dirs = [None, path.join(package_dir, 'locale')] + list(repo.locale_dirs)\n+            locale_dirs = [None] + list(repo.locale_dirs) + [path.join(package_dir, 'locale')]\n             self.translator, has_translation = locale.init(locale_dirs, self.config.language)\n             if has_translation or self.config.language == 'en':\n                 # \"en\" never needs to be translated\n"}
{"instance_id":"sphinx-doc__sphinx-8265","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d7c5d2242..91fc7152e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1211,11 +1211,17 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         if self.env.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n \n+        def format_value(value):\n+            if isinstance(value, tuple):\n+                return '=%r' % (value,)\n+            else:\n+                return '=' + repr(value)\n+\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, follow_wrapped=True,\n                                     type_aliases=self.env.config.autodoc_type_aliases)\n-            args = stringify_signature(sig, **kwargs)\n+            args = stringify_signature(sig, format_value=format_value, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -1227,6 +1233,13 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             # escape backslashes for reST\n             args = args.replace('\\\\', '\\\\\\\\')\n         return args\n+        except ValueError:\n+            args = ''\n+\n+        if self.env.config.strip_signature_backslash:\n+            # escape backslashes for reST\n+            args = args.replace('\\\\', '\\\\\\\\')\n+        return args\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d36fdd17a..5486e7bb6 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -258,6 +258,8 @@ class GoogleDocstring:\n                 _type = match.group(2)\n \n         _name = self._escape_args_and_kwargs(_name)\n+        if _desc.startswith('=') and ',' in _desc and not _desc.startswith('=('):\n+            _desc = '=(%s)' % _desc[1:]\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 8813c2d12..58baa095c 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -193,12 +193,19 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             self.body.append(self.param_separator)\n         if self.optional_param_level == 0:\n             self.required_params_left -= 1\n+        paramtext = self.encode(node.astext())\n+        if ',' in paramtext and not paramtext.startswith('('):\n+            paramtext = '(%s)' % paramtext\n         if not node.hasattr('noemph'):\n-            self.body.append('<em>')\n-\n-    def depart_desc_parameter(self, node: Element) -> None:\n+            self.body.append('<em>%s</em>' % paramtext)\n+        else:\n+            self.body.append(paramtext)\n+        raise nodes.SkipNode\n         if not node.hasattr('noemph'):\n-            self.body.append('</em>')\n+            self.body.append('<em>%s</em>' % paramtext)\n+        else:\n+            self.body.append(paramtext)\n+        raise nodes.SkipNode\n         if self.required_params_left:\n             self.body.append(self.param_separator)\n \ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 4ceeaafdf..fee240191 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -165,9 +165,14 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n             self.body.append(self.param_separator)\n         if self.optional_param_level == 0:\n             self.required_params_left -= 1\n+        paramtext = self.encode(node.astext())\n+        if ',' in paramtext and not paramtext.startswith('('):\n+            paramtext = '(%s)' % paramtext\n         if not node.hasattr('noemph'):\n-            self.body.append('<em class=\"sig-param\">')\n-\n+            self.body.append('<em class=\"sig-param\">%s</em>' % paramtext)\n+        else:\n+            self.body.append(paramtext)\n+        raise nodes.SkipNode\n     def depart_desc_parameter(self, node: Element) -> None:\n         if not node.hasattr('noemph'):\n             self.body.append('</em>')\n"}
{"instance_id":"sphinx-doc__sphinx-8269","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc7c..f2d05d9f2 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -166,6 +166,7 @@ class CheckExternalLinksBuilder(Builder):\n                     # Read the whole document and see if #anchor exists\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n@@ -288,6 +289,9 @@ class CheckExternalLinksBuilder(Builder):\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n         elif status == 'broken':\n+            if 'Anchor' in info and 'Client Error:' in self.broken.get(uri, ''):\n+                # If we have both an anchor error and an HTTP error, show the HTTP error\n+                info = self.broken[uri]\n             if self.app.quiet or self.app.warningiserror:\n                 logger.warning(__('broken link: %s (%s)'), uri, info,\n                                location=(filename, lineno))\n@@ -384,3 +388,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n+\n"}
{"instance_id":"sphinx-doc__sphinx-8459","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 278e47d88..6a4e1ca39 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1244,7 +1244,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))\n \n     def format_args(self, **kwargs: Any) -> str:\n-        if self.config.autodoc_typehints in ('none', 'description'):\n+        if self.config.autodoc_typehints == 'none':\n             kwargs.setdefault('show_annotation', False)\n \n         try:\n@@ -1492,7 +1492,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         return None, None, None\n \n     def format_args(self, **kwargs: Any) -> str:\n-        if self.config.autodoc_typehints in ('none', 'description'):\n+        if self.config.autodoc_typehints == 'none':\n             kwargs.setdefault('show_annotation', False)\n \n         try:\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 70cbc3ba1..3e3ef8a57 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -28,11 +28,16 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj)\n+            type_aliases = app.config.autodoc_type_aliases\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation_name = typing.stringify(param.annotation)\n+                    alias = type_aliases.get(annotation_name, annotation_name)\n+                    annotation[param.name] = alias\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation_name = typing.stringify(sig.return_annotation)\n+                alias = type_aliases.get(return_annotation_name, return_annotation_name)\n+                annotation['return'] = alias\n     except (TypeError, ValueError):\n         pass\n \n"}
{"instance_id":"sphinx-doc__sphinx-8475","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 1dc0337c3..63ec84697 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -20,7 +20,7 @@ from urllib.parse import unquote, urlparse\n \n from docutils import nodes\n from docutils.nodes import Node\n-from requests.exceptions import HTTPError\n+from requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -172,7 +172,7 @@ class CheckExternalLinksBuilder(Builder):\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except (HTTPError, TooManyRedirects):\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n@@ -378,3 +378,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n+\n"}
{"instance_id":"sphinx-doc__sphinx-8548","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b365..ca2a94829 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1584,7 +1584,13 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 self.add_line('   ' + _('Bases: %s') % ', '.join(bases), sourcename)\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n-        members = get_class_members(self.object, self.objpath, self.get_attr, self.analyzer)\n+        members = {}\n+        if self.options.inherited_members:\n+            for cls in self.object.__mro__:\n+                cls_members = get_class_members(cls, self.objpath, self.get_attr, self.analyzer)\n+                members.update(cls_members)\n+        else:\n+            members = get_class_members(self.object, self.objpath, self.get_attr, self.analyzer)\n         if not want_all:\n             if not self.options.members:\n                 return False, []  # type: ignore\n@@ -1592,18 +1598,12 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             selected = []\n             for name in self.options.members:  # type: str\n                 if name in members:\n-                    selected.append(ObjectMember(name, members[name].value,\n-                                                 docstring=members[name].docstring))\n+                    selected.append(ObjectMember(name, members[name].value, docstring=members[name].docstring))\n                 else:\n-                    logger.warning(__('missing attribute %s in object %s') %\n-                                   (name, self.fullname), type='autodoc')\n+                    logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return False, selected\n-        elif self.options.inherited_members:\n-            return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n-                           for m in members.values()]\n         else:\n-            return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n-                           for m in members.values() if m.class_ == self.object]\n+            return False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values()]\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..f4ccc920d 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -284,19 +284,17 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n     except (AttributeError, TypeError, ValueError):\n         pass\n \n-    # other members\n-    for name in dir(subject):\n-        try:\n-            value = attrgetter(subject, name)\n-            unmangled = unmangle(subject, name)\n-            if unmangled and unmangled not in members:\n-                if name in obj_dict:\n-                    members[unmangled] = ClassAttribute(subject, unmangled, value)\n-                else:\n-                    members[unmangled] = ClassAttribute(None, unmangled, value)\n-        except AttributeError:\n-            continue\n-\n+    # collect members from base classes\n+    for cls in getmro(subject):\n+        obj_dict = attrgetter(cls, '__dict__', {})\n+        for name in obj_dict:\n+            try:\n+                value = attrgetter(subject, name)\n+                unmangled = unmangle(subject, name)\n+                if unmangled and unmangled not in members:\n+                    members[unmangled] = ClassAttribute(cls, unmangled, value)\n+            except AttributeError:\n+                continue\n     # annotation only member (ex. attr: int)\n     for cls in getmro(subject):\n         try:\n"}
{"instance_id":"sphinx-doc__sphinx-8551","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 79d7e4f46..0897ae8c5 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1272,21 +1272,21 @@ class PythonDomain(Domain):\n                                    if oname.endswith(searchname) and\n                                    self.objects[oname].objtype in objtypes]\n         else:\n-            # NOTE: searching for exact match, object type is not considered\n-            if name in self.objects:\n+            # Adjusted search logic to prioritize current module and parent modules\n+            newname = None\n+            if modname and classname and modname + '.' + classname + '.' + name in self.objects:\n+                newname = modname + '.' + classname + '.' + name\n+            elif modname and modname + '.' + name in self.objects:\n+                newname = modname + '.' + name\n+            elif classname and classname + '.' + name in self.objects:\n+                newname = classname + '.' + name\n+            elif name in self.objects:\n                 newname = name\n             elif type == 'mod':\n                 # only exact matches allowed for modules\n                 return []\n-            elif classname and classname + '.' + name in self.objects:\n-                newname = classname + '.' + name\n-            elif modname and modname + '.' + name in self.objects:\n-                newname = modname + '.' + name\n-            elif modname and classname and \\\n-                    modname + '.' + classname + '.' + name in self.objects:\n-                newname = modname + '.' + classname + '.' + name\n-        if newname is not None:\n-            matches.append((newname, self.objects[newname]))\n+            if newname is not None:\n+                matches.append((newname, self.objects[newname]))\n         return matches\n \n     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,\n@@ -1294,7 +1294,7 @@ class PythonDomain(Domain):\n                      ) -> Element:\n         modname = node.get('py:module')\n         clsname = node.get('py:class')\n-        searchmode = 1 if node.hasattr('refspecific') else 0\n+        searchmode = 0\n         matches = self.find_obj(env, modname, clsname, target,\n                                 type, searchmode)\n \n"}
{"instance_id":"sphinx-doc__sphinx-8593","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5be..ff04a1983 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1865,7 +1865,9 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        is_module_level = isinstance(parent, ModuleLevelDocumenter) and isattr\n+        has_meta_public = member and ':meta public:' in (getattr(member, '__doc__', '') or '')\n+        return is_module_level and (not membername.startswith('_') or has_meta_public)\n \n     def update_annotations(self, parent: Any) -> None:\n         \"\"\"Update __annotations__ to support type_comment and so on.\"\"\"\n@@ -1881,6 +1883,108 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n         except AttributeError:\n             pass\n \n+    def import_object(self, raiseerror: bool = False) -> bool:\n+        ret = super().import_object(raiseerror)\n+        if self.parent:\n+            self.update_annotations(self.parent)\n+        return ret\n+\n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if self.options.annotation is SUPPRESS or self.should_suppress_directive_header():\n+            pass\n+        elif self.options.annotation:\n+            self.add_line('   :annotation: %s' % self.options.annotation, sourcename)\n+        else:\n+            # obtain annotation for this data\n+            annotations = get_type_hints(self.parent, None, self.config.autodoc_type_aliases)\n+            if self.objpath[-1] in annotations:\n+                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                self.add_line('   :type: ' + objrepr, sourcename)\n+\n+            try:\n+                if self.options.no_value or self.should_suppress_value_header():\n+                    pass\n+                else:\n+                    objrepr = object_description(self.object)\n+                    self.add_line('   :value: ' + objrepr, sourcename)\n+            except ValueError:\n+                pass\n+\n+    def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n+                    ) -> None:\n+        if not more_content:\n+            more_content = StringList()\n+        self.update_content(more_content)\n+        super().add_content(more_content, no_docstring=no_docstring)\n+\n+    def document_members(self, all_members: bool = False) -> None:\n+        pass\n+\n+    def get_real_modname(self) -> str:\n+        return self.get_attr(self.parent or self.object, '__module__', None) or self.modname\n+\n+    def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any]]:\n+        ret = []\n+        for (membername, member) in members:\n+            is_private = membername.startswith('_') and not membername.startswith('__')\n+            doc = getattr(member, '__doc__', '') or ''\n+            has_meta_public = ':meta public:' in doc\n+            if not is_private or has_meta_public:\n+                ret.append((membername, member))\n+        return ret\n+    def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n+                    ) -> None:\n+        self.update_content(more_content)\n+        super().add_content(more_content, no_docstring=no_docstring)\n+\n+    def add_directive_header(self, sig: str) -> None:\n+        super().add_directive_header(sig)\n+        sourcename = self.get_sourcename()\n+        if self.options.annotation is SUPPRESS or self.should_suppress_directive_header():\n+            pass\n+        elif self.options.annotation:\n+            self.add_line('   :annotation: %s' % self.options.annotation, sourcename)\n+        else:\n+            # obtain annotation for this data\n+            annotations = get_type_hints(self.parent, None, self.config.autodoc_type_aliases)\n+            if self.objpath[-1] in annotations:\n+                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                self.add_line('   :type: ' + objrepr, sourcename)\n+\n+            try:\n+                if self.options.no_value or self.should_suppress_value_header():\n+                    pass\n+                else:\n+                    objrepr = object_description(self.object)\n+                    self.add_line('   :value: ' + objrepr, sourcename)\n+            except ValueError:\n+                pass\n+\n+    def document_members(self, all_members: bool = False) -> None:\n+        pass\n+\n+    def get_real_modname(self) -> str:\n+        return self.get_attr(self.parent or self.object, '__module__', None) \\\n+            or self.modname\n+\n+    def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n+                    ) -> None:\n+        if not more_content:\n+            more_content = StringList()\n+\n+        self.update_content(more_content)\n+        super().add_content(more_content, no_docstring=no_docstring)\n+\n+            analyzer = ModuleAnalyzer.for_module(self.modname)\n+            analyzer.analyze()\n+            for (classname, attrname), annotation in analyzer.annotations.items():\n+                if classname == '' and attrname not in annotations:\n+                    annotations[attrname] = annotation\n+        except AttributeError:\n+            pass\n+\n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n         if self.parent:\n"}
{"instance_id":"sphinx-doc__sphinx-8621","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py\nindex c91da57e9..311b1b7a0 100644\n--- a/sphinx/builders/html/transforms.py\n+++ b/sphinx/builders/html/transforms.py\n@@ -37,7 +37,7 @@ class KeyboardTransform(SphinxPostTransform):\n     \"\"\"\n     default_priority = 400\n     builders = ('html',)\n-    pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n+    pattern = re.compile(r'(?<=.)(-|\\+|\\^|\\s+)(?=.)')\n \n     def run(self, **kwargs: Any) -> None:\n         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\ndiff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 2d3042f8f..22618a351 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,7 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': addnodes.literal_emphasis,\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex d3c87076f..1db3fa718 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -494,15 +494,15 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            self.protect_literal_text += 1\n         else:\n-            self.body.append(self.starttag(node, 'code', '',\n-                                           CLASS='docutils literal notranslate'))\n+            self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n \n     def depart_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            self.protect_literal_text -= 1\n             self.body.append('</kbd>')\n         else:\n             self.protect_literal_text -= 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 7824f54f5..df7d45969 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -445,15 +445,15 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            self.protect_literal_text += 1\n         else:\n-            self.body.append(self.starttag(node, 'code', '',\n-                                           CLASS='docutils literal notranslate'))\n+            self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n \n     def depart_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            self.protect_literal_text -= 1\n             self.body.append('</kbd>')\n         else:\n             self.protect_literal_text -= 1\n"}
{"instance_id":"sphinx-doc__sphinx-8638","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 389630a32..e4999ac94 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -7174,6 +7174,10 @@ class CPPXRefRole(XRefRole):\n     def process_link(self, env: BuildEnvironment, refnode: Element, has_explicit_title: bool,\n                      title: str, target: str) -> Tuple[str, str]:\n         refnode.attributes.update(env.ref_context)\n+        # Ensure that the current context matches the reference context\n+        if refnode.get('cpp:parent_key') != env.ref_context.get('cpp:parent_key'):\n+            # Do not link if contexts do not match\n+            return title, target\n \n         if not has_explicit_title:\n             # major hax: replace anon names via simple string manipulation.\ndiff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex 3459e45ca..8215a3f20 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -77,8 +77,11 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:\n             env._viewcode_modules[modname] = entry  # type: ignore\n         _, tags, used, _ = entry\n         if fullname in tags:\n-            used[fullname] = docname\n-            return True\n+            if refname == modname:\n+                used[fullname] = docname\n+                return True\n+            else:\n+                return False\n \n         return False\n \ndiff --git a/sphinx/pycode/parser.py b/sphinx/pycode/parser.py\nindex d157c7c1c..920d1314c 100644\n--- a/sphinx/pycode/parser.py\n+++ b/sphinx/pycode/parser.py\n@@ -268,7 +268,9 @@ class VariableCommentPicker(ast.NodeVisitor):\n         qualname = self.get_qualname_for(name)\n         if qualname:\n             basename = \".\".join(qualname[:-1])\n-            self.comments[(basename, name)] = comment\n+            current_basename = \".\".join(self.context)\n+            if basename == current_basename:\n+                self.comments[(basename, name)] = comment\n \n     def add_variable_annotation(self, name: str, annotation: ast.AST) -> None:\n         qualname = self.get_qualname_for(name)\n"}
{"instance_id":"sphinx-doc__sphinx-9229","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1f4c98284..5d02c4c55 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1999,12 +1999,15 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n         return None\n \n     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n-        # Check the variable has a docstring-comment\n-        comment = self.get_module_comment(self.objpath[-1])\n-        if comment:\n-            return [comment]\n+        doc = super().get_doc(ignore)\n+        if doc:\n+            return doc\n         else:\n-            return super().get_doc(ignore)\n+            comment = self.get_module_comment(self.objpath[-1])\n+            if comment:\n+                return [comment]\n+            else:\n+                return []\n \n     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n                     ) -> None:\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex f216e8797..97d6a6191 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -508,9 +508,9 @@ class TypeAliasForwardRef:\n \n     This avoids the error on evaluating the type inside `get_type_hints()`.\n     \"\"\"\n-    def __init__(self, name: str) -> None:\n+    def __init__(self, name: str, doc: Optional[str] = None) -> None:\n         self.name = name\n-\n+        self.__doc__ = doc\n     def __call__(self) -> None:\n         # Dummy method to imitate special typing classes\n         pass\n"}
{"instance_id":"sphinx-doc__sphinx-9230","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..2ace69d6f 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -28,7 +28,7 @@ logger = logging.getLogger(__name__)\n \n _directive_regex = re.compile(r'\\.\\. \\S+::')\n _google_section_regex = re.compile(r'^(\\s|\\w)+:\\s*$')\n-_google_typed_arg_regex = re.compile(r'(.+?)\\(\\s*(.*[^\\s]+)\\s*\\)')\n+_google_typed_arg_regex = re.compile(r'(\\S+?)\\s*\\((.+)\\)$')\n _numpy_section_regex = re.compile(r'^[=\\-`:\\'\"~^_*+#<>]{2,}\\s*$')\n _single_colon_regex = re.compile(r'(?<!:):(?!:)')\n _xref_or_code_regex = re.compile(\n@@ -267,7 +267,7 @@ class GoogleDocstring:\n             match = _google_typed_arg_regex.match(before)\n             if match:\n                 _name = match.group(1).strip()\n-                _type = match.group(2)\n+                _type = match.group(2).strip()\n \n         _name = self._escape_args_and_kwargs(_name)\n \n"}
{"instance_id":"sphinx-doc__sphinx-9258","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 7d39d80ed..3e058b159 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -112,10 +112,18 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n         elif isinstance(node, ast.BinOp):\n-            result: List[Node] = unparse(node.left)\n-            result.extend(unparse(node.op))\n-            result.extend(unparse(node.right))\n-            return result\n+            if isinstance(node.op, ast.BitOr):\n+                # Handle union types specified with '|'\n+                result = unparse(node.left)\n+                result.append(addnodes.desc_sig_punctuation('', '|'))\n+                result.extend(unparse(node.right))\n+                return result\n+            else:\n+                # Handle other binary operations\n+                result = unparse(node.left)\n+                result.extend(unparse(node.op))\n+                result.extend(unparse(node.right))\n+                return result\n         elif isinstance(node, ast.BitOr):\n             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n         elif isinstance(node, ast.Constant):  # type: ignore\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2de6a62ae..27299a795 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -394,6 +394,11 @@ class Documenter:\n         try:\n             matched = py_ext_sig_re.match(self.name)\n             explicit_modname, path, base, args, retann = matched.groups()\n+            # Process union types specified with '|'\n+            if args:\n+                args = args.replace('|', ' or ')\n+            if retann:\n+                retann = retann.replace('|', ' or ')\n         except AttributeError:\n             logger.warning(__('invalid signature for auto%s (%r)') % (self.objtype, self.name),\n                            type='autodoc')\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..95b318195 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -33,6 +33,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n+            # Union types specified with '|' are correctly handled by typing.stringify\n     except (TypeError, ValueError):\n         pass\n \ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..7f65997e5 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -28,7 +28,7 @@ logger = logging.getLogger(__name__)\n \n _directive_regex = re.compile(r'\\.\\. \\S+::')\n _google_section_regex = re.compile(r'^(\\s|\\w)+:\\s*$')\n-_google_typed_arg_regex = re.compile(r'(.+?)\\(\\s*(.*[^\\s]+)\\s*\\)')\n+_google_typed_arg_regex = re.compile(r'(.+?)\\(\\s*(.*[^\\s]+(?:\\s*\\|\\s*[^\\s]+)*)\\s*\\)')\n _numpy_section_regex = re.compile(r'^[=\\-`:\\'\"~^_*+#<>]{2,}\\s*$')\n _single_colon_regex = re.compile(r'(?<!:):(?!:)')\n _xref_or_code_regex = re.compile(\ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex af6edcae0..4dc64d71e 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -346,15 +346,14 @@ def _stringify_py37(annotation: Any) -> str:\n             # broken __args__ found\n             pass\n         elif qualname == 'Union':\n-            if len(annotation.__args__) > 1 and annotation.__args__[-1] is NoneType:\n-                if len(annotation.__args__) > 2:\n-                    args = ', '.join(stringify(a) for a in annotation.__args__[:-1])\n-                    return 'Optional[Union[%s]]' % args\n-                else:\n-                    return 'Optional[%s]' % stringify(annotation.__args__[0])\n+        elif isinstance(annotation, types_Union) or qualname == 'Union':\n+            # Handle union types specified with '|'\n+            if len(annotation.__args__) > 1 and NoneType in annotation.__args__:\n+                args = ' | '.join(stringify(a) for a in annotation.__args__ if a is not NoneType)\n+                return 'Optional[%s]' % args\n             else:\n-                args = ', '.join(stringify(a) for a in annotation.__args__)\n-                return 'Union[%s]' % args\n+                args = ' | '.join(stringify(a) for a in annotation.__args__)\n+                return args\n         elif qualname == 'types.Union':\n             if len(annotation.__args__) > 1 and None in annotation.__args__:\n                 args = ' | '.join(stringify(a) for a in annotation.__args__ if a)\n"}
{"instance_id":"sphinx-doc__sphinx-9281","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a7074..a3e627b8a 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -432,6 +432,8 @@ def safe_getattr(obj: Any, name: str, *defargs: Any) -> Any:\n \n def object_description(object: Any) -> str:\n     \"\"\"A repr() implementation that returns text safe to use in reST context.\"\"\"\n+    if isenumattribute(object):\n+        return '%s.%s' % (object.__class__.__name__, object.name)\n     if isinstance(object, dict):\n         try:\n             sorted_keys = sorted(object)\n"}
{"instance_id":"sphinx-doc__sphinx-9320","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py\nindex a40a21073..09ae97114 100644\n--- a/sphinx/cmd/quickstart.py\n+++ b/sphinx/cmd/quickstart.py\n@@ -223,9 +223,14 @@ def ask_user(d: Dict) -> None:\n         print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))\n         print()\n         d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),\n-                              '', is_path)\n+                              '', allow_empty)\n         if not d['path']:\n-            sys.exit(1)\n+            sys.exit(0)\n+        try:\n+            d['path'] = is_path(d['path'])\n+        except ValidationError as err:\n+            print(red('* ' + str(err)))\n+            continue\n \n     if 'sep' not in d:\n         print()\n"}
{"instance_id":"sphinx-doc__sphinx-9367","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex f541ec0a9..fbf9cedc4 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -213,10 +213,12 @@ class _UnparseVisitor(ast.NodeVisitor):\n         return \"%s %s\" % (self.visit(node.op), self.visit(node.operand))\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n-        if node.elts:\n-            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n-        else:\n+        if not node.elts:\n             return \"()\"\n+        elements = [self.visit(e) for e in node.elts]\n+        if len(elements) == 1:\n+            return \"(\" + elements[0] + \",)\"\n+        return \"(\" + \", \".join(elements) + \")\"\n \n     if sys.version_info < (3, 8):\n         # these ast nodes were deprecated in python 3.8\n@@ -237,3 +239,4 @@ class _UnparseVisitor(ast.NodeVisitor):\n \n     def generic_visit(self, node):\n         raise NotImplementedError('Unable to parse %s object' % type(node).__name__)\n+\n"}
{"instance_id":"sphinx-doc__sphinx-9461","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1cecb1f79..55d15ade2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2081,6 +2081,10 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n         if obj is None:\n             obj = self.object\n \n+        # Handle classmethod properties\n+        if isinstance(obj, classmethod) and inspect.isproperty(obj.__func__):\n+            self.object = obj.__func__\n+            self.member_order = self.member_order - 1\n         if (inspect.isclassmethod(obj) or\n                 inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name)):\n             # document class and static members before ordinary ones\n@@ -2661,7 +2665,9 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return ((inspect.isproperty(member) or\n+                 (isinstance(member, classmethod) and inspect.isproperty(member.__func__))) and\n+                isinstance(parent, ClassDocumenter))\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n"}
{"instance_id":"sphinx-doc__sphinx-9591","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex e8330e81c..56654a083 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -861,7 +861,8 @@ class PyProperty(PyObject):\n \n         typ = self.options.get('type')\n         if typ:\n-            signode += addnodes.desc_annotation(typ, ': ' + typ)\n+            children = _parse_annotation(typ, self.env)\n+            signode += addnodes.desc_annotation('', ': ', *children)\n \n         return fullname, prefix\n \n"}
{"instance_id":"sphinx-doc__sphinx-9602","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 9875a9f4b..8a63c1e2a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -146,6 +146,24 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n             return [nodes.Text(node.id)]\n         elif isinstance(node, ast.Subscript):\n             result = unparse(node.value)\n+            # Special handling for Literal annotations\n+            if isinstance(node.value, ast.Name) and node.value.id == 'Literal':\n+                result = [nodes.Text('Literal[')]\n+                if isinstance(node.slice, ast.Index):\n+                    elements = [node.slice.value]\n+                elif isinstance(node.slice, (ast.Tuple, ast.List)):\n+                    elements = node.slice.elts\n+                else:\n+                    elements = [node.slice]\n+                for i, elt in enumerate(elements):\n+                    if i > 0:\n+                        result.append(addnodes.desc_sig_punctuation('', ', '))\n+                    if isinstance(elt, ast.Constant):\n+                        result.append(nodes.Text(repr(elt.value)))\n+                    else:\n+                        result.extend(unparse(elt))\n+                result.append(addnodes.desc_sig_punctuation('', ']'))\n+                return result\n             result.append(addnodes.desc_sig_punctuation('', '['))\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex cf4318cda..58ea0b67d 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -381,7 +381,8 @@ def _stringify_py37(annotation: Any) -> str:\n             returns = stringify(annotation.__args__[-1])\n             return '%s[[%s], %s]' % (qualname, args, returns)\n         elif qualname == 'Literal':\n-            args = ', '.join(repr(a) for a in annotation.__args__)\n+            args = ', '.join(repr(arg) if isinstance(arg, (str, int, float, bool, type(None)))\n+                              else stringify(arg) for arg in annotation.__args__)\n             return '%s[%s]' % (qualname, args)\n         elif str(annotation).startswith('typing.Annotated'):  # for py39+\n             return stringify(annotation.__args__[0])\n"}
{"instance_id":"sphinx-doc__sphinx-9658","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex a255c0691..d9fa993e2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1664,10 +1664,13 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             self.env.events.emit('autodoc-process-bases',\n                                  self.fullname, self.object, self.options, bases)\n \n-            base_classes = [restify(cls) for cls in bases]\n-            sourcename = self.get_sourcename()\n-            self.add_line('', sourcename)\n-            self.add_line('   ' + _('Bases: %s') % ', '.join(base_classes), sourcename)\n+            base_classes = []\n+            for cls in bases:\n+                if ismock(cls):\n+                    base_name = '%s.%s' % (cls.__module__, cls.__name__)\n+                else:\n+                    base_name = restify(cls)\n+                base_classes.append(base_name)\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = get_class_members(self.object, self.objpath, self.get_attr)\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex b767b8adc..5bab497f0 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -232,6 +232,15 @@ def isenumattribute(x: Any) -> bool:\n     \"\"\"Check if the object is attribute of enum.\"\"\"\n     return isinstance(x, enum.Enum)\n \n+def ismock(subject: Any) -> bool:\n+    \"\"\"Check if the object is mocked.\"\"\"\n+    try:\n+        if safe_getattr(subject, '__sphinx_mock__', None) is not None:\n+            return True\n+        else:\n+            return False\n+    except Exception:\n+        return False\n \n def unpartial(obj: Any) -> Any:\n     \"\"\"Get an original object from partial object.\n"}
{"instance_id":"sphinx-doc__sphinx-9673","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..21a331b83 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -166,13 +166,18 @@ def augment_descriptions_with_types(\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n+        if 'return' not in has_description:\n+            # Add 'returns' field with empty description\n+            field = nodes.field()\n+            field += nodes.field_name('', 'returns')\n+            field += nodes.field_body('', nodes.paragraph('', ''))\n+            node += field\n+        if 'return' not in has_type:\n+            # Add 'rtype' field with return type\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n             field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n             node += field\n-\n-\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n     app.connect('object-description-transform', merge_typehints)\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..34b7c600a 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -776,11 +776,7 @@ class GoogleDocstring:\n \n         lines: List[str] = []\n         for _name, _type, _desc in fields:\n-            if use_rtype:\n-                field = self._format_field(_name, '', _desc)\n-            else:\n-                field = self._format_field(_name, _type, _desc)\n-\n+            field = self._format_field(_name, _type, _desc)\n             if multi:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n@@ -788,9 +784,8 @@ class GoogleDocstring:\n                     lines.extend(self._format_block(':returns: * ', field))\n             else:\n                 lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n-                    lines.extend([':rtype: %s' % _type, ''])\n-        if lines and lines[-1]:\n+            if _type and use_rtype:\n+                lines.extend([':rtype: %s' % _type, ''])\n             lines.append('')\n         return lines\n \n"}
{"instance_id":"sphinx-doc__sphinx-9698","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex cd02eaad5..1a3bd60c7 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -796,7 +796,7 @@ class PyMethod(PyObject):\n         if 'classmethod' in self.options:\n             return _('%s() (%s class method)') % (methname, clsname)\n         elif 'property' in self.options:\n-            return _('%s() (%s property)') % (methname, clsname)\n+            return _('%s (%s property)') % (methname, clsname)\n         elif 'staticmethod' in self.options:\n             return _('%s() (%s static method)') % (methname, clsname)\n         else:\n"}
{"instance_id":"sphinx-doc__sphinx-9711","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 7ec6c8518..26d9108a2 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n from typing import TYPE_CHECKING, Any, Dict\n+from packaging.version import Version\n \n from sphinx.config import Config\n from sphinx.errors import VersionRequirementError\n@@ -51,7 +52,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or Version(extension.version) < Version(reqversion):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n@@ -66,3 +67,4 @@ def setup(app: \"Sphinx\") -> Dict[str, Any]:\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n     }\n+\n"}
{"instance_id":"sympy__sympy-11618","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 593048464b..c159475378 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -266,8 +266,23 @@ def distance(self, p):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n-        return sqrt(sum([(a - b)**2 for a, b in zip(\n-            self.args, p.args if isinstance(p, Point) else p)]))\n+        if isinstance(p, Point):\n+            # Get coordinates from both points\n+            p1_coords = self.args\n+            p2_coords = p.args\n+            # Get the maximum dimension\n+            max_len = max(len(p1_coords), len(p2_coords))\n+            # Pad shorter point with zeros\n+            p1_coords = list(p1_coords) + [S.Zero] * (max_len - len(p1_coords))\n+            p2_coords = list(p2_coords) + [S.Zero] * (max_len - len(p2_coords))\n+            return sqrt(sum((a - b)**2 for a, b in zip(p1_coords, p2_coords)))\n+        else:\n+            # Handle non-Point iterables\n+            p1_coords = self.args\n+            max_len = max(len(p1_coords), len(p))\n+            p1_coords = list(p1_coords) + [S.Zero] * (max_len - len(p1_coords))\n+            p2_coords = list(p) + [S.Zero] * (max_len - len(p))\n+            return sqrt(sum((a - b)**2 for a, b in zip(p1_coords, p2_coords)))\n \n     def taxicab_distance(self, p):\n         \"\"\"The Taxicab Distance from self to point p.\n"}
{"instance_id":"sympy__sympy-12096","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 1b8005e1d2..8bd90374d2 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -507,7 +507,10 @@ def _eval_evalf(self, prec):\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n             try:\n-                return Float(self._imp_(*self.args), prec)\n+                result = self._imp_(*self.args)\n+                if hasattr(result, 'evalf'):\n+                    return result.evalf(prec)\n+                return Float(result, prec)\n             except (AttributeError, TypeError, ValueError):\n                 return\n \n"}
{"instance_id":"sympy__sympy-12489","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4ac1c2ef3b..2f34df00a0 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -924,8 +924,8 @@ def __new__(cls, *args, **kwargs):\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n@@ -944,7 +944,7 @@ def _af_new(perm):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n@@ -1300,7 +1300,7 @@ def __mul__(self, other):\n         else:\n             b.extend(list(range(len(b), len(a))))\n             perm = [b[i] for i in a] + b[len(a):]\n-        return _af_new(perm)\n+        return self._af_new(perm)\n \n     def commutes_with(self, other):\n         \"\"\"\n@@ -2828,4 +2828,3 @@ def _merge(arr, temp, left, mid, right):\n     return inv_count\n \n Perm = Permutation\n-_af_new = Perm._af_new\n"}
{"instance_id":"sympy__sympy-13091","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex db4e971848..6ab9ce5273 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -313,7 +313,7 @@ def __eq__(self, other):\n             try:\n                 other = _sympify(other)\n             except SympifyError:\n-                return False    # sympy != other\n+                return NotImplemented    # sympy != other\n \n             if type(self) != type(other):\n                 return False\ndiff --git a/sympy/core/logic.py b/sympy/core/logic.py\nindex 9833f27f1f..477739ea48 100644\n--- a/sympy/core/logic.py\n+++ b/sympy/core/logic.py\n@@ -207,7 +207,7 @@ def __hash__(self):\n \n     def __eq__(a, b):\n         if not isinstance(b, type(a)):\n-            return False\n+            return NotImplemented\n         else:\n             return a.args == b.args\n \ndiff --git a/sympy/holonomic/recurrence.py b/sympy/holonomic/recurrence.py\nindex 17a3b5fe2f..759afaf0ef 100644\n--- a/sympy/holonomic/recurrence.py\n+++ b/sympy/holonomic/recurrence.py\n@@ -86,7 +86,7 @@ def __eq__(self, other):\n         if self.base == other.base and self.gen_symbol == other.gen_symbol:\n             return True\n         else:\n-            return False\n+            return NotImplemented\n \n \n def _add_lists(list1, list2):\n@@ -301,10 +301,10 @@ def __eq__(self, other):\n             if self.listofpoly == other.listofpoly and self.parent == other.parent:\n                 return True\n             else:\n-                return False\n+                return NotImplemented\n         else:\n             if self.listofpoly[0] == other:\n-                for i in listofpoly[1:]:\n+                for i in self.listofpoly[1:]:\n                     if i is not self.parent.base.zero:\n                         return False\n                 return True\n"}
{"instance_id":"sympy__sympy-13372","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 72a5fbae52..f34908710a 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1301,12 +1301,16 @@ def evalf(x, prec, options):\n             elif re.is_number:\n                 re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                 reprec = prec\n+            else:\n+                raise NotImplementedError\n             if im == 0:\n                 im = None\n                 imprec = None\n             elif im.is_number:\n                 im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                 imprec = prec\n+            else:\n+                raise NotImplementedError\n             r = re, im, reprec, imprec\n         except AttributeError:\n             raise NotImplementedError\n"}
{"instance_id":"sympy__sympy-13551","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 66aafde2d6..d61d368af3 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -251,9 +251,23 @@ def _eval_product(self, term, limits):\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n             return deltaproduct(term, limits)\n \n-        dif = n - a\n-        if dif.is_Integer:\n-            return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+        # Handle products that can be expressed using the q-Pochhammer symbol\n+        from sympy.functions.combinatorial.factorials import RisingFactorial\n+        if term.is_Add:\n+            coeff, terms = term.as_coeff_add()\n+            if coeff.is_Number and len(terms) == 1:\n+                base = terms[0]\n+                if base.is_Pow and base.base == S(2) and base.exp == -k:\n+                    a = coeff\n+                    q = S.Half\n+                    return RisingFactorial(a, n - a + 1)._eval_q_pochhammer(q)\n+        from sympy.functions.combinatorial.factorials import RisingFactorial\n+        if term.is_Add and term.as_coeff_add()[0].is_Number:\n+            coeff, terms = term.as_coeff_add()\n+            if len(terms) == 1 and terms[0].is_Pow and terms[0].base == S(2) and terms[0].exp == -k:\n+                a = coeff\n+                q = S.Half\n+                return RisingFactorial(a, n - a + 1)._eval_q_pochhammer(q)\n \n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\ndiff --git a/sympy/functions/combinatorial/factorials.py b/sympy/functions/combinatorial/factorials.py\nindex 482ee77d69..61a10a5778 100644\n--- a/sympy/functions/combinatorial/factorials.py\n+++ b/sympy/functions/combinatorial/factorials.py\n@@ -509,7 +509,7 @@ def eval(cls, x, k):\n                     else:\n                         if isinstance(x, Poly):\n                             gens = x.gens\n-                            if len(gens)!= 1:\n+                            if len(gens) != 1:\n                                 raise ValueError(\"rf only defined for polynomials on one generator\")\n                             else:\n                                 return reduce(lambda r, i:\n@@ -517,7 +517,6 @@ def eval(cls, x, k):\n                                               range(0, int(k)), 1)\n                         else:\n                             return reduce(lambda r, i: r*(x + i), range(0, int(k)), 1)\n-\n                 else:\n                     if x is S.Infinity:\n                         return S.Infinity\n@@ -526,7 +525,7 @@ def eval(cls, x, k):\n                     else:\n                         if isinstance(x, Poly):\n                             gens = x.gens\n-                            if len(gens)!= 1:\n+                            if len(gens) != 1:\n                                 raise ValueError(\"rf only defined for polynomials on one generator\")\n                             else:\n                                 return 1/reduce(lambda r, i:\n@@ -556,6 +555,43 @@ def _eval_is_integer(self):\n         return fuzzy_and((self.args[0].is_integer, self.args[1].is_integer,\n                           self.args[1].is_nonnegative))\n \n+    def _eval_q_pochhammer(self, q):\n+        \"\"\"\n+        Evaluate the q-Pochhammer symbol for given q.\n+        \"\"\"\n+        n = self.args[1]\n+        if n.is_integer and n >= 0:\n+            k = n\n+            result = 1\n+            for i in range(k):\n+                result *= 1 - q**(self.args[0] + i)\n+            return result\n+        else:\n+            # For non-integer n, return unevaluated\n+            return self\n+        return 1/reduce(lambda r, i:\n+                        r*(self.args[0].shift(-i).expand()),\n+                        range(1, abs(int(k)) + 1), 1)\n+\n+    def _eval_rewrite_as_gamma(self, x, k):\n+        from sympy import gamma\n+        return gamma(x + k) / gamma(x)\n+\n+    def _eval_rewrite_as_FallingFactorial(self, x, k):\n+        return FallingFactorial(x + k - 1, k)\n+\n+    def _eval_rewrite_as_factorial(self, x, k):\n+        if x.is_integer and k.is_integer:\n+            return factorial(k + x - 1) / factorial(x - 1)\n+\n+    def _eval_rewrite_as_binomial(self, x, k):\n+        if k.is_integer:\n+            return factorial(k) * binomial(x + k - 1, k)\n+\n+    def _eval_is_integer(self):\n+        return fuzzy_and((self.args[0].is_integer, self.args[1].is_integer,\n+                          self.args[1].is_nonnegative))\n+\n     def _sage_(self):\n         import sage.all as sage\n         return sage.rising_factorial(self.args[0]._sage_(), self.args[1]._sage_())\n"}
{"instance_id":"sympy__sympy-13615","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 917717bb74..d42aec24ed 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1717,16 +1717,16 @@ def __new__(cls, a, b, evaluate=True):\n     def reduce(A, B):\n         \"\"\"\n         Simplify a :class:`Complement`.\n-\n         \"\"\"\n         if B == S.UniversalSet or A.is_subset(B):\n             return EmptySet()\n-\n         if isinstance(B, Union):\n             return Intersection(s.complement(A) for s in B.args)\n-\n+        if isinstance(A, FiniteSet):\n+            new_elements = [elem for elem in A if not (B.contains(elem) is S.true)]\n+            return FiniteSet(*new_elements)\n         result = B._complement(A)\n-        if result != None:\n+        if result is not None:\n             return result\n         else:\n             return Complement(A, B, evaluate=False)\n"}
{"instance_id":"sympy__sympy-13757","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 72728c44ef..89cc0da59a 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -137,11 +137,14 @@ def __rsub__(self, other):\n     @_sympifyit('other', NotImplemented)\n     @call_highest_priority('__rmul__')\n     def __mul__(self, other):\n+        from sympy.polys.polytools import Poly\n+        if isinstance(other, Poly):\n+            return Poly(self, other.gens) * other\n         return Mul(self, other)\n-\n-    @_sympifyit('other', NotImplemented)\n-    @call_highest_priority('__mul__')\n     def __rmul__(self, other):\n+        from sympy.polys.polytools import Poly\n+        if isinstance(other, Poly):\n+            return other * Poly(self, other.gens)\n         return Mul(other, self)\n \n     @_sympifyit('other', NotImplemented)\n"}
{"instance_id":"sympy__sympy-13798","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex ad4d7d9613..6931bc7b61 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -155,12 +155,18 @@ def __init__(self, settings=None):\n             \"dot\": r\" \\cdot \",\n             \"times\": r\" \\times \"\n         }\n-\n-        self._settings['mul_symbol_latex'] = \\\n-            mul_symbol_table[self._settings['mul_symbol']]\n-\n-        self._settings['mul_symbol_latex_numbers'] = \\\n-            mul_symbol_table[self._settings['mul_symbol'] or 'dot']\n+        mul_symbol = self._settings.get('mul_symbol', None)\n+        if mul_symbol in mul_symbol_table:\n+            self._settings['mul_symbol_latex'] = mul_symbol_table[mul_symbol]\n+        elif isinstance(mul_symbol, str):\n+            # Use arbitrary symbol provided by the user\n+            self._settings['mul_symbol_latex'] = mul_symbol\n+        else:\n+            raise ValueError(\"Invalid 'mul_symbol' value\")\n+        self._settings['mul_symbol_latex_numbers'] = (\n+            self._settings['mul_symbol_latex']\n+            if mul_symbol is not None else mul_symbol_table['dot']\n+        )\n \n         self._delim_dict = {'(': ')', '[': ']'}\n \n"}
{"instance_id":"sympy__sympy-13852","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..6845e2653f 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -292,6 +292,10 @@ def _eval_expand_func(self, **hints):\n         s, z = self.args\n         if s == 1:\n             return -log(1 + exp_polar(-I*pi)*z)\n+        if s == 2:\n+            return (pi**2 / 6) - log(1 - z)*log(z) - polylog(2, 1 - z)\n+        if s == 2 and z == S(1)/2:\n+            return -log(2)**2 / 2 + pi**2 / 12\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n"}
{"instance_id":"sympy__sympy-13877","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 97cde62e26..347ae79bd9 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -173,34 +173,53 @@ def _eval_det_bareiss(self):\n         TODO: Implement algorithm for sparse matrices (SFF),\n         http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\n         \"\"\"\n-\n-        # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead\n         def _find_pivot(l):\n-            for pos,val in enumerate(l):\n-                if val:\n-                    return (pos, val, None, None)\n-            return (None, None, None, None)\n+            # First try to find a numeric pivot to avoid NaN comparisons\n+            for pos, val in enumerate(l):\n+                try:\n+                    if val == S.Zero:\n+                        continue\n+                    if val.is_number:\n+                        return (pos, val)\n+                except TypeError:\n+                    continue\n+\n+            # Then try constant symbolic expressions\n+            for pos, val in enumerate(l):\n+                try:\n+                    if val == S.Zero:\n+                        continue\n+                    if not val.free_symbols:\n+                        return (pos, val)\n+                except TypeError:\n+                    continue\n+\n+            # Finally, use any non-zero entry as last resort\n+            for pos, val in enumerate(l):\n+                try:\n+                    if val != S.Zero:\n+                        return (pos, val)\n+                except TypeError:\n+                    continue\n \n+            return (None, None)\n \n-        # Recursively implemented Bareiss' algorithm as per Deanna Richelle Leggett's\n-        # thesis http://www.math.usm.edu/perry/Research/Thesis_DRL.pdf\n         def bareiss(mat, cumm=1):\n             if mat.rows == 0:\n                 return S.One\n             elif mat.rows == 1:\n                 return mat[0, 0]\n \n-            # find a pivot and extract the remaining matrix\n-            # XXX should use `_find_reasonable_pivot`.  Blocked by issue #12362\n-            pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])\n-            if pivot_pos == None:\n+            # Find a pivot using our safe pivot selection strategy\n+            pivot_pos, pivot_val = _find_pivot(mat[:, 0])\n+            if pivot_pos is None:\n                 return S.Zero\n \n-            # if we have a valid pivot, we'll do a \"row swap\", so keep the\n+            # If we have a valid pivot, we'll do a \"row swap\", so keep the\n             # sign of the det\n             sign = (-1) ** (pivot_pos % 2)\n \n-            # we want every row but the pivot row and every column\n+            # Extract submatrix excluding pivot row\n             rows = list(i for i in range(mat.rows) if i != pivot_pos)\n             cols = list(range(mat.cols))\n             tmp_mat = mat.extract(rows, cols)\n@@ -208,7 +227,7 @@ def bareiss(mat, cumm=1):\n             def entry(i, j):\n                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n \n             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n"}
{"instance_id":"sympy__sympy-13878","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..9d95f1a6e3 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -50,6 +50,7 @@\n                    Lambda, Basic, lowergamma, erf, erfc, I)\n from sympy import beta as beta_fn\n from sympy import cos, exp, besseli\n+from sympy import asin\n from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,\n         ContinuousDistributionHandmade)\n from sympy.stats.rv import _value_check\n@@ -152,6 +153,9 @@ class ArcsinDistribution(SingleContinuousDistribution):\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return (asin((x - a) / (b - a)) / pi)\n \n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n@@ -669,6 +673,9 @@ class DagumDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return 1 - (1 + (x/b)**(-a))**(-p)\n \n \n def Dagum(name, p, a, b):\n@@ -1107,6 +1114,9 @@ def check(k, theta):\n     def pdf(self, x):\n         k, theta = self.k, self.theta\n         return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        return lowergamma(k, x/theta) / gamma(k)\n \n     def sample(self):\n         return random.gammavariate(self.k, self.theta)\n"}
{"instance_id":"sympy__sympy-13974","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 9dd10d219e..025a54b048 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -349,9 +349,8 @@ def tensor_product_simp(e, **hints):\n     \"\"\"Try to simplify and combine TensorProducts.\n \n     In general this will try to pull expressions inside of ``TensorProducts``.\n-    It currently only works for relatively simple cases where the products have\n-    only scalars, raw ``TensorProducts``, not ``Add``, ``Pow``, ``Commutators``\n-    of ``TensorProducts``. It is best to see what it does by showing examples.\n+    It now handles powers of TensorProducts by distributing the exponent over the\n+    components of the TensorProduct.\n \n     Examples\n     ========\n@@ -372,17 +371,25 @@ def tensor_product_simp(e, **hints):\n     >>> tensor_product_simp(e)\n     (A*C)x(B*D)\n \n-    This is the core logic of this function, and it works inside, powers, sums,\n-    commutators and anticommutators as well:\n+    Now see how powers of TensorProducts are handled:\n \n-    >>> tensor_product_simp(e**2)\n-    (A*C)x(B*D)**2\n+    >>> e = TensorProduct(A,B)**2\n+    >>> e\n+    (AxB)**2\n+    >>> tensor_product_simp(e)\n+    A**2xB**2\n \n     \"\"\"\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        exp = e.exp\n+        if isinstance(base, TensorProduct):\n+            # Distribute power over TensorProduct components\n+            return TensorProduct(*[arg ** exp for arg in base.args])\n+        else:\n+            return Pow(base, exp)\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n@@ -391,3 +398,4 @@ def tensor_product_simp(e, **hints):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n         return e\n+\n"}
{"instance_id":"sympy__sympy-14248","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..c7a6e1e958 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -306,18 +306,22 @@ def _print_Add(self, expr, order=None):\n             terms = self._as_ordered_terms(expr, order=order)\n \n         tex = \"\"\n-        for i, term in enumerate(terms):\n-            if i == 0:\n-                pass\n-            elif _coeff_isneg(term):\n-                tex += \" - \"\n-                term = -term\n+        first = True\n+        for term in terms:\n+            coeff, rest = term.as_coeff_Mul()\n+            if coeff.is_negative:\n+                sign = \" - \"\n+                coeff = -coeff\n             else:\n-                tex += \" + \"\n-            term_tex = self._print(term)\n+                sign = \" + \" if not first else \"\"\n+            first = False\n+            if coeff == S.One:\n+                term_tex = self._print(rest)\n+            else:\n+                term_tex = self._print(coeff * rest)\n             if self._needs_add_brackets(term):\n                 term_tex = r\"\\left(%s\\right)\" % term_tex\n-            tex += term_tex\n+            tex += sign + term_tex\n \n         return tex\n \ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..c4a6723778 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -360,6 +360,18 @@ def _print_Cycle(self, dc):\n         if dc == Cycle():\n             cyc = stringPict('')\n             return prettyForm(*cyc.parens())\n+    def _needs_add_brackets(self, expr):\n+        \"\"\"\n+        Returns True if the expression needs to be wrapped in brackets when\n+        printed as part of an Add, False otherwise.\n+        \"\"\"\n+        if expr.is_Relational:\n+            return True\n+        if expr.has(Mod):\n+            return True\n+        if expr.is_Add:\n+            return True\n+        return False\n \n         dc_list = Permutation(dc.list()).cyclic_form\n         # for Identity Cycle\n@@ -1413,72 +1425,28 @@ def _print_Add(self, expr, order=None):\n             terms = list(expr.args)\n         else:\n             terms = self._as_ordered_terms(expr, order=order)\n-        pforms, indices = [], []\n-\n-        def pretty_negative(pform, index):\n-            \"\"\"Prepend a minus sign to a pretty form. \"\"\"\n-            #TODO: Move this code to prettyForm\n-            if index == 0:\n-                if pform.height() > 1:\n-                    pform_neg = '- '\n-                else:\n-                    pform_neg = '-'\n-            else:\n-                pform_neg = ' - '\n-\n-            if (pform.binding > prettyForm.NEG\n-                or pform.binding == prettyForm.ADD):\n-                p = stringPict(*pform.parens())\n+        pforms = []\n+        first = True\n+        for term in terms:\n+            coeff, rest = term.as_coeff_Mul()\n+            if coeff.is_negative:\n+                sign = ' - ' if not first else '-'\n+                coeff = -coeff\n             else:\n-                p = pform\n-            p = stringPict.next(pform_neg, p)\n-            # Lower the binding to NEG, even if it was higher. Otherwise, it\n-            # will print as a + ( - (b)), instead of a - (b).\n-            return prettyForm(binding=prettyForm.NEG, *p)\n-\n-        for i, term in enumerate(terms):\n-            if term.is_Mul and _coeff_isneg(term):\n-                coeff, other = term.as_coeff_mul(rational=False)\n-                pform = self._print(Mul(-coeff, *other, evaluate=False))\n-                pforms.append(pretty_negative(pform, i))\n-            elif term.is_Rational and term.q > 1:\n-                pforms.append(None)\n-                indices.append(i)\n-            elif term.is_Number and term < 0:\n-                pform = self._print(-term)\n-                pforms.append(pretty_negative(pform, i))\n-            elif term.is_Relational:\n-                pforms.append(prettyForm(*self._print(term).parens()))\n+                sign = ' + ' if not first else ''\n+            return pforms[0].__add__(*pforms[1:])\n+            if coeff == S.One:\n+                pform = self._print(rest)\n             else:\n-                pforms.append(self._print(term))\n-\n-        if indices:\n-            large = True\n-\n-            for pform in pforms:\n-                if pform is not None and pform.height() > 1:\n-                    break\n+                pform = self._print(coeff * rest)\n+            if self._needs_add_brackets(term):\n+                pform = prettyForm(*pform.parens())\n+            if sign.strip() == '-':\n+                pform = prettyForm(*stringPict.next(sign, pform))\n             else:\n-                large = False\n-\n-            for i in indices:\n-                term, negative = terms[i], False\n-\n-                if term < 0:\n-                    term, negative = -term, True\n-\n-                if large:\n-                    pform = prettyForm(str(term.p))/prettyForm(str(term.q))\n-                else:\n-                    pform = self._print(term)\n-\n-                if negative:\n-                    pform = pretty_negative(pform, i)\n-\n-                pforms[i] = pform\n-\n+                pform = prettyForm(*stringPict.next(sign, pform))\n+            pforms.append(pform)\n         return prettyForm.__add__(*pforms)\n-\n     def _print_Mul(self, product):\n         from sympy.physics.units import Quantity\n         a = []  # items in the numerator\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..5d4b6b7160 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -54,21 +54,24 @@ def _print_Add(self, expr, order=None):\n \n         PREC = precedence(expr)\n         l = []\n+        first = True\n         for term in terms:\n-            t = self._print(term)\n-            if t.startswith('-'):\n+            coeff, rest = term.as_coeff_Mul()\n+            if coeff.is_negative:\n                 sign = \"-\"\n-                t = t[1:]\n+                coeff = -coeff\n             else:\n-                sign = \"+\"\n+                sign = \"+\" if not first else \"\"\n+            first = False\n+            if coeff == 1:\n+                t = self._print(rest)\n+            else:\n+                t = self._print(coeff * rest)\n             if precedence(term) < PREC:\n-                l.extend([sign, \"(%s)\" % t])\n+                l.append(\"%s(%s)\" % (sign, t))\n             else:\n-                l.extend([sign, t])\n-        sign = l.pop(0)\n-        if sign == '+':\n-            sign = \"\"\n-        return sign + ' '.join(l)\n+                l.append(\"%s%s\" % (sign, t))\n+        return ' '.join(l)\n \n     def _print_BooleanTrue(self, expr):\n         return \"True\"\n"}
{"instance_id":"sympy__sympy-14531","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex dc6d8ffe59..c4ca77a56b 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -47,14 +47,20 @@ def _print_module(self, expr):\n \n def python(expr, **settings):\n     \"\"\"Return Python interpretation of passed expression\n-    (can be passed to the exec() function without any modifications)\"\"\"\n+    (can be passed to the exec() function without any modifications)\n \n+    The output is a valid Python code string that can be executed to get the\n+    expression, with all symbols and functions properly defined.\n+    \"\"\"\n     printer = PythonPrinter(settings)\n+    # First, print the expression to find all symbols and functions\n     exprp = printer.doprint(expr)\n \n-    result = ''\n-    # Returning found symbols and functions\n+    # Build the declarations for symbols and functions\n+    result = []\n     renamings = {}\n+\n+    # Handle symbols first\n     for symbolname in printer.symbols:\n         newsymbolname = symbolname\n         # Escape symbol names that are reserved python keywords\n@@ -63,11 +69,11 @@ def python(expr, **settings):\n                 newsymbolname += \"_\"\n                 if (newsymbolname not in printer.symbols and\n                         newsymbolname not in printer.functions):\n-                    renamings[sympy.Symbol(\n-                        symbolname)] = sympy.Symbol(newsymbolname)\n+                    renamings[sympy.Symbol(symbolname)] = sympy.Symbol(newsymbolname)\n                     break\n-        result += newsymbolname + ' = Symbol(\\'' + symbolname + '\\')\\n'\n+        result.append(newsymbolname + ' = Symbol(\\'' + symbolname + '\\')')\n \n+    # Then handle functions\n     for functionname in printer.functions:\n         newfunctionname = functionname\n         # Escape function names that are reserved python keywords\n@@ -76,15 +82,20 @@ def python(expr, **settings):\n                 newfunctionname += \"_\"\n                 if (newfunctionname not in printer.symbols and\n                         newfunctionname not in printer.functions):\n-                    renamings[sympy.Function(\n-                        functionname)] = sympy.Function(newfunctionname)\n+                    renamings[sympy.Function(functionname)] = sympy.Function(newfunctionname)\n                     break\n-        result += newfunctionname + ' = Function(\\'' + functionname + '\\')\\n'\n+        result.append(newfunctionname + ' = Function(\\'' + functionname + '\\')')\n \n-    if not len(renamings) == 0:\n+    # Apply any renamings if needed\n+    if renamings:\n         exprp = expr.subs(renamings)\n-    result += 'e = ' + printer._str(exprp)\n-    return result\n+        exprp = printer.doprint(exprp)\n+\n+    # Add the final expression\n+    result.append('e = ' + exprp)\n+\n+    # Join all lines with newlines\n+    return '\\n'.join(result)\n \n \n def print_python(expr, **settings):\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex cc1d19fcce..712cee1b8e 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -216,9 +216,9 @@ def _print_LatticeOp(self, expr):\n     def _print_Limit(self, expr):\n         e, z, z0, dir = expr.args\n         if str(dir) == \"+\":\n-            return \"Limit(%s, %s, %s)\" % (e, z, z0)\n+            return \"Limit(%s, %s, %s)\" % (self._print(e), self._print(z), self._print(z0))\n         else:\n-            return \"Limit(%s, %s, %s, dir='%s')\" % (e, z, z0, dir)\n+            return \"Limit(%s, %s, %s, dir='%s')\" % (self._print(e), self._print(z), self._print(z0), dir)\n \n     def _print_list(self, expr):\n         return \"[%s]\" % self.stringify(expr, \", \")\n@@ -617,7 +617,6 @@ def _print_Float(self, expr):\n         return rv\n \n     def _print_Relational(self, expr):\n-\n         charmap = {\n             \"==\": \"Eq\",\n             \"!=\": \"Ne\",\n@@ -630,7 +629,7 @@ def _print_Relational(self, expr):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n"}
{"instance_id":"sympy__sympy-14711","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..8849119218 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -57,6 +57,8 @@ def __hash__(self):\n \n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n"}
{"instance_id":"sympy__sympy-14976","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex d06901425d..44a4112836 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -331,6 +331,12 @@ def _print_Float(self, e):\n         args = str(tuple(map(int, e._mpf_)))\n         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)\n \n+    def _print_Rational(self, e):\n+        return '{func}({num})/{func}({den})'.format(\n+            func=self._module_format('mpmath.mpf'),\n+            num=self._print(e.p),\n+            den=self._print(e.q))\n+\n \n     def _print_uppergamma(self, e):\n         return \"{0}({1}, {2}, {3})\".format(\n"}
{"instance_id":"sympy__sympy-15017","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\nindex 9be94a8631..2e7ed30d22 100644\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1\n         return self\n \n     def __setitem__(self, index, value):\n@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1\n         return self\n \n     def __setitem__(self, index, value):\n@@ -203,3 +203,4 @@ def as_immutable(self):\n     @property\n     def free_symbols(self):\n         return {i for j in self._array for i in j.free_symbols}\n+\n"}
{"instance_id":"sympy__sympy-15349","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py\nindex b84e7cb95a..7eae8d73d0 100644\n--- a/sympy/algebras/quaternion.py\n+++ b/sympy/algebras/quaternion.py\n@@ -529,7 +529,7 @@ def to_rotation_matrix(self, v=None):\n \n         m10 = 2*s*(q.b*q.c + q.d*q.a)\n         m11 = 1 - 2*s*(q.b**2 + q.d**2)\n-        m12 = 2*s*(q.c*q.d + q.b*q.a)\n+        m12 = 2*s*(q.c*q.d - q.b*q.a)\n \n         m20 = 2*s*(q.b*q.d - q.c*q.a)\n         m21 = 2*s*(q.c*q.d + q.b*q.a)\n"}
{"instance_id":"sympy__sympy-15599","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc..ab4c2bf8ee 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -123,8 +123,10 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n-                # finding distributive term\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n                 non_mod_l = [cls(x, q) for x in non_mod_l]\n                 mod = []\n                 non_mod = []\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 04d3b1ab9f..05e2d1979b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1624,6 +1624,7 @@ def test_Mod():\n     i = Symbol('i', integer=True)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n+    assert Mod(3*i, 2) == Mod(i, 2)\n \n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n"}
{"instance_id":"sympy__sympy-15809","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 5f9fe73c5c..885f52c2b3 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -340,7 +340,10 @@ def real_root(arg, n=None, evaluate=None):\n class MinMaxBase(Expr, LatticeOp):\n     def __new__(cls, *args, **assumptions):\n         if not args:\n-            raise ValueError(\"The Max/Min functions must have arguments.\")\n+            if cls.__name__ == 'Min':\n+                return S.Infinity\n+            else:  # cls.__name__ == 'Max'\n+                return S.NegativeInfinity\n \n         args = (sympify(arg) for arg in args)\n \n"}
{"instance_id":"sympy__sympy-15875","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 83a5f2aedc..1dccb59e32 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -531,8 +531,6 @@ def _eval_is_imaginary(self):\n \n     def _eval_is_zero(self):\n         if self.is_commutative is False:\n-            # issue 10528: there is no way to know if a nc symbol\n-            # is zero or not\n             return\n         nz = []\n         z = 0\n@@ -561,7 +559,7 @@ def _eval_is_zero(self):\n             if not im_or_z and not im:\n                 return True\n             if im and not im_or_z:\n-                return False\n+                return None\n         if b.is_zero is False:\n             return False\n \n"}
{"instance_id":"sympy__sympy-15976","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 3f8b8d49e0..8e40ee9ef4 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -358,11 +358,15 @@ def translate(s):\n                 return greek_unicode.get(s)\n             else:\n                 return s\n-\n-        name, supers, subs = split_super_sub(sym.name)\n-        name = translate(name)\n-        supers = [translate(sup) for sup in supers]\n-        subs = [translate(sub) for sub in subs]\n+        if '_' not in sym.name:\n+            name = translate(sym.name)\n+            supers = []\n+            subs = []\n+        else:\n+            name, supers, subs = split_super_sub(sym.name)\n+            name = translate(name)\n+            supers = [translate(sup) for sup in supers]\n+            subs = [translate(sub) for sub in subs]\n \n         mname = self.dom.createElement('mml:mi')\n         mname.appendChild(self.dom.createTextNode(name))\n"}
{"instance_id":"sympy__sympy-16450","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex c6b511f206..0d48062736 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -251,7 +251,7 @@ def posify(eq):\n             eq[i] = e.subs(reps)\n         return f(eq), {r: s for s, r in reps.items()}\n \n-    reps = {s: Dummy(s.name, positive=True)\n+    reps = {s: Dummy(s.name, positive=True, finite=s.is_finite)\n                  for s in eq.free_symbols if s.is_positive is None}\n     eq = eq.subs(reps)\n     return eq, {r: s for s, r in reps.items()}\n"}
{"instance_id":"sympy__sympy-16597","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 44674d1984..19a1665c01 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -232,6 +232,8 @@ def __new_stage2__(cls, name, **assumptions):\n         # be strict about commutativity\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n         assumptions['commutative'] = is_commutative\n+        if assumptions.get('even', False):\n+            assumptions['finite'] = True\n         obj._assumptions = StdFactKB(assumptions)\n         obj._assumptions._generator = tmp_asm_copy  # Issue #8873\n         return obj\n"}
{"instance_id":"sympy__sympy-16766","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310735..a284707d60 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,10 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n"}
{"instance_id":"sympy__sympy-16886","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/crypto/crypto.py b/sympy/crypto/crypto.py\nindex ca552191c0..0c556b6efb 100644\n--- a/sympy/crypto/crypto.py\n+++ b/sympy/crypto/crypto.py\n@@ -1520,7 +1520,7 @@ def decipher_kid_rsa(msg, key):\n     \"..-\": \"U\", \"...-\": \"V\",\n     \".--\": \"W\", \"-..-\": \"X\",\n     \"-.--\": \"Y\", \"--..\": \"Z\",\n-    \"-----\": \"0\", \"----\": \"1\",\n+    \"-----\": \"0\", \".----\": \"1\",\n     \"..---\": \"2\", \"...--\": \"3\",\n     \"....-\": \"4\", \".....\": \"5\",\n     \"-....\": \"6\", \"--...\": \"7\",\n"}
{"instance_id":"sympy__sympy-17318","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..de59422669 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,8 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+    if not a:\n+        return 1, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\ndiff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex f0b7653ea8..8492f156d5 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -130,7 +130,10 @@ def sqrtdenest(expr, max_iter=3):\n     \"\"\"\n     expr = expand_mul(sympify(expr))\n     for i in range(max_iter):\n-        z = _sqrtdenest0(expr)\n+        try:\n+            z = _sqrtdenest0(expr)\n+        except IndexError:\n+            return expr\n         if expr == z:\n             return expr\n         expr = z\n"}
{"instance_id":"sympy__sympy-18211","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex 445be3e0e8..07a806dd33 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -1987,7 +1987,7 @@ def solveset(f, symbol=None, domain=S.Complexes):\n             raise NotImplementedError(filldedent('''\n                 relationship between value and 0 is unknown: %s''' % b))\n \n-    if symbol is None:\n+            return ConditionSet(symbol, Eq(f, 0), domain)\n         if len(free_symbols) == 1:\n             symbol = free_symbols.pop()\n         elif free_symbols:\n@@ -2135,7 +2135,7 @@ def solvify(f, symbol, domain):\n         result = []\n \n     elif isinstance(solution_set, ConditionSet):\n-        raise NotImplementedError('solveset is unable to solve this equation.')\n+        return solution_set\n \n     elif isinstance(solution_set, FiniteSet):\n         result = list(solution_set)\n"}
{"instance_id":"sympy__sympy-18763","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8743723ea0..55bd020cfb 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -703,8 +703,8 @@ def _print_Subs(self, subs):\n         latex_new = (self._print(e) for e in new)\n         latex_subs = r'\\\\ '.join(\n             e[0] + '=' + e[1] for e in zip(latex_old, latex_new))\n-        return r'\\left. %s \\right|_{\\substack{ %s }}' % (latex_expr,\n-                                                         latex_subs)\n+        return r'\\left. \\left(%s\\right) \\right|_{\\substack{ %s }}' % (latex_expr,\n+                                                                     latex_subs)\n \n     def _print_Integral(self, expr):\n         tex, symbols = \"\", []\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 0280f2e46c..d0788568e5 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -2344,9 +2344,10 @@ def _print_Subs(self, e):\n \n         b = pform.baseline\n         pform.baseline = pform.height() - 1\n-        pform = prettyForm(*pform.right(self._print_seq([\n+        subs_pform = self._print_seq([\n             self._print_seq((self._print(v[0]), xsym('=='), self._print(v[1])),\n-                delimiter='') for v in zip(e.variables, e.point) ])))\n+                delimiter='') for v in zip(e.variables, e.point) ])\n+        pform = prettyForm(*pform.right(subs_pform))\n \n         pform.baseline = b\n         return pform\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex e2f459f840..6ee87716c3 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -379,11 +379,11 @@ def _print_Permutation(self, expr):\n \n     def _print_Subs(self, obj):\n         expr, old, new = obj.args\n+        expr_str = self.parenthesize(expr, PRECEDENCE[\"Atom\"])\n         if len(obj.point) == 1:\n             old = old[0]\n             new = new[0]\n-        return \"Subs(%s, %s, %s)\" % (\n-            self._print(expr), self._print(old), self._print(new))\n+        return \"Subs(%s, %s, %s)\" % (expr_str, self._print(old), self._print(new))\n \n     def _print_TensorIndex(self, expr):\n         return expr._print()\n"}
{"instance_id":"sympy__sympy-19040","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex 68b69d1a24..a215cae911 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -5917,13 +5917,13 @@ def _symbolic_factor_list(expr, opt, method):\n         else:\n             base, exp = arg, S.One\n \n+        opt = opt.clone({'extension': opt.extension})\n         try:\n             poly, _ = _poly_from_expr(base, opt)\n         except PolificationFailed as exc:\n             factors.append((exc.expr, exp))\n         else:\n             func = getattr(poly, method + '_list')\n-\n             _coeff, _factors = func()\n             if _coeff is not S.One:\n                 if exp.is_Integer:\n@@ -5932,7 +5932,18 @@ def _symbolic_factor_list(expr, opt, method):\n                     factors.append((_coeff, exp))\n                 else:\n                     _factors.append((_coeff, S.One))\n-\n+            if exp is S.One:\n+                factors.extend(_factors)\n+            elif exp.is_integer:\n+                factors.extend([(f, k*exp) for f, k in _factors])\n+            else:\n+                other = []\n+                for f, k in _factors:\n+                    if f.as_expr().is_positive:\n+                        factors.append((f, k*exp))\n+                    else:\n+                        other.append((f, k))\n+                factors.append((_factors_product(other), exp))\n             if exp is S.One:\n                 factors.extend(_factors)\n             elif exp.is_integer:\n"}
{"instance_id":"sympy__sympy-19346","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py\nindex c936a692c0..c87fcab627 100644\n--- a/sympy/printing/repr.py\n+++ b/sympy/printing/repr.py\n@@ -14,6 +14,8 @@\n from mpmath.libmp import repr_dps, to_str as mlib_to_str\n \n from .printer import Printer\n+from sympy.utilities import default_sort_key\n+\n \n \n class ReprPrinter(Printer):\n@@ -144,6 +146,14 @@ def _print_EmptySequence(self, expr):\n     def _print_list(self, expr):\n         return \"[%s]\" % self.reprify(expr, \", \")\n \n+\n+    def _print_set(self, expr):\n+        items = sorted(expr, key=default_sort_key)\n+        return \"{%s}\" % self.reprify(items, \", \")\n+\n+    def _print_dict(self, expr):\n+        items = [\"%s: %s\" % (self._print(key), self._print(value)) for key, value in expr.items()]\n+        return \"{%s}\" % \", \".join(items)\n     def _print_MatrixBase(self, expr):\n         # special case for some empty matrices\n         if (expr.rows == 0) ^ (expr.cols == 0):\n"}
{"instance_id":"sympy__sympy-19495","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 118eda6f77..120ec80c91 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -240,10 +240,17 @@ def _eval_subs(self, old, new):\n             # the base set should be filtered and if new is not in\n             # the base set then this substitution is ignored\n             return self.func(sym, cond, base)\n+        # For ImageSet base sets, we need to be careful not to substitute bound variables\n+        if hasattr(base, 'lamda') and old in base.lamda.variables:\n+            # If the substitution target is a bound variable in the ImageSet,\n+            # only substitute in the condition and keep the base set unchanged\n+            cond = self.condition.subs(old, new)\n+            return self.func(self.sym, cond, base)\n+        # For all other cases, apply substitution normally\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n         if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+            return base\n         return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\ndiff --git a/sympy/sets/fancysets.py b/sympy/sets/fancysets.py\nindex bf013522e1..a745098c6d 100644\n--- a/sympy/sets/fancysets.py\n+++ b/sympy/sets/fancysets.py\n@@ -478,6 +478,18 @@ def get_equations(expr, candidate):\n         if solnset is None:\n             return None\n         return fuzzy_not(solnset.is_empty)\n+    def _eval_subs(self, old, new):\n+        \"\"\"\n+        Substitutes old with new in the ImageSet.\n+        \"\"\"\n+        if old in self.lamda.variables:\n+            # Don't substitute bound variables\n+            return self\n+        new_sets = [s.subs(old, new) for s in self.base_sets]\n+        new_expr = self.lamda.expr.subs(old, new)\n+        new_vars = self.lamda.variables\n+        new_lambda = Lambda(new_vars, new_expr)\n+        return self.func(new_lambda, *new_sets)\n \n     @property\n     def is_iterable(self):\n"}
{"instance_id":"sympy__sympy-19637","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex a3f1ce2851..a0fc7067fe 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -466,6 +466,7 @@ def kernS(s):\n     XXX This hack should not be necessary once issue 4596 has been resolved.\n     \"\"\"\n     import string\n+    kern = ''\n     from random import choice\n     from sympy.core.symbol import Symbol\n     hit = False\n"}
{"instance_id":"sympy__sympy-19783","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py\nindex 17da3cfd2c..ac0e5ab38f 100644\n--- a/sympy/physics/quantum/dagger.py\n+++ b/sympy/physics/quantum/dagger.py\n@@ -5,6 +5,29 @@\n from sympy.core import Expr\n from sympy.functions.elementary.complexes import adjoint\n \n+from sympy import Mul\n+__all__ = [\n+    'Dagger'\n+]\n+\n+class Dagger(adjoint):\n+    \"\"\"General Hermitian conjugate operation.\"\"\"\n+\n+    def __new__(cls, arg):\n+        if hasattr(arg, 'adjoint'):\n+            obj = arg.adjoint()\n+        elif hasattr(arg, 'conjugate') and hasattr(arg, 'transpose'):\n+            obj = arg.conjugate().transpose()\n+        else:\n+            obj = None\n+        if obj is not None:\n+            return obj\n+        return Expr.__new__(cls, arg)\n+\n+    def __mul__(self, other):\n+        if other.__class__.__name__ == 'IdentityOperator':\n+            return self\n+        return Mul(self, other)\n __all__ = [\n     'Dagger'\n ]\n@@ -84,6 +107,10 @@ def __new__(cls, arg):\n         if obj is not None:\n             return obj\n         return Expr.__new__(cls, arg)\n+    def __mul__(self, other):\n+        if other.__class__.__name__ == 'IdentityOperator':\n+            return self\n+        return Mul(self, other)\n \n adjoint.__name__ = \"Dagger\"\n adjoint._sympyrepr = lambda a, b: \"Dagger(%s)\" % b._print(a.args[0])\ndiff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py\nindex 306bfee64f..510af0e29c 100644\n--- a/sympy/physics/quantum/operator.py\n+++ b/sympy/physics/quantum/operator.py\n@@ -177,10 +177,10 @@ def _eval_inverse(self):\n         return self**(-1)\n \n     def __mul__(self, other):\n-\n         if isinstance(other, IdentityOperator):\n             return self\n-\n+        if isinstance(self, Dagger) and isinstance(other, IdentityOperator):\n+            return self\n         return Mul(self, other)\n \n \n@@ -306,10 +306,10 @@ def _print_contents_latex(self, printer, *args):\n         return r'{\\mathcal{I}}'\n \n     def __mul__(self, other):\n-\n         if isinstance(other, Operator):\n             return other\n-\n+        if isinstance(other, Dagger):\n+            return other\n         return Mul(self, other)\n \n     def _represent_default_basis(self, **options):\n"}
{"instance_id":"sympy__sympy-19954","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..cc5a43c092 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2198,8 +2198,9 @@ def _number_blocks(blocks):\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        if 0 <= i < len(blocks) and 0 <= i < len(num_blocks):\n+                            del num_blocks[i], blocks[i]\n+                            to_remove.append(rep_blocks[i])\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n"}
{"instance_id":"sympy__sympy-20428","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/polys/densebasic.py b/sympy/polys/densebasic.py\nindex 1caeb8f629..cb78cb7b06 100644\n--- a/sympy/polys/densebasic.py\n+++ b/sympy/polys/densebasic.py\n@@ -1678,6 +1678,8 @@ def dmp_terms_gcd(f, u, K):\n         return (0,)*(u + 1), f\n \n     F = dmp_to_dict(f, u)\n+    if not F:\n+        return (0,)*(u + 1), f\n     G = monomial_min(*list(F.keys()))\n \n     if all(g == 0 for g in G):\ndiff --git a/sympy/polys/densetools.py b/sympy/polys/densetools.py\nindex f057824642..3b6aef7c8d 100644\n--- a/sympy/polys/densetools.py\n+++ b/sympy/polys/densetools.py\n@@ -1252,6 +1252,7 @@ def dmp_clear_denoms(f, u, K0, K1=None, convert=False):\n     if not K1.is_one(common):\n         f = dmp_mul_ground(f, common, u, K0)\n \n+        f = dmp_strip(f, u)\n     if not convert:\n         return common, f\n     else:\ndiff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 2a72bf25b4..846c78a68a 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -340,6 +340,8 @@ def monomial_max(*monoms):\n     return tuple(M)\n \n def monomial_min(*monoms):\n+    if not monoms:\n+        return ()\n     \"\"\"\n     Returns minimal degree for each variable in a set of monomials.\n \ndiff --git a/sympy/polys/polyclasses.py b/sympy/polys/polyclasses.py\nindex 238a0f0b25..e9addaefea 100644\n--- a/sympy/polys/polyclasses.py\n+++ b/sympy/polys/polyclasses.py\n@@ -42,6 +42,7 @@ def _perify_factors(per, result, include):\n     dup_convert, dmp_convert,\n     dmp_from_sympy,\n     dup_strip,\n+    dmp_strip,\n     dup_degree, dmp_degree_in,\n     dmp_degree_list,\n     dmp_negative_p,\n@@ -155,6 +156,7 @@ def __init__(self, rep, dom, lev=None, ring=None):\n         else:\n             rep, lev = dmp_validate(rep)\n \n+        rep = dmp_strip(rep, lev)\n         self.rep = rep\n         self.lev = lev\n         self.dom = dom\ndiff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 3585e8f0bf..80676f0e6e 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -608,6 +608,7 @@ def set_ring(self, new_ring):\n             return new_ring.from_terms(terms)\n         else:\n             return new_ring.from_dict(self)\n+        self.strip_zero()\n \n     def as_expr(self, *symbols):\n         if symbols and len(symbols) != self.ring.ngens:\n"}
{"instance_id":"sympy__sympy-20438","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/sets/handlers/comparison.py b/sympy/sets/handlers/comparison.py\nindex 6f7a19fccf..899d799549 100644\n--- a/sympy/sets/handlers/comparison.py\n+++ b/sympy/sets/handlers/comparison.py\n@@ -48,6 +48,12 @@ def _eval_is_eq(lhs, rhs): # noqa: F811\n     eqs = (is_eq(x, y) for x, y in zip(lhs.sets, rhs.sets))\n     return tfn[fuzzy_and(map(fuzzy_bool, eqs))]\n \n+@dispatch(ProductSet, FiniteSet)\n+def _eval_is_eq(lhs, rhs):  # noqa: F811\n+    if lhs.is_finite:\n+        return fuzzy_and(rhs.contains(elem) for elem in lhs)\n+    else:\n+        return False\n \n @dispatch(Set, Basic) # type:ignore\n def _eval_is_eq(lhs, rhs): # noqa: F811\ndiff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py\nindex fdca06025a..b98bf8bb43 100644\n--- a/sympy/sets/handlers/issubset.py\n+++ b/sympy/sets/handlers/issubset.py\n@@ -1,7 +1,7 @@\n from sympy import S, Symbol\n from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or\n from sympy.core.relational import Eq\n-from sympy.sets.sets import FiniteSet, Interval, Set, Union\n+from sympy.sets.sets import FiniteSet, Interval, Set, Union, ProductSet\n from sympy.sets.fancysets import Complexes, Reals, Range, Rationals\n from sympy.multipledispatch import dispatch\n \ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 3c4aa86e36..d3e658b129 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -394,6 +394,7 @@ def is_subset(self, other):\n         # so that the intersect method uses is_subset for evaluation.\n         if self.intersect(other) == self:\n             return True\n+        return False\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n"}
{"instance_id":"sympy__sympy-20801","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..a2557d5251 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,10 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n"}
{"instance_id":"sympy__sympy-21596","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py\nindex c54dc8f72a..5c7353f779 100644\n--- a/sympy/sets/handlers/intersection.py\n+++ b/sympy/sets/handlers/intersection.py\n@@ -290,25 +290,13 @@ def intersection_sets(self, other): # noqa:F811\n         im = expand_complex(im)\n \n         re = re.subs(n_, n)\n-        im = im.subs(n_, n)\n-        ifree = im.free_symbols\n-        lam = Lambda(n, re)\n-        if im.is_zero:\n-            # allow re-evaluation\n-            # of self in this case to make\n-            # the result canonical\n-            pass\n-        elif im.is_zero is False:\n-            return S.EmptySet\n-        elif ifree != {n}:\n-            return None\n+        if im.is_zero == True:\n+            # The imaginary part is zero, proceed\n+            lam = Lambda(n, re)\n+            return imageset(lam, base_set)\n         else:\n-            # univarite imaginary part in same variable\n-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])\n-            if x and all(i == n for i in x):\n-                base_set -= FiniteSet(xis)\n-            else:\n-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)\n+            # The imaginary part is not zero or depends on n, return S.EmptySet\n+            return S.EmptySet\n         # exclude values that make denominators 0\n         for i in denoms(f):\n             if i.has(n):\n"}
{"instance_id":"sympy__sympy-21930","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/physics/quantum/commutator.py b/sympy/physics/quantum/commutator.py\nindex bdbcc4bb42..801e1697e4 100644\n--- a/sympy/physics/quantum/commutator.py\n+++ b/sympy/physics/quantum/commutator.py\n@@ -232,4 +232,4 @@ def _pretty(self, printer, *args):\n \n     def _latex(self, printer, *args):\n         return \"\\\\left[%s,%s\\\\right]\" % tuple([\n-            printer._print(arg, *args) for arg in self.args])\n+            printer.parenthesize_super(printer._print(arg, *args)) for arg in self.args])\ndiff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\nindex d19ee2fc63..2dc36fbf20 100644\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -478,7 +478,7 @@ def __repr__(self):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b^\\\\dagger_{%s}\" % self.state.name\n+        return \"{{{}}}\".format(\"b^\\\\dagger_{%s}\" % self.state.name)\n \n B = AnnihilateBoson\n Bd = CreateBoson\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 64d3207d09..955f09782e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -244,11 +244,12 @@ def parenthesize_super(self, s):\n         wrap in braces.\n         \"\"\"\n         if \"^\" in s:\n-            if self._settings['parenthesize_super']:\n+            if self._settings['parenthesize_super'] or r'\\dagger' in s:\n                 return self._add_parens(s)\n-            else:\n+            elif r'\\dagger' in s:\n                 return \"{{{}}}\".format(s)\n         return s\n+        return s\n \n     def doprint(self, expr):\n         tex = Printer.doprint(self, expr)\n"}
{"instance_id":"sympy__sympy-22080","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/numpy.py b/sympy/printing/numpy.py\nindex 7ab4730768..acdd031801 100644\n--- a/sympy/printing/numpy.py\n+++ b/sympy/printing/numpy.py\n@@ -217,8 +217,7 @@ def _print_im(self, expr):\n         return \"%s(%s)\" % (self._module_format(self._module + '.imag'), self._print(expr.args[0]))\n \n     def _print_Mod(self, expr):\n-        return \"%s(%s)\" % (self._module_format(self._module + '.mod'), ', '.join(\n-            map(lambda arg: self._print(arg), expr.args)))\n+        return '(%s %% %s)' % (self._print(expr.args[0]), self._print(expr.args[1]))\n \n     def _print_re(self, expr):\n         return \"%s(%s)\" % (self._module_format(self._module + '.real'), self._print(expr.args[0]))\ndiff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 0ed6ce2eb1..860725b8e0 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -814,14 +814,12 @@ def _lambdifygenerated(x):\n         else:\n             from sympy.printing.pycode import PythonCodePrinter as Printer # type: ignore\n         user_functions = {}\n-        for m in namespaces[::-1]:\n-            if isinstance(m, dict):\n-                for k in m:\n-                    user_functions[k] = k\n-        printer = Printer({'fully_qualified_modules': False, 'inline': True,\n-                           'allow_unknown_functions': True,\n-                           'user_functions': user_functions})\n-\n+        class CustomPythonPrinter(PythonCodePrinter):\n+            def _print_Mod(self, expr):\n+                return '(%s %% %s)' % (self._print(expr.args[0]), self._print(expr.args[1]))\n+        printer = CustomPythonPrinter({'fully_qualified_modules': False, 'inline': True,\n+                                       'allow_unknown_functions': True,\n+                                       'user_functions': user_functions})\n     if isinstance(args, set):\n         SymPyDeprecationWarning(\n                     feature=\"The list of arguments is a `set`. This leads to unpredictable results\",\n"}
{"instance_id":"sympy__sympy-22456","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex a02714b174..c92a441ba1 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -895,9 +895,25 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n     is_Atom = True\n \n+    def __new__(cls, *args, **kwargs):\n+        if len(args) == 1 and not kwargs:\n+            if isinstance(args[0], cls):\n+                return args[0]\n+            text = str(args[0])\n+        elif not args and 'text' in kwargs:\n+            text = str(kwargs.pop('text'))\n+        else:\n+            raise TypeError('String requires exactly one argument (text) either positional or as a keyword')\n+\n+        if kwargs:\n+            raise ValueError(\"Unknown keyword arguments: %s\" % ' '.join(kwargs))\n+\n+        obj = Token.__new__(cls, text)\n+        obj.text = text\n+        return obj\n+\n     @classmethod\n     def _construct_text(cls, text):\n         if not isinstance(text, str):\n"}
{"instance_id":"sympy__sympy-22914","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 3a72ab606c..b4364113c6 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -465,6 +465,12 @@ def _print_Symbol(self, expr):\n         else:\n             return name\n \n+    def _print_Min(self, expr):\n+        return \"min({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n+    def _print_Max(self, expr):\n+        return \"max({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n     _print_lowergamma = CodePrinter._print_not_supported\n     _print_uppergamma = CodePrinter._print_not_supported\n     _print_fresnelc = CodePrinter._print_not_supported\n"}
{"instance_id":"sympy__sympy-23413","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/polys/matrices/normalforms.py b/sympy/polys/matrices/normalforms.py\nindex 30f5534b08..3478eec71e 100644\n--- a/sympy/polys/matrices/normalforms.py\n+++ b/sympy/polys/matrices/normalforms.py\n@@ -235,11 +235,18 @@ def _hermite_normal_form(A):\n         # way to the left. In this case, we are still working on the same pivot\n         # col for the next row. Therefore:\n         if b == 0:\n-            k += 1\n-        # If the pivot entry is nonzero, then we want to reduce all entries to its\n-        # right in the sense of the division algorithm, i.e. make them all remainders\n-        # w.r.t. the pivot as divisor.\n+            if all(A[i][j] == 0 for j in range(k, n)):\n+                k += 1\n+            else:\n+                # If the pivot entry is zero but the row is not entirely zero, we should continue to the next iteration without incrementing k.\n+                pass\n         else:\n+            # If the pivot entry is nonzero, then we want to reduce all entries to its\n+            # right in the sense of the division algorithm, i.e. make them all remainders\n+            # w.r.t. the pivot as divisor.\n+            for j in range(k + 1, n):\n+                q = A[i][j] // b\n+                add_columns(A, j, k, 1, -q, 0, 1)\n             for j in range(k + 1, n):\n                 q = A[i][j] // b\n                 add_columns(A, j, k, 1, -q, 0, 1)\n"}
{"instance_id":"sympy__sympy-23534","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex f4a555c13f..8e7242761c 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -6,6 +6,7 @@\n from .containers import Tuple\n from .expr import Expr, AtomicExpr\n from .function import AppliedUndef, FunctionClass\n+from .function import Function\n from .kind import NumberKind, UndefinedKind\n from .logic import fuzzy_bool\n from .singleton import S\n@@ -790,8 +791,13 @@ def literal(s):\n \n         return tuple(result)\n     else:\n+        if cls == Function:\n+            # For Function class, flatten the structure while preserving function creation\n+            if isinstance(names, (tuple, list)):\n+                names = [n for item in names for n in (item if isinstance(item, (tuple, list)) else [item])]\n+        # Process each name\n         for name in names:\n-            result.append(symbols(name, **args))\n+            result.append(symbols(name, cls=cls, **args))\n \n         return type(names)(result)\n \n"}
{"instance_id":"sympy__sympy-23824","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex 23284e4a92..bf43facfb1 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -694,7 +694,7 @@ def kahane_simplify(expression):\n \n     # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n     # matrices in front of `expression`, so multiply by them:\n-    for i in range(0, first_dum_pos):\n+    for i in range(first_dum_pos - 1, -1, -1):\n         [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n \n     resulting_expr = S.Zero\n"}
{"instance_id":"sympy__sympy-23950","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex b2d4268d12..46d40d709b 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,8 @@ def binary_symbols(self):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n+        s = self.args[1]\n+        if isinstance(s, Set):\n+            return s\n         raise NotImplementedError()\n+\n"}
{"instance_id":"sympy__sympy-24443","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf32ba..dbf2977424 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -333,8 +333,8 @@ def _image(r):\n             # both indices\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if power < 0:\n+                    s = r[i]**-1\n                 else:\n                     s = r[i]\n                 if s in images:\n"}
{"instance_id":"sympy__sympy-24539","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 12bd2fc920..e92600caba 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -618,7 +618,7 @@ def set_ring(self, new_ring):\n     def as_expr(self, *symbols):\n         if symbols and len(symbols) != self.ring.ngens:\n             raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n-        else:\n+        if not symbols:\n             symbols = self.ring.symbols\n \n         return expr_from_dict(self.as_expr_dict(), *symbols)\n"}
{"instance_id":"sympy__sympy-24562","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 52f7ea45ad..e82bd40a77 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1608,10 +1608,14 @@ def __new__(cls, p, q=None, gcd=None):\n                     p = p.replace(' ', '')\n                     pq = p.rsplit('/', 1)\n                     if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp/fq\n+                        p_str, q_str = pq\n+                        try:\n+                            p = fractions.Fraction(p_str)\n+                            q = fractions.Fraction(q_str)\n+                        except ValueError:\n+                            pass  # error will raise below\n+                        else:\n+                            return Rational(p, q, 1)\n                     try:\n                         p = fractions.Fraction(p)\n                     except ValueError:\n@@ -1625,13 +1629,6 @@ def __new__(cls, p, q=None, gcd=None):\n             q = 1\n             gcd = 1\n \n-        if not isinstance(p, SYMPY_INTS):\n-            p = Rational(p)\n-            q *= p.q\n-            p = p.p\n-        else:\n-            p = int(p)\n-\n         if not isinstance(q, SYMPY_INTS):\n             q = Rational(q)\n             p *= q.q\n@@ -1639,6 +1636,12 @@ def __new__(cls, p, q=None, gcd=None):\n         else:\n             q = int(q)\n \n+        if not isinstance(p, SYMPY_INTS):\n+            p = Rational(p)\n+            q *= p.q\n+            p = p.p\n+        else:\n+            p = int(p)\n         # p and q are now ints\n         if q == 0:\n             if p == 0:\n"}
{"instance_id":"sympy__sympy-24661","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 52711d1324..8e39b00cdf 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1185,6 +1185,26 @@ def visit_BinOp(self, node):\n \n             return new_node\n         return node\n+    def visit_Compare(self, node):\n+        if len(node.ops) == 1:\n+            op = node.ops[0]\n+            if isinstance(op, (ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.Eq, ast.NotEq)):\n+                sympy_class = {\n+                    ast.Lt: 'Lt',\n+                    ast.LtE: 'Le',\n+                    ast.Gt: 'Gt',\n+                    ast.GtE: 'Ge',\n+                    ast.Eq: 'Eq',\n+                    ast.NotEq: 'Ne'\n+                }[type(op)]\n+                left = self.visit(node.left)\n+                right = self.visit(node.comparators[0])\n+                return ast.Call(\n+                    func=ast.Name(id=sympy_class, ctx=ast.Load()),\n+                    args=[left, right],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))]\n+                )\n+        return node\n \n     def visit_Call(self, node):\n         new_node = self.generic_visit(node)\n"}
{"instance_id":"sympy__sympy-20916","model_name_or_path":"20241209_babelcloud_gru","model_patch":"diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex d41513e564..916ba37e64 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -77,8 +77,16 @@ def _print_atan2(self, e):\n         return pform\n \n     def _print_Symbol(self, e, bold_name=False):\n-        symb = pretty_symbol(e.name, bold_name)\n-        return prettyForm(symb)\n+        name = e.name\n+        if '_' in name:\n+            base_name, subscript = name.split('_', 1)\n+            symb = pretty_symbol(base_name, bold_name)\n+            sub_pform = self._print(subscript)\n+            symb = prettyForm(*symb.__pow__(sub_pform))\n+        else:\n+            symb = pretty_symbol(name, bold_name)\n+            symb = prettyForm(symb)\n+        return symb\n     _print_RandomSymbol = _print_Symbol\n     def _print_MatrixSymbol(self, e):\n         return self._print_Symbol(e, self._settings['mat_symbol_style'] == \"bold\")\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 6ec482e6c7..712ceac7a7 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -753,8 +753,12 @@ def _xab_tostr(xab):\n         return 'Sum(%s, %s)' % (self._print(expr.function), L)\n \n     def _print_Symbol(self, expr):\n-        return expr.name\n-    _print_MatrixSymbol = _print_Symbol\n+        name = expr.name\n+        if '_' in name:\n+            base_name, subscript = name.split('_', 1)\n+            return '%s_%s' % (base_name, subscript)\n+        else:\n+            return name\n     _print_RandomSymbol = _print_Symbol\n \n     def _print_Identity(self, expr):\n"}