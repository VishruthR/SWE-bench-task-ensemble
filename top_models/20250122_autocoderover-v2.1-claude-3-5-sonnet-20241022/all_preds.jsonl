{"instance_id":"astropy__astropy-12907","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..45bea36085 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \n"}
{"instance_id":"astropy__astropy-13033","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..16dc7e88f2 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -75,10 +75,11 @@ class BaseTimeSeries(QTable):\n                                  .format(self.__class__.__name__, required_columns[0], plural))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n-\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                raise ValueError(\"{} object is invalid - missing required column{}: {}\"\n+                                 .format(self.__class__.__name__, \n+                                       's' if len(missing_columns) > 1 else '',\n+                                       ', '.join(missing_columns)))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n"}
{"instance_id":"astropy__astropy-13236","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe2127a3..d2daa4f444 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1239,12 +1239,10 @@ class Table:\n                                 f'{fully_qualified_name} '\n                                 'did not return a valid mixin column')\n \n-        # Structured ndarray gets viewed as a mixin unless already a valid\n-        # mixin class\n+        # Convert structured ndarray to Column\n         if (not isinstance(data, Column) and not data_is_mixin\n                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n-            data = data.view(NdarrayMixin)\n-            data_is_mixin = True\n+            data = Column(data)\n \n         # Get the final column name using precedence.  Some objects may not\n         # have an info attribute. Also avoid creating info as a side effect.\n"}
{"instance_id":"astropy__astropy-13398","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py b/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\nindex a15248c38d..f954cb5a4d 100644\n--- a/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\n+++ b/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py\n@@ -17,7 +17,9 @@ from .gcrs import GCRS, PrecessedGeocentric\n from .cirs import CIRS\n from .itrs import ITRS\n from .equatorial import TEME, TETE\n-from .utils import get_polar_motion, get_jd12, EARTH_CENTER\n+from .altaz import AltAz\n+from .hadec import HADec\n+from .utils import get_polar_motion, get_jd12, EARTH_CENTER, PIOVER2\n \n # # first define helper functions\n \n@@ -261,6 +263,48 @@ def teme_to_itrs(teme_coo, itrs_frame):\n     return itrs.transform_to(itrs_frame)\n \n \n+def itrs_to_observed_mat(observed_frame):\n+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n+    elong = lon.to_value(u.radian)\n+\n+    if isinstance(observed_frame, AltAz):\n+        # form ITRS to AltAz matrix\n+        elat = lat.to_value(u.radian)\n+        # AltAz frame is left handed\n+        minus_x = np.eye(3)\n+        minus_x[0][0] = -1.0\n+        mat = (minus_x\n+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)\n+               @ rotation_matrix(elong, 'z', unit=u.radian))\n+    else:\n+        # form ITRS to HADec matrix\n+        # HADec frame is left handed\n+        minus_y = np.eye(3)\n+        minus_y[1][1] = -1.0\n+        mat = (minus_y\n+               @ rotation_matrix(elong, 'z', unit=u.radian))\n+    return mat\n+\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)\n+def itrs_to_observed(itrs_coo, observed_frame):\n+    # Treat ITRS coordinates as time invariant\n+    # form the Topocentric ITRS position\n+    topocentric_itrs_repr = (itrs_coo.cartesian\n+                            - observed_frame.location.get_itrs().cartesian)\n+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))\n+    return observed_frame.realize_frame(rep)\n+\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)\n+def observed_to_itrs(observed_coo, itrs_frame):\n+    # form the Topocentric ITRS position\n+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(\n+                            itrs_to_observed_mat(observed_coo)))\n+    # form the Geocentric ITRS position\n+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian\n+    return itrs_frame.realize_frame(rep)\n+\n @frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, TEME)\n def itrs_to_teme(itrs_coo, teme_frame):\n     # transform the ITRS coordinate to the target obstime\n"}
{"instance_id":"astropy__astropy-13453","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf229cc..17e4661878 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -437,7 +437,14 @@ class HTML(core.BaseReader):\n                                     new_cols.append(new_col)\n                             else:\n \n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                if col.info.name in self.formats:\n+                                    # Apply custom format if specified\n+                                    format_func = self.formats[col.info.name]\n+                                    col_iter_str_vals = self.fill_values(col, \n+                                        (format_func(x) for x in col))\n+                                else:\n+                                    # Use default formatting\n+                                    col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n                                 col_str_iters.append(col_iter_str_vals)\n \n                                 new_cols_escaped.append(col_escaped)\n"}
{"instance_id":"astropy__astropy-13579","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\nindex d7605b078c..1e5794c2b3 100644\n--- a/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n+++ b/astropy/wcs/wcsapi/wrappers/sliced_wcs.py\n@@ -246,13 +246,18 @@ class SlicedLowLevelWCS(BaseWCSWrapper):\n         world_arrays = tuple(map(np.asanyarray, world_arrays))\n         world_arrays_new = []\n         iworld_curr = -1\n+        \n+        # Get the reference values from the slices\n+        ref_values = self._pixel_to_world_values_all(*[0]*len(self._pixel_keep))\n+        \n         for iworld in range(self._wcs.world_n_dim):\n             if iworld in self._world_keep:\n                 iworld_curr += 1\n                 world_arrays_new.append(world_arrays[iworld_curr])\n             else:\n-                world_arrays_new.append(1.)\n-\n+                # Use the reference value from the slice instead of 1.0\n+                world_arrays_new.append(ref_values[iworld])\n+        \n         world_arrays_new = np.broadcast_arrays(*world_arrays_new)\n         pixel_arrays = list(self._wcs.world_to_pixel_values(*world_arrays_new))\n \n"}
{"instance_id":"astropy__astropy-13977","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex b98abfafb0..08a9031e6d 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -665,9 +665,12 @@ class Quantity(np.ndarray):\n \n         # Same for inputs, but here also convert if necessary.\n         arrays = []\n-        for input_, converter in zip(inputs, converters):\n-            input_ = getattr(input_, \"value\", input_)\n-            arrays.append(converter(input_) if converter else input_)\n+        try:\n+            for input_, converter in zip(inputs, converters):\n+                input_ = getattr(input_, \"value\", input_)\n+                arrays.append(converter(input_) if converter else input_)\n+        except ValueError:\n+            return NotImplemented\n \n         # Call our superclass's __array_ufunc__\n         result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"}
{"instance_id":"astropy__astropy-14096","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex ab475f7d0d..bc80a48455 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,13 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # Check if this is a property access first\n+        if attr in type(self).__dict__:\n+            prop = type(self).__dict__[attr]\n+            if isinstance(prop, property):\n+                # Let any AttributeError from property access propagate\n+                return prop.__get__(self, type(self))\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n"}
{"instance_id":"astropy__astropy-14182","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..78e42b7d63 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,8 +57,8 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n"}
{"instance_id":"astropy__astropy-14309","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 4b6150f4ac..1f51fe4835 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -69,7 +69,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n             (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n         ):\n             return True\n-    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n+    return len(args) > 0 and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n \n \n def _decode_mixins(tbl):\n"}
{"instance_id":"astropy__astropy-14365","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..f51fd4f925 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    _command_re = r\"(?i:READ)\\s+(?i:[TS]ERR)(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n"}
{"instance_id":"astropy__astropy-14369","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..b5e5a683e0 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -187,7 +187,26 @@ class CDS(Base):\n             if len(p) == 3:\n                 p[0] = p[2] ** -1\n             else:\n-                p[0] = p[1] / p[3]\n+                # For CDS format, collect all denominator units and maintain their order\n+                if hasattr(p[3], '_bases'):\n+                    # If we have multiple units in denominator, group them\n+                    denom_units = []\n+                    if len(p[3]._bases) > 0:\n+                        for base, power in zip(p[3]._bases, p[3]._powers):\n+                            if power < 0:\n+                                denom_units.append(base ** abs(power))\n+                            else:\n+                                denom_units.append(base ** power)\n+                    if denom_units:\n+                        # Create a product of denominator units in original order\n+                        denominator = denom_units[0]\n+                        for unit in denom_units[1:]:\n+                            denominator = denominator * unit\n+                        p[0] = p[1] / denominator\n+                    else:\n+                        p[0] = p[1] / p[3]\n+                else:\n+                    p[0] = p[1] / p[3]\n \n         def p_unit_expression(p):\n             \"\"\"\n"}
{"instance_id":"astropy__astropy-14508","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..aa019b5e38 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,20 +1299,23 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n-    if \".\" not in value_str and \"E\" not in value_str:\n-        value_str += \".0\"\n-    elif \"E\" in value_str:\n-        # On some Windows builds of Python (and possibly other platforms?) the\n-        # exponent is zero-padded out to, it seems, three digits.  Normalize\n-        # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"E\")\n-        if exponent[0] in (\"+\", \"-\"):\n-            sign = exponent[0]\n-            exponent = exponent[1:]\n-        else:\n-            sign = \"\"\n-        value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+    value_str = str(value)\n+    # If str() doesn't include decimal point or has an exponent, use explicit formatting\n+    if \".\" not in value_str or \"E\" in value_str or \"e\" in value_str:\n+        value_str = f\"{value:.16G}\"\n+        if \".\" not in value_str and \"E\" not in value_str:\n+            value_str += \".0\"\n+        elif \"E\" in value_str:\n+            # On some Windows builds of Python (and possibly other platforms?) the\n+            # exponent is zero-padded out to, it seems, three digits.  Normalize\n+            # the format to pad only to two digits.\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n \n     # Limit the value string to at most 20 characters.\n     str_len = len(value_str)\n"}
{"instance_id":"astropy__astropy-14539","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 100cdf1b8c..99dcc8ede0 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1445,20 +1445,22 @@ class TableDataDiff(_BaseDiff):\n             arra = self.a[col.name]\n             arrb = self.b[col.name]\n \n-            if np.issubdtype(arra.dtype, np.floating) and np.issubdtype(\n-                arrb.dtype, np.floating\n-            ):\n-                diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n-            elif \"P\" in col.format:\n+            if isinstance(arra[0], np.ndarray) or isinstance(arrb[0], np.ndarray):\n+                # Handle VLA columns\n                 diffs = (\n                     [\n                         idx\n                         for idx in range(len(arra))\n-                        if not np.allclose(\n-                            arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol\n-                        )\n+                        if not np.array_equal(arra[idx], arrb[idx])\n+                        if not (np.issubdtype(arra[idx].dtype, np.floating) and\n+                               np.issubdtype(arrb[idx].dtype, np.floating) and\n+                               np.allclose(arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol))\n                     ],\n                 )\n+            elif np.issubdtype(arra.dtype, np.floating) and np.issubdtype(\n+                arrb.dtype, np.floating\n+            ):\n+                diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n             else:\n                 diffs = np.where(arra != arrb)\n \n"}
{"instance_id":"astropy__astropy-14598","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 1b3285ddce..29fe5dbf63 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -768,7 +768,7 @@ class Card(_Verify):\n         if m.group(\"bool\") is not None:\n             value = m.group(\"bool\") == \"T\"\n         elif m.group(\"strg\") is not None:\n-            value = re.sub(\"''\", \"'\", m.group(\"strg\"))\n+            value = m.group(\"strg\")\n         elif m.group(\"numr\") is not None:\n             #  Check for numbers with leading 0s.\n             numr = self._number_NFSC_RE.match(m.group(\"numr\"))\n"}
{"instance_id":"astropy__astropy-14995","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..4c01b20564 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -512,18 +512,19 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n+        # If neither has a mask or handle_mask is None, return None\n         if (\n             self.mask is None and operand is not None and operand.mask is None\n         ) or handle_mask is None:\n             return None\n+        # If only one operand has a mask, return a copy of that mask\n+        # regardless of whether handle_mask is a callable\n         elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n-        elif operand is None:\n+        elif operand is None or operand.mask is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n+            # Only call handle_mask when both operands have masks\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n"}
{"instance_id":"astropy__astropy-7166","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..cceaeb957f 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,7 +528,7 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n+            if ((inspect.isfunction(val) or isinstance(val, property)) and\n                 is_public_member(key) and\n                 val.__doc__ is None):\n                 for base in cls.__mro__[1:]:\n"}
{"instance_id":"astropy__astropy-7336","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py\nindex 8bece5a850..78112064fe 100644\n--- a/astropy/units/decorators.py\n+++ b/astropy/units/decorators.py\n@@ -221,6 +221,9 @@ class QuantityInput:\n             with add_enabled_equivalencies(self.equivalencies):\n                 return_ = wrapped_function(*func_args, **func_kwargs)\n             if wrapped_signature.return_annotation is not inspect.Signature.empty:\n+                # Special case for None return type (e.g., constructors)\n+                if return_ is None and wrapped_signature.return_annotation is None:\n+                    return None\n                 return return_.to(wrapped_signature.return_annotation)\n             else:\n                 return return_\n"}
{"instance_id":"astropy__astropy-7606","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex e9bd986d33..fa68e84c5b 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1710,8 +1710,13 @@ class UnrecognizedUnit(IrreducibleUnit):\n         _unrecognized_operator\n \n     def __eq__(self, other):\n-        other = Unit(other, parse_strict='silent')\n-        return isinstance(other, UnrecognizedUnit) and self.name == other.name\n+        if other is None:\n+            return False\n+        try:\n+            other = Unit(other, parse_strict='silent')\n+            return isinstance(other, UnrecognizedUnit) and self.name == other.name\n+        except (ValueError, UnitsError, TypeError):\n+            return False\n \n     def __ne__(self, other):\n         return not (self == other)\n"}
{"instance_id":"astropy__astropy-7671","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex 3e784f9fc3..ac8ab04655 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -121,6 +121,10 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n     >>> minversion(astropy, '0.4.4')\n     True\n     \"\"\"\n+    try:\n+        from pkg_resources import parse_version as Version\n+    except ImportError:\n+        from distutils.version import LooseVersion as Version\n     if isinstance(module, types.ModuleType):\n         module_name = module.__name__\n     elif isinstance(module, str):\n@@ -140,9 +144,9 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n         have_version = resolve_name(module.__name__, version_path)\n \n     if inclusive:\n-        return LooseVersion(have_version) >= LooseVersion(version)\n+        return Version(have_version) >= Version(version)\n     else:\n-        return LooseVersion(have_version) > LooseVersion(version)\n+        return Version(have_version) > Version(version)\n \n \n def find_current_module(depth=1, finddiff=False):\n"}
{"instance_id":"astropy__astropy-8707","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d738..0cdb890730 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -547,12 +547,14 @@ class Card(_Verify):\n     @classmethod\n     def fromstring(cls, image):\n         \"\"\"\n-        Construct a `Card` object from a (raw) string. It will pad the string\n+        Construct a `Card` object from a (raw) string or bytes. It will pad the string\n         if it is not the length of a card image (80 columns).  If the card\n         image is longer than 80 columns, assume it contains ``CONTINUE``\n         card(s).\n         \"\"\"\n \n+        if isinstance(image, bytes):\n+            image = image.decode('ascii')\n         card = cls()\n         card._image = _pad(image)\n         card._verified = False\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex ad07e6d52d..51787bf6be 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -329,13 +329,13 @@ class Header:\n     @classmethod\n     def fromstring(cls, data, sep=''):\n         \"\"\"\n-        Creates an HDU header from a byte string containing the entire header\n+        Creates an HDU header from a string or bytes containing the entire header\n         data.\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -347,6 +347,8 @@ class Header:\n         header\n             A new `Header` instance.\n         \"\"\"\n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n \n         cards = []\n \n"}
{"instance_id":"astropy__astropy-8872","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex ded609cbe9..9a116c4569 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -296,12 +296,11 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n                 if not copy:\n                     return value\n \n-                if not (np.can_cast(np.float32, value.dtype) or\n-                        value.dtype.fields):\n+                if not (value.dtype.kind == 'f' or value.dtype.fields):\n                     dtype = float\n-\n-            return np.array(value, dtype=dtype, copy=copy, order=order,\n-                            subok=True, ndmin=ndmin)\n+    \n+                return np.array(value, dtype=dtype, copy=copy, order=order,\n+                                subok=True, ndmin=ndmin)\n \n         # Maybe str, or list/tuple of Quantity? If so, this may set value_unit.\n         # To ensure array remains fast, we short-circuit it.\n@@ -377,7 +376,7 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n                             \"Numpy numeric type.\")\n \n         # by default, cast any integer, boolean, etc., to float\n-        if dtype is None and (not (np.can_cast(np.float32, value.dtype)\n+        if dtype is None and (not (value.dtype.kind == 'f'\n                                    or value.dtype.fields)\n                               or value.dtype.kind == 'O'):\n             value = value.astype(float)\n"}
{"instance_id":"django__django-10554","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a791908caf..7d95c19a4c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -427,9 +427,15 @@ class SQLCompiler:\n                 # the query on all combined queries, if not already set.\n                 if not compiler.query.values_select and self.query.values_select:\n                     compiler.query = compiler.query.clone()\n+                    # Include ordering columns in values select\n+                    order_by_cols = {col.target.column for col in compiler.get_order_by()}\n+                    values_select = list(self.query.values_select)\n+                    for col in order_by_cols:\n+                        if col not in values_select:\n+                            values_select.append(col)\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n-                        *self.query.values_select,\n+                        *values_select,\n                         *self.query.annotation_select,\n                     ))\n                 part_sql, part_args = compiler.as_sql()\n"}
{"instance_id":"django__django-10880","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex ac0b62d0bf..ea88c54b0d 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -68,7 +68,7 @@ class Aggregate(Func):\n         return []\n \n     def as_sql(self, compiler, connection, **extra_context):\n-        extra_context['distinct'] = 'DISTINCT' if self.distinct else ''\n+        extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''\n         if self.filter:\n             if connection.features.supports_aggregate_filter_clause:\n                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)\n"}
{"instance_id":"django__django-10914","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n"}
{"instance_id":"django__django-10973","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7fca6eff30..e7a59f3308 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -34,38 +34,17 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n-        temp_pgpass = None\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n-            if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            env = os.environ.copy()\n+            if passwd:\n+                env['PGPASSWORD'] = passwd\n+            subprocess.run(args, env=env, check=True)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n"}
{"instance_id":"django__django-10999","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\nindex 8d08b7d1d3..a037758784 100644\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -29,7 +29,7 @@ datetime_re = re.compile(\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n+    r'((?:(?P<hours>-?\\d+):)(?=-?\\d+:-?\\d+))?'\n     r'(?:(?P<minutes>-?\\d+):)?'\n     r'(?P<seconds>-?\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n"}
{"instance_id":"django__django-11066","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/contenttypes/management/__init__.py b/django/contrib/contenttypes/management/__init__.py\nindex 2b5f688136..563cba2fdf 100644\n--- a/django/contrib/contenttypes/management/__init__.py\n+++ b/django/contrib/contenttypes/management/__init__.py\n@@ -24,7 +24,7 @@ class RenameContentType(migrations.RunPython):\n             content_type.model = new_model\n             try:\n                 with transaction.atomic(using=db):\n-                    content_type.save(update_fields={'model'})\n+                    content_type.save(using=db, update_fields={'model'})\n             except IntegrityError:\n                 # Gracefully fallback if a stale content type causes a\n                 # conflict as remove_stale_contenttypes will take care of\n"}
{"instance_id":"django__django-11087","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 3a462f1c4c..f42a8d5cf9 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -231,10 +231,15 @@ class Collector:\n     def related_objects(self, related, objs):\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n+        Only fetches fields required for deletion (primary key and foreign keys).\n         \"\"\"\n+        # Get required fields for deletion\n+        model = related.related_model\n+        required_fields = [f.name for f in model._meta.fields \n+                         if f.primary_key or (f.is_relation and f.many_to_one)]\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only(*required_fields)\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n"}
{"instance_id":"django__django-11095","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f9a0..bfcfa26ee9 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -580,9 +580,18 @@ class ModelAdmin(BaseModelAdmin):\n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook for specifying inline classes that are used in the admin.\n+        Return a list of inline classes.\n+        \n+        By default returns self.inlines.\n+        \"\"\"\n+        return self.inlines\n+\n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n"}
{"instance_id":"django__django-11099","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n"}
{"instance_id":"django__django-11119","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/template/engine.py b/django/template/engine.py\nindex dfaa67ba12..ff9ce58d59 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -160,7 +160,7 @@ class Engine:\n         if isinstance(context, Context):\n             return t.render(context)\n         else:\n-            return t.render(Context(context))\n+            return t.render(Context(context, autoescape=self.autoescape))\n \n     def select_template(self, template_name_list):\n         \"\"\"\n"}
{"instance_id":"django__django-11133","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..a83a906d5b 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -229,6 +229,8 @@ class HttpResponseBase:\n         # Handle string types -- we can't rely on force_bytes here because:\n         # - Python attempts str conversion first\n         # - when self._charset != 'utf-8' it re-encodes the content\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         if isinstance(value, bytes):\n             return bytes(value)\n         if isinstance(value, str):\n"}
{"instance_id":"django__django-11138","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..d3a8286409 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -70,7 +70,9 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            source_tz = self.connection.settings_dict.get('TIME_ZONE', 'UTC')\n+            if source_tz != tzname:\n+                field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, source_tz, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n"}
{"instance_id":"django__django-11141","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 8c308621d2..d075fcc5df 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -84,11 +84,6 @@ class MigrationLoader:\n                     continue\n                 raise\n             else:\n-                # Empty directories are namespaces.\n-                # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n-                    self.unmigrated_apps.add(app_config.label)\n-                    continue\n                 # Module is not a package (e.g. migrations.py).\n                 if not hasattr(module, '__path__'):\n                     self.unmigrated_apps.add(app_config.label)\n"}
{"instance_id":"django__django-11149","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b..1440e6a4cd 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2047,6 +2047,7 @@ class InlineModelAdmin(BaseModelAdmin):\n         base_model_form = defaults['form']\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n+        view_only = request and self.has_view_permission(request, obj) and not can_change\n \n         class DeleteProtectedModelForm(base_model_form):\n \n@@ -2089,7 +2090,7 @@ class InlineModelAdmin(BaseModelAdmin):\n \n             def has_changed(self):\n                 # Protect against unauthorized edits.\n-                if not can_change and not self.instance._state.adding:\n+                if view_only or (not can_change and not self.instance._state.adding):\n                     return False\n                 if not can_add and self.instance._state.adding:\n                     return False\n"}
{"instance_id":"django__django-11163","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex d157c291ef..5edbbd376f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\n"}
{"instance_id":"django__django-11179","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..3a462f1c4c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n"}
{"instance_id":"django__django-11206","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435..efeed3c6c9 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -27,10 +27,15 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     # sign\n     sign = ''\n     if isinstance(number, Decimal):\n+        _, digits, exponent = number.as_tuple()\n+        if decimal_pos is not None:\n+            # If decimal positions are specified and number is smaller than smallest representable value,\n+            # return zero with requested decimal places\n+            if number and abs(number) < Decimal('0.1') ** decimal_pos:\n+                return '0' + decimal_sep + '0' * decimal_pos\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n         # scientific notation to avoid high memory usage in {:f}'.format().\n-        _, digits, exponent = number.as_tuple()\n-        if abs(exponent) + len(digits) > 200:\n+        elif abs(exponent) + len(digits) > 200:\n             number = '{:e}'.format(number)\n             coefficient, exponent = number.split('e')\n             # Format the coefficient.\n@@ -39,8 +44,7 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n                 thousand_sep, force_grouping, use_l10n,\n             )\n             return '{}e{}'.format(coefficient, exponent)\n-        else:\n-            str_number = '{:f}'.format(number)\n+        str_number = '{:f}'.format(number)\n     else:\n         str_number = str(number)\n     if str_number[0] == '-':\n"}
{"instance_id":"django__django-11211","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb48c..c17a5fb179 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -202,12 +202,12 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n+                return (str(getattr(obj, self.fk_field)),\n                         model)\n \n         return (\n             ret_val,\n-            lambda obj: (obj.pk, obj.__class__),\n+            lambda obj: (str(obj.pk), obj.__class__),\n             gfk_key,\n             True,\n             self.name,\n"}
{"instance_id":"django__django-11239","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex cf4df76882..e7fc9901ee 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -24,6 +24,19 @@ class DatabaseClient(BaseDatabaseClient):\n             args += ['-h', host]\n         if port:\n             args += ['-p', str(port)]\n+\n+        # Add SSL options if present\n+        options = conn_params.get('options', {})\n+        ssl_args = [\n+            ('sslmode', '--sslmode'),\n+            ('sslcert', '--sslcert'),\n+            ('sslkey', '--sslkey'),\n+            ('sslrootcert', '--sslrootcert'),\n+        ]\n+        for opt_name, arg_name in ssl_args:\n+            if opt_name in options:\n+                args += [f'{arg_name}={options[opt_name]}']\n+\n         args += [dbname]\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\n"}
{"instance_id":"django__django-11265","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d69c24419b..4a0715d2da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1666,6 +1666,12 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n+        # Copy filtered relations and their annotations for proper exclude handling\n+        query._filtered_relations = self._filtered_relations.copy()\n+        query.annotations = self.annotations.copy()\n+        # Add any annotation select masks\n+        if self.annotation_select_mask is not None:\n+            query.annotation_select_mask = self.annotation_select_mask.copy()\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n"}
{"instance_id":"django__django-11276","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/html.py b/django/utils/html.py\nindex 9c519978f5..a2bb6d28ac 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -42,8 +42,12 @@ def escape(text):\n     Always escape input, even if it's already escaped and marked as such.\n     This may result in double-escaping. If this is a concern, use\n     conditional_escape() instead.\n+\n+    Note: This implementation uses Python's html.escape(), which encodes single quotes\n+    as &#x27; rather than &#39;. These values are functionally equivalent in HTML.\n     \"\"\"\n-    return mark_safe(str(text).translate(_html_escapes))\n+    from html import escape as html_escape\n+    return mark_safe(html_escape(str(text)))\n \n \n _js_escapes = {\n"}
{"instance_id":"django__django-11292","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 0c3a981290..118dc38a5c 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -286,6 +286,10 @@ class BaseCommand:\n             '--force-color', action='store_true',\n             help='Force colorization of the command output.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         self.add_arguments(parser)\n         return parser\n \n"}
{"instance_id":"django__django-11299","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b99f03cd88..649aa0fd5f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1338,7 +1338,8 @@ class Query(BaseExpression):\n             if isinstance(child, Node):\n                 child_clause, needed_inner = self._add_q(\n                     child, used_aliases, branch_negated,\n-                    current_negated, allow_joins, split_subq)\n+                    current_negated, allow_joins, split_subq,\n+                    simple_col=simple_col)\n                 joinpromoter.add_votes(needed_inner)\n             else:\n                 child_clause, needed_inner = self.build_filter(\n"}
{"instance_id":"django__django-11333","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 247e3680c0..7d62286618 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -65,8 +65,8 @@ class ResolverMatch:\n \n @functools.lru_cache(maxsize=None)\n def get_resolver(urlconf=None):\n-    if urlconf is None:\n-        urlconf = settings.ROOT_URLCONF\n+    # Resolve None to ROOT_URLCONF before cache lookup to ensure single instance\n+    urlconf = settings.ROOT_URLCONF if urlconf is None else urlconf\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n \n"}
{"instance_id":"django__django-11400","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..9a23ef59ae 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -198,6 +198,8 @@ class RelatedFieldListFilter(FieldListFilter):\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        if not ordering and field.remote_field.model._meta.ordering:\n+            ordering = field.remote_field.model._meta.ordering\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +421,10 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        ordering = ()\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        if not ordering and field.remote_field.model._meta.ordering:\n+            ordering = field.remote_field.model._meta.ordering\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n"}
{"instance_id":"django__django-11433","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..a09c936d48 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -46,11 +46,8 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         if exclude and f.name in exclude:\n             continue\n-        # Leave defaults for fields that aren't in POST data, except for\n-        # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n-            continue\n+        # We want to allow cleaned_data to override defaults, so we don't skip\n+        # fields just because they have defaults and weren't in POST data\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n         if isinstance(f, models.FileField):\n"}
{"instance_id":"django__django-11451","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722757..1c1cec8b33 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):\n     def authenticate(self, request, username=None, password=None, **kwargs):\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n+        if username is None or password is None:\n+            return None\n         try:\n             user = UserModel._default_manager.get_by_natural_key(username)\n         except UserModel.DoesNotExist:\n"}
{"instance_id":"django__django-11477","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/urls/base.py b/django/urls/base.py\nindex 0e1c3d909c..d1598cd6e1 100644\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -172,7 +172,8 @@ def translate_url(url, lang_code):\n         to_be_reversed = \"%s:%s\" % (match.namespace, match.url_name) if match.namespace else match.url_name\n         with override(lang_code):\n             try:\n-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)\n+                kwargs = {k: v for k, v in match.kwargs.items() if v is not None}\n+                url = reverse(to_be_reversed, args=match.args, kwargs=kwargs)\n             except NoReverseMatch:\n                 pass\n             else:\n"}
{"instance_id":"django__django-11490","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..9b7d0f8527 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -424,8 +424,8 @@ class SQLCompiler:\n             try:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n-                # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+                # the query on all combined queries.\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\n"}
{"instance_id":"django__django-11532","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex d18dfe4667..2ca1c6784c 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -12,9 +12,15 @@ class CachedDnsName:\n         return self.get_fqdn()\n \n     def get_fqdn(self):\n-        if not hasattr(self, '_fqdn'):\n-            self._fqdn = socket.getfqdn()\n-        return self._fqdn\n+            if not hasattr(self, '_fqdn'):\n+                fqdn = socket.getfqdn()\n+                try:\n+                    # Convert to IDNA if the hostname contains non-ASCII characters\n+                    self._fqdn = fqdn.encode('idna').decode('ascii')\n+                except UnicodeError:\n+                    # If encoding fails or hostname is already ASCII, use as-is\n+                    self._fqdn = fqdn\n+            return self._fqdn\n \n \n DNS_NAME = CachedDnsName()\n"}
{"instance_id":"django__django-11551","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex f82c20c2f1..9fd77b5d41 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n-        elif hasattr(obj.model, item):\n+        else:\n             try:\n                 field = obj.model._meta.get_field(item)\n             except FieldDoesNotExist:\n-                return []\n-            else:\n-                if isinstance(field, models.ManyToManyField):\n+                try:\n+                    field = getattr(obj.model, item)\n+                except AttributeError:\n                     return [\n                         checks.Error(\n-                            \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                            \"The value of '%s' refers to '%s', which is not a callable, \"\n+                            \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n+                                label, item, obj.__class__.__name__,\n+                                obj.model._meta.app_label, obj.model._meta.object_name,\n+                            ),\n                             obj=obj.__class__,\n-                            id='admin.E109',\n+                            id='admin.E108',\n                         )\n                     ]\n-                return []\n-        else:\n-            return [\n-                checks.Error(\n-                    \"The value of '%s' refers to '%s', which is not a callable, \"\n-                    \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n-                        label, item, obj.__class__.__name__,\n-                        obj.model._meta.app_label, obj.model._meta.object_name,\n-                    ),\n-                    obj=obj.__class__,\n-                    id='admin.E108',\n-                )\n-            ]\n+            if isinstance(field, models.ManyToManyField):\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                        obj=obj.__class__,\n+                        id='admin.E109',\n+                    )\n+                ]\n+            return []\n \n     def _check_list_display_links(self, obj):\n         \"\"\" Check that list_display_links is a unique subset of list_display.\n"}
{"instance_id":"django__django-11555","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e15e64cde4..8f5931c13c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2217,8 +2217,15 @@ def get_order_dir(field, default='ASC'):\n     The 'default' param is used to indicate which way no prefix (or a '+'\n     prefix) should sort. The '-' prefix always sorts the opposite way.\n     \"\"\"\n+    from django.db.models.expressions import OrderBy, F\n+\n+    if isinstance(field, OrderBy):\n+        return field.expression, 'DESC' if field.descending else 'ASC'\n+    if isinstance(field, F):\n+        return field, default\n+    \n     dirn = ORDER_DIR[default]\n-    if field[0] == '-':\n+    if isinstance(field, str) and field and field[0] == '-':\n         return field[1:], dirn[1]\n     return field, dirn[0]\n \n"}
{"instance_id":"django__django-11603","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex da4ff928aa..8b10829eb8 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -99,6 +99,7 @@ class Aggregate(Func):\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -142,6 +143,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):\n class Sum(FixDurationInputMixin, Aggregate):\n     function = 'SUM'\n     name = 'Sum'\n+    allow_distinct = True\n \n \n class Variance(NumericOutputFieldMixin, Aggregate):\n"}
{"instance_id":"django__django-11728","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..54af28102d 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -166,11 +166,13 @@ def replace_named_groups(pattern):\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n         unmatched_open_brackets, prev_char = 1, None\n+        found_end = False\n         for idx, val in enumerate(pattern[end:]):\n             # If brackets are balanced, the end of the string for the current\n             # named capture group pattern has been reached.\n             if unmatched_open_brackets == 0:\n                 group_pattern_and_name.append((pattern[start:end + idx], group_name))\n+                found_end = True\n                 break\n \n             # Check for unescaped `(` and `)`. They mark the start and end of a\n@@ -180,6 +182,10 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        \n+        # Handle case where we reach end of string\n+        if not found_end:\n+            group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n"}
{"instance_id":"django__django-11734","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 2b59dd301a..be893107e5 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -567,7 +567,11 @@ class OuterRef(F):\n                            summarize=False, for_save=False, simple_col=False):\n         if isinstance(self.name, self.__class__):\n             return self.name\n-        return ResolvedOuterRef(self.name)\n+        resolved = ResolvedOuterRef(self.name)\n+        # Preserve outer reference context for negative lookups\n+        if query and getattr(query, 'negated', False):\n+            resolved._outer_query = query\n+        return resolved\n \n \n class Func(SQLiteNumericMixin, Expression):\n"}
{"instance_id":"django__django-11740","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 0dc1c77c53..ce4fbb984c 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -951,6 +951,19 @@ class MigrationAutodetector:\n             if old_field_dec != new_field_dec:\n                 both_m2m = old_field.many_to_many and new_field.many_to_many\n                 neither_m2m = not old_field.many_to_many and not new_field.many_to_many\n+                # Special handling for UUIDField to ForeignKey conversion\n+                if isinstance(old_field, models.UUIDField) and hasattr(new_field, 'remote_field') and new_field.remote_field:\n+                    dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                    self.add_operation(\n+                        app_label,\n+                        operations.AlterField(\n+                            model_name=model_name,\n+                            name=field_name,\n+                            field=new_field,\n+                        ),\n+                        dependencies=dependencies,\n+                    )\n+                    continue\n                 if both_m2m or neither_m2m:\n                     # Either both fields are m2m or neither is\n                     preserve_default = True\n"}
{"instance_id":"django__django-11749","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e64761e..440a4aa716 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -136,6 +136,17 @@ def call_command(command_name, *args, **options):\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n         for opt in parser_actions if opt.required and opt.dest in options\n     ]\n+    \n+    # Handle arguments that are part of required mutually exclusive groups\n+    for group in parser._mutually_exclusive_groups:\n+        if group.required:\n+            for action in group._group_actions:\n+                if action.dest in options:\n+                    parse_args.append('{}={}'.format(\n+                        min(action.option_strings),\n+                        arg_options[action.dest]\n+                    ))\n+                    break  # Only need one argument from the group\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     # Raise an error if any unknown options were passed.\n"}
{"instance_id":"django__django-11790","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..6c2cd2062e 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -66,6 +66,7 @@ class UsernameField(forms.CharField):\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n+            'maxlength': '150',\n         }\n \n \n"}
{"instance_id":"django__django-11815","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..d07897f391 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,8 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        imports = {'import %s' % module}\n+        return \"%s.%s.%s\" % (module, enum_class.__name__, self.value.name), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n"}
{"instance_id":"django__django-11820","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f3f1..bce5ce452b 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1706,7 +1706,8 @@ class Model(metaclass=ModelBase):\n         for field in related_fields:\n             _cls = cls\n             fld = None\n-            for part in field.split(LOOKUP_SEP):\n+            parts = field.split(LOOKUP_SEP)\n+            for part in parts[:-1]:  # Process all parts except the last one\n                 try:\n                     fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n@@ -1721,6 +1722,22 @@ class Model(metaclass=ModelBase):\n                                 id='models.E015',\n                             )\n                         )\n+            # Check the last part, but skip if it's 'pk'\n+            if parts[-1] != 'pk':\n+                try:\n+                    fld = _cls._meta.get_field(parts[-1])\n+                    if fld.is_relation:\n+                        _cls = fld.get_path_info()[-1].to_opts.model\n+                except (FieldDoesNotExist, AttributeError):\n+                    if fld is None or fld.get_transform(parts[-1]) is None:\n+                        errors.append(\n+                            checks.Error(\n+                                \"'ordering' refers to the nonexistent field, \"\n+                                \"related field, or lookup '%s'.\" % field,\n+                                obj=cls,\n+                                id='models.E015',\n+                            )\n+                        )\n \n         # Skip ordering on pk. This is always a valid order_by field\n         # but is an alias and therefore won't be found by opts.get_field.\n"}
{"instance_id":"django__django-11848","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..062da97c07 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,12 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100\n+            trial_year = (current_century * 100) + year\n+            if trial_year > current_year + 50:\n+                trial_year -= 100\n+            year = trial_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n"}
{"instance_id":"django__django-11880","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 03cd8af8d7..4cc3133ca0 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -200,6 +200,7 @@ class Field:\n         memo[id(self)] = result\n         result.widget = copy.deepcopy(self.widget, memo)\n         result.validators = self.validators[:]\n+        result.error_messages = copy.deepcopy(self.error_messages, memo)\n         return result\n \n \n"}
{"instance_id":"django__django-11885","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26340..db5225ec35 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -310,9 +310,32 @@ class Collector:\n                     )\n \n             # fast deletes\n+            # Group fast deletes by model to combine queries\n+            fast_deletes_by_model = {}\n             for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                model = qs.model\n+                if model not in fast_deletes_by_model:\n+                    fast_deletes_by_model[model] = []\n+                fast_deletes_by_model[model].append(qs)\n+\n+            # Process each model's deletes\n+            for model, querysets in fast_deletes_by_model.items():\n+                if len(querysets) == 1:\n+                    # Single queryset - no need to combine\n+                    count = querysets[0]._raw_delete(using=self.using)\n+                else:\n+                    # Multiple querysets - combine their WHERE conditions\n+                    combined_q = querysets[0].query.where\n+                    for qs in querysets[1:]:\n+                        # Add OR between conditions\n+                        combined_q.add(qs.query.where, 'OR')\n+                    \n+                    # Create a new query with combined conditions\n+                    combined_qs = model._base_manager.filter(pk__in=querysets[0].values('pk'))\n+                    combined_qs.query.where = combined_q\n+                    count = combined_qs._raw_delete(using=self.using)\n+                \n+                deleted_counter[model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n"}
{"instance_id":"django__django-11951","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 794e0faae7..92349cd0c5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1209,7 +1209,8 @@ class QuerySet:\n         if ignore_conflicts and not connections[self.db].features.supports_ignore_conflicts:\n             raise NotSupportedError('This database backend does not support ignoring conflicts.')\n         ops = connections[self.db].ops\n-        batch_size = (batch_size or max(ops.bulk_batch_size(fields, objs), 1))\n+        max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)\n+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n         inserted_rows = []\n         bulk_return = connections[self.db].features.can_return_rows_from_bulk_insert\n         for item in [objs[i:i + batch_size] for i in range(0, len(objs), batch_size)]:\n"}
{"instance_id":"django__django-11964","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6ab..c3616d2ea1 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -73,3 +73,6 @@ class TextChoices(str, Choices):\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\n+        \n+    def __str__(self):\n+        return str(self.value)\n"}
{"instance_id":"django__django-11999","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex ee45bb941e..c03a35a5e4 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,8 +763,11 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            setattr(cls, 'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self))\n+            display_method_name = 'get_%s_display' % self.name\n+            # Only set the display method if it hasn't been overridden\n+            if not hasattr(cls, display_method_name):\n+                setattr(cls, display_method_name,\n+                        partialmethod(cls._get_FIELD_display, field=self))\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\n"}
{"instance_id":"django__django-12039","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 44e49806f8..ea34cfd590 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -112,12 +112,15 @@ class IndexColumns(Columns):\n         def col_str(column, idx):\n             # Index.__init__() guarantees that self.opclasses is the same\n             # length as self.columns.\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n+            parts = [self.quote_name(column)]\n+            if self.opclasses[idx]:\n+                parts.append(self.opclasses[idx].strip())\n             try:\n-                col = '{} {}'.format(col, self.col_suffixes[idx])\n+                if self.col_suffixes[idx]:\n+                    parts.append(self.col_suffixes[idx].strip())\n             except IndexError:\n                 pass\n-            return col\n+            return ' '.join(filter(None, parts))\n \n         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n \n"}
{"instance_id":"django__django-12050","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ea51912e8b..90475d6fb9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1073,7 +1073,7 @@ class Query(BaseExpression):\n                         ))\n                 else:\n                     resolved_values.append(sub_value)\n-            value = tuple(resolved_values)\n+            value = type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n"}
{"instance_id":"django__django-12125","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..ead81c398a 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -269,7 +269,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n"}
{"instance_id":"django__django-12143","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 137e6faa0f..effc5e9296 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):\n \n     def _get_edited_object_pks(self, request, prefix):\n         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n-        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n+        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), re.escape(self.model._meta.pk.name)))\n         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n \n     def _get_list_editable_queryset(self, request, prefix):\n"}
{"instance_id":"django__django-12155","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 4c0e7e2a56..aeec9fae5c 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -34,7 +34,7 @@ def trim_docstring(docstring):\n         return ''\n     # Convert tabs to spaces and split into lines\n     lines = docstring.expandtabs().splitlines()\n-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())\n+    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())\n     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]\n     return \"\\n\".join(trimmed).strip()\n \n"}
{"instance_id":"django__django-12193","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 6fe220bea7..d2969956a4 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -521,11 +521,12 @@ class CheckboxInput(Input):\n         return str(value)\n \n     def get_context(self, name, value, attrs):\n+        if attrs is None:\n+            attrs = {}\n+        final_attrs = attrs.copy()\n         if self.check_test(value):\n-            if attrs is None:\n-                attrs = {}\n-            attrs['checked'] = True\n-        return super().get_context(name, value, attrs)\n+            final_attrs['checked'] = True\n+        return super().get_context(name, value, final_attrs)\n \n     def value_from_datadict(self, data, files, name):\n         if name not in data:\n"}
{"instance_id":"django__django-12209","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e3b14a41a0..937c247da5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -847,12 +847,14 @@ class Model(metaclass=ModelBase):\n         if not pk_set and (force_update or update_fields):\n             raise ValueError(\"Cannot force an update in save() with no primary key.\")\n         updated = False\n-        # Skip an UPDATE when adding an instance and primary key has a default.\n+        # Skip an UPDATE when adding an instance and primary key has a default,\n+        # but only if the PK wasn't explicitly set\n         if (\n             not force_insert and\n             self._state.adding and\n             self._meta.pk.default and\n-            self._meta.pk.default is not NOT_PROVIDED\n+            self._meta.pk.default is not NOT_PROVIDED and\n+            not pk_set  # Only force insert if PK wasn't explicitly set\n         ):\n             force_insert = True\n         # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.\n"}
{"instance_id":"django__django-12262","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac8..c1394f28de 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -261,16 +261,16 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n-                # An unexpected keyword argument was supplied\n-                raise TemplateSyntaxError(\n-                    \"'%s' received unexpected keyword argument '%s'\" %\n-                    (name, param))\n-            elif param in kwargs:\n+            if param in kwargs:\n                 # The keyword argument has already been supplied once\n                 raise TemplateSyntaxError(\n                     \"'%s' received multiple values for keyword argument '%s'\" %\n                     (name, param))\n+            elif param not in params and param not in kwonly and param not in (kwonly_defaults or {}) and varkw is None:\n+                # An unexpected keyword argument was supplied\n+                raise TemplateSyntaxError(\n+                    \"'%s' received unexpected keyword argument '%s'\" %\n+                    (name, param))\n             else:\n                 # All good, record the keyword argument\n                 kwargs[str(param)] = value\n"}
{"instance_id":"django__django-12276","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 338d54d72f..40ac1d3162 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -387,6 +387,9 @@ class FileInput(Input):\n     def value_omitted_from_data(self, data, files, name):\n         return name not in files\n \n+    def use_required_attribute(self, initial):\n+        return super().use_required_attribute(initial) and not initial\n+\n \n FILE_INPUT_CONTRADICTION = object()\n \n@@ -451,9 +454,6 @@ class ClearableFileInput(FileInput):\n             return False\n         return upload\n \n-    def use_required_attribute(self, initial):\n-        return super().use_required_attribute(initial) and not initial\n-\n     def value_omitted_from_data(self, data, files, name):\n         return (\n             super().value_omitted_from_data(data, files, name) and\n"}
{"instance_id":"django__django-12304","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..642d84921c 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -8,6 +8,8 @@ __all__ = ['Choices', 'IntegerChoices', 'TextChoices']\n class ChoicesMeta(enum.EnumMeta):\n     \"\"\"A metaclass for creating a enum choices.\"\"\"\n \n+    do_not_call_in_templates = True\n+\n     def __new__(metacls, classname, bases, classdict):\n         labels = []\n         for key in classdict._member_names:\n"}
{"instance_id":"django__django-12308","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..ef0f5d51fa 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -379,6 +379,8 @@ def help_text_for_field(name, model):\n \n def display_for_field(value, field, empty_value_display):\n     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n+    from django.db.models import JSONField\n+    import json\n \n     if getattr(field, 'flatchoices', None):\n         return dict(field.flatchoices).get(value, empty_value_display)\n@@ -398,6 +400,8 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, JSONField):\n+        return json.dumps(value) if value is not None else empty_value_display\n     else:\n         return display_for_value(value, empty_value_display)\n \n"}
{"instance_id":"django__django-12325","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6ba1d..1320ac70db 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -240,21 +240,25 @@ class Options:\n \n         if self.pk is None:\n             if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n+                # Find the parent link field marked with parent_link=True\n+                parent_links = [f for f in self.parents.values() if f.remote_field.parent_link]\n+                if not parent_links:\n+                    raise ImproperlyConfigured(\n+                        'No parent link field found. Add parent_link=True to one of the OneToOne fields.'\n+                    )\n+                if len(parent_links) > 1:\n+                    raise ImproperlyConfigured(\n+                        'Multiple parent link fields found. Only one field can have parent_link=True.'\n+                    )\n+                field = parent_links[0]\n                 # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n+                # parent link. If a local field has already been\n                 # created, use it instead of promoting the parent\n                 already_created = [fld for fld in self.local_fields if fld.name == field.name]\n                 if already_created:\n                     field = already_created[0]\n                 field.primary_key = True\n                 self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n-                    raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n-                    )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n"}
{"instance_id":"django__django-12406","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex dafc11f995..034c550525 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1185,7 +1185,9 @@ class ModelChoiceField(ChoiceField):\n                  required=True, widget=None, label=None, initial=None,\n                  help_text='', to_field_name=None, limit_choices_to=None,\n                  **kwargs):\n-        if required and (initial is not None):\n+        # Set empty_label to None for RadioSelect widgets when field is required\n+        if required and (initial is not None or \n+                        (widget and widget.__class__.__name__ == 'RadioSelect')):\n             self.empty_label = None\n         else:\n             self.empty_label = empty_label\n"}
{"instance_id":"django__django-12419","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 09c9b95d26..8bb59a4037 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -637,6 +637,6 @@ SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n-SECURE_REFERRER_POLICY = None\n+SECURE_REFERRER_POLICY = 'same-origin'\n SECURE_SSL_HOST = None\n SECURE_SSL_REDIRECT = False\n"}
{"instance_id":"django__django-12663","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..5bc45890f6 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -802,8 +802,14 @@ class Field(RegisterLookupMixin):\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n-        if isinstance(value, Promise):\n+        from django.db.models import Model\n+        from django.utils.functional import SimpleLazyObject\n+        if isinstance(value, SimpleLazyObject):\n+            value = value._wrapped\n+        elif isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if isinstance(value, Model):\n+            return value.pk\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n"}
{"instance_id":"django__django-12708","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f88401ab..65c1bb9890 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1153,8 +1153,12 @@ class BaseDatabaseSchemaEditor:\n         result = []\n         for name, infodict in constraints.items():\n             if column_names is None or column_names == infodict['columns']:\n-                if unique is not None and infodict['unique'] != unique:\n-                    continue\n+                if unique is not None:\n+                    if infodict['unique'] != unique:\n+                        continue\n+                    # When looking for non-unique indexes, skip unique ones\n+                    if not unique and infodict['unique']:\n+                        continue\n                 if primary_key is not None and infodict['primary_key'] != primary_key:\n                     continue\n                 if index is not None and infodict['index'] != index:\n"}
{"instance_id":"django__django-12713","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 69a5fbf389..b3c4020f39 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -250,15 +250,16 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         db = kwargs.get('using')\n \n         autocomplete_fields = self.get_autocomplete_fields(request)\n-        if db_field.name in autocomplete_fields:\n-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in self.raw_id_fields:\n-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n-            kwargs['widget'] = widgets.FilteredSelectMultiple(\n-                db_field.verbose_name,\n-                db_field.name in self.filter_vertical\n-            )\n+        if 'widget' not in kwargs:\n+            if db_field.name in autocomplete_fields:\n+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in self.raw_id_fields:\n+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n+                kwargs['widget'] = widgets.FilteredSelectMultiple(\n+                    db_field.verbose_name,\n+                    db_field.name in self.filter_vertical\n+                )\n \n         if 'queryset' not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"}
{"instance_id":"django__django-12741","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 70ac07ae09..f07580c18b 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -400,9 +400,9 @@ class BaseDatabaseOperations:\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')\n \n-    def execute_sql_flush(self, using, sql_list):\n+    def execute_sql_flush(self, sql_list):\n         \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):\n+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):\n             with self.connection.cursor() as cursor:\n                 for sql in sql_list:\n                     cursor.execute(sql)\n"}
{"instance_id":"django__django-12754","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 30616c0172..5569517739 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -572,6 +572,19 @@ class MigrationAutodetector:\n                     True\n                 ))\n             # Generate creation operation\n+            # Check if this model inherits any fields being removed from parents\n+            force_beginning = True\n+            for base in model_state.bases:\n+                if isinstance(base, str) and \".\" in base:\n+                    base_app_label, base_name = base.split(\".\", 1)\n+                    if (base_app_label, base_name) in self.old_model_keys:\n+                        old_model_state = self.from_state.models[base_app_label, base_name]\n+                        for field_name in model_state.fields:\n+                            if field_name in old_model_state.fields:\n+                                # Don't force to beginning if inheriting fields from parent\n+                                force_beginning = False\n+                                break\n+\n             self.add_operation(\n                 app_label,\n                 operations.CreateModel(\n@@ -582,7 +595,7 @@ class MigrationAutodetector:\n                     managers=model_state.managers,\n                 ),\n                 dependencies=dependencies,\n-                beginning=True,\n+                beginning=force_beginning,\n             )\n \n             # Don't add operations which modify the database for unmanaged models\n"}
{"instance_id":"django__django-12774","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..727efc7203 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -689,8 +689,15 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n-            raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n+        if field_name != 'pk':\n+            field = self.model._meta.get_field(field_name)\n+            is_unique = field.unique or any(\n+                isinstance(constraint, models.UniqueConstraint) and\n+                constraint.fields == [field_name]\n+                for constraint in self.model._meta.constraints\n+            )\n+            if not is_unique:\n+                raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n                 return {}\n"}
{"instance_id":"django__django-12858","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6c9e9d3707..124db6eed0 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1747,7 +1747,7 @@ class Model(metaclass=ModelBase):\n                     else:\n                         _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n-                    if fld is None or fld.get_transform(part) is None:\n+                    if fld is None or (fld.get_transform(part) is None and fld.get_lookup(part) is None):\n                         errors.append(\n                             checks.Error(\n                                 \"'ordering' refers to the nonexistent field, \"\n"}
{"instance_id":"django__django-12965","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f..ba8fa14fc6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1423,7 +1423,14 @@ class SQLDeleteCompiler(SQLCompiler):\n         Create the SQL for this query. Return the SQL string and list of\n         parameters.\n         \"\"\"\n-        if self.single_alias:\n+        # Use simple DELETE for unfiltered deletion of all records\n+        is_simple_delete = (\n+            not self.query.where.children and\n+            not self.query.annotations and\n+            not self.query.distinct and\n+            not self.query.order_by\n+        )\n+        if self.single_alias or is_simple_delete:\n             return self._as_sql(self.query)\n         innerq = self.query.clone()\n         innerq.__class__ = Query\n"}
{"instance_id":"django__django-13012","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c1a76584f0..f35b6dd78a 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -348,12 +348,7 @@ class BaseExpression:\n         return copy.copy(self)\n \n     def get_group_by_cols(self, alias=None):\n-        if not self.contains_aggregate:\n-            return [self]\n-        cols = []\n-        for source in self.get_source_expressions():\n-            cols.extend(source.get_group_by_cols())\n-        return cols\n+        return self.expression.get_group_by_cols(alias)\n \n     def get_source_fields(self):\n         \"\"\"Return the underlying field types used by this aggregate.\"\"\"\n"}
{"instance_id":"django__django-13023","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0fd69059ee..693eee36a7 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1501,7 +1501,7 @@ class DecimalField(Field):\n             return self.context.create_decimal_from_float(value)\n         try:\n             return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n+        except (decimal.InvalidOperation, TypeError):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n                 code='invalid',\n"}
{"instance_id":"django__django-13028","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..2aa5cb93d6 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,6 +1124,11 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        from django.db.models import Model\n+        # Skip filterable check if the expression is a model instance\n+        # This handles cases where a model has a field named 'filterable'\n+        if isinstance(expression, Model):\n+            return\n         if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n"}
{"instance_id":"django__django-13033","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..d9dfbc0228 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,11 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+        # Also skip if we're ordering by a foreign key's ID field directly\n+        if (field.is_relation and opts.ordering and \n+            getattr(field, 'attname', None) != name and \n+            name != 'pk' and \n+            not name.endswith('_id')):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n"}
{"instance_id":"django__django-13089","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex 33c79c5a14..6394ba878f 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,9 +267,11 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                result = cursor.fetchone()\n+                if result:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [result[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n"}
{"instance_id":"django__django-13109","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d517d7269b..c2aea9c730 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n-        qs = self.remote_field.model._default_manager.using(using).filter(\n+        qs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n"}
{"instance_id":"django__django-13112","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 408964a146..b70f277721 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -89,12 +89,12 @@ class Apps:\n                     app_config = entry\n                 else:\n                     app_config = AppConfig.create(entry)\n-                if app_config.label in self.app_configs:\n+                if app_config.label.lower() in self.app_configs:\n                     raise ImproperlyConfigured(\n                         \"Application labels aren't unique, \"\n                         \"duplicates: %s\" % app_config.label)\n \n-                self.app_configs[app_config.label] = app_config\n+                self.app_configs[app_config.label.lower()] = app_config\n                 app_config.apps = self\n \n             # Check for duplicate app names.\n@@ -152,7 +152,7 @@ class Apps:\n         \"\"\"\n         self.check_apps_ready()\n         try:\n-            return self.app_configs[app_label]\n+            return self.app_configs[app_label.lower()]\n         except KeyError:\n             message = \"No installed app with label '%s'.\" % app_label\n             for app_config in self.get_app_configs():\n"}
{"instance_id":"django__django-13121","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 2e283a3193..8b5dbba443 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -579,8 +579,14 @@ class BaseDatabaseOperations:\n         return []\n \n     def convert_durationfield_value(self, value, expression, connection):\n-        if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+        if value is None:\n+            return None\n+        try:\n+            if isinstance(value, str):\n+                value = float(value)\n+            return datetime.timedelta(microseconds=value)\n+        except (ValueError, TypeError):\n+            return value\n \n     def check_expression_support(self, expression):\n         \"\"\"\n"}
{"instance_id":"django__django-13128","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658291..d23598c736 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -298,7 +298,14 @@ class BaseExpression:\n         If all sources are None, then an error is raised higher up the stack in\n         the output_field property.\n         \"\"\"\n-        sources_iter = (source for source in self.get_source_fields() if source is not None)\n+        from django.db.models import DateTimeField, DurationField\n+        \n+        sources = list(source for source in self.get_source_fields() if source is not None)\n+        if len(sources) == 2 and hasattr(self, 'connector') and self.connector == '-':\n+            if all(isinstance(source, DateTimeField) for source in sources):\n+                return DurationField()\n+                \n+        sources_iter = iter(sources)\n         for output_field in sources_iter:\n             for source in sources_iter:\n                 if not isinstance(output_field, source.__class__):\n"}
{"instance_id":"django__django-13158","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex ab611afca7..2bc1537fc0 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1323,7 +1323,9 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         if self.required and not value:\n             raise ValidationError(self.error_messages['required'], code='required')\n         elif not self.required and not value:\n-            return self.queryset.none()\n+            # For union querysets, we need to ensure we return an empty queryset\n+            # that matches the model of the original queryset\n+            return self.queryset.model.objects.none()\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(\n                 self.error_messages['invalid_list'],\n"}
{"instance_id":"django__django-13195","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/http/response.py b/django/http/response.py\nindex e00bcacefb..ac757cd880 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -214,9 +214,12 @@ class HttpResponseBase:\n         # Most browsers ignore the Set-Cookie header if the cookie name starts\n         # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n         secure = key.startswith(('__Secure-', '__Host-'))\n+        samesite = None\n+        if key in self.cookies:\n+            samesite = self.cookies[key].get('samesite')\n         self.set_cookie(\n             key, max_age=0, path=path, domain=domain, secure=secure,\n-            expires='Thu, 01 Jan 1970 00:00:00 GMT',\n+            expires='Thu, 01 Jan 1970 00:00:00 GMT', samesite=samesite,\n         )\n \n     # Common methods used by subclasses\n"}
{"instance_id":"django__django-13212","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31ec7..4abb28dd4e 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -208,12 +208,12 @@ class EmailValidator:\n \n     def __call__(self, value):\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         user_part, domain_part = value.rsplit('@', 1)\n \n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         if (domain_part not in self.domain_allowlist and\n                 not self.validate_domain_part(domain_part)):\n@@ -225,7 +225,7 @@ class EmailValidator:\n             else:\n                 if self.validate_domain_part(domain_part):\n                     return\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def validate_domain_part(self, domain_part):\n         if self.domain_regex.match(domain_part):\n"}
{"instance_id":"django__django-13279","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/signing.py b/django/core/signing.py\nindex c6713c3033..26f2be8ca0 100644\n--- a/django/core/signing.py\n+++ b/django/core/signing.py\n@@ -161,6 +161,9 @@ class Signer:\n         self.algorithm = algorithm or settings.DEFAULT_HASHING_ALGORITHM\n \n     def signature(self, value):\n+        if self.algorithm == 'sha1':\n+            # Use legacy signing behavior for sha1\n+            return base64_hmac(self.salt + 'signer', value, self.key)\n         return base64_hmac(self.salt + 'signer', value, self.key, algorithm=self.algorithm)\n \n     def _legacy_signature(self, value):\n"}
{"instance_id":"django__django-13297","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 8a105d4f35..c7bbafb8cd 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -408,6 +408,10 @@ class SQLiteCursorWrapper(Database.Cursor):\n     def execute(self, query, params=None):\n         if params is None:\n             return Database.Cursor.execute(self, query)\n+        # Convert any SimpleLazyObject parameters to strings\n+        from django.utils.functional import SimpleLazyObject\n+        if isinstance(params, (list, tuple)):\n+            params = tuple(str(p) if isinstance(p, SimpleLazyObject) else p for p in params)\n         query = self.convert_query(query)\n         return Database.Cursor.execute(self, query, params)\n \n"}
{"instance_id":"django__django-13315","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..9a77c2a765 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1226,6 +1226,8 @@ class ModelChoiceField(ChoiceField):\n         return result\n \n     def _get_queryset(self):\n+        if self._queryset is not None:\n+            return self._queryset.distinct()\n         return self._queryset\n \n     def _set_queryset(self, queryset):\n"}
{"instance_id":"django__django-13343","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex e10a5bb6d9..09569a69cc 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -226,15 +226,17 @@ class FileField(Field):\n \n     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n-\n-        self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n-            if not isinstance(self.storage, Storage):\n-                raise TypeError(\n-                    \"%s.storage must be a subclass/instance of %s.%s\"\n-                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)\n-                )\n+        \n+        self._storage_instance = None\n+        self._storage_callable = None\n+        \n+        if storage is None:\n+            self._storage_instance = default_storage\n+        elif callable(storage):\n+            self._storage_callable = storage\n+        else:\n+            self._storage_instance = storage\n+            \n         self.upload_to = upload_to\n \n         kwargs.setdefault('max_length', 100)\n@@ -273,13 +275,27 @@ class FileField(Field):\n         else:\n             return []\n \n+    @property\n+    def storage(self):\n+        if self._storage_instance is None and self._storage_callable is not None:\n+            storage = self._storage_callable()\n+            if not isinstance(storage, Storage):\n+                raise TypeError(\n+                    \"%s.storage must be a subclass/instance of %s.%s\"\n+                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)\n+                )\n+            self._storage_instance = storage\n+        return self._storage_instance\n+\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+        if self._storage_callable is not None:\n+            kwargs['storage'] = self._storage_callable\n+        elif self._storage_instance is not default_storage:\n+            kwargs['storage'] = self._storage_instance\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n"}
{"instance_id":"django__django-13344","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 169df6b3cf..416fdfa0a1 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -267,9 +267,10 @@ class BaseHandler:\n                 if response is None:\n                     raise\n \n-        # Make sure the response is not a coroutine\n+        # Make sure the response is not a coroutine and await it if it is\n         if asyncio.iscoroutine(response):\n-            raise RuntimeError('Response is still a coroutine.')\n+            response = await response\n+\n         return response\n \n     def resolve_request(self, request):\n"}
{"instance_id":"django__django-13346","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8..b5b6dcf6c2 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -479,8 +479,31 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n     pass\n \n \n+class KeyTransformIn(lookups.In):\n+    def process_rhs(self, compiler, connection):\n+        if isinstance(self.rhs, KeyTransform):\n+            return super(lookups.In, self).process_rhs(compiler, connection)\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor == 'oracle':\n+            func = []\n+            for value in rhs_params:\n+                value = json.loads(value)\n+                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n+                func.append(\"%s('%s', '$.value')\" % (\n+                    function,\n+                    json.dumps({'value': value}),\n+                ))\n+            rhs = rhs % tuple(func)\n+            rhs_params = []\n+        elif connection.vendor == 'sqlite':\n+            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            rhs = rhs % tuple(func)\n+        return rhs, rhs_params\n+\n+\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformIsNull)\n KeyTransform.register_lookup(KeyTransformIContains)\n KeyTransform.register_lookup(KeyTransformStartsWith)\n"}
{"instance_id":"django__django-13363","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex b6594b043b..6828980733 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -292,7 +292,7 @@ class TruncDate(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to date rather than truncate to date.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname()\n         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)\n         return sql, lhs_params\n \n@@ -305,7 +305,7 @@ class TruncTime(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to time rather than truncate to time.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname()\n         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)\n         return sql, lhs_params\n \n"}
{"instance_id":"django__django-13401","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..242c713e57 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,17 +516,20 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return (self.creation_counter == other.creation_counter and\n+                   self.model == other.model)\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n-            return self.creation_counter < other.creation_counter\n+            if self.creation_counter != other.creation_counter:\n+                return self.creation_counter < other.creation_counter\n+            return str(self.model) < str(other.model)\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        return hash((self.creation_counter, self.model))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}
{"instance_id":"django__django-13406","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b48d0df9c0..75f8b2ff10 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -211,6 +211,11 @@ class QuerySet:\n     @query.setter\n     def query(self, value):\n         self._query = value\n+        if getattr(value, 'values_select', None):\n+            self._iterable_class = ValuesIterable\n+            self._fields = tuple(value.values_select)\n+        if getattr(value, 'values_annotation', False):\n+            self._fields = self._fields + tuple(value.annotation_select.keys())\n \n     def as_manager(cls):\n         # Address the circular dependency between `Queryset` and `Manager`.\n@@ -821,7 +826,9 @@ class QuerySet:\n         clone = self._chain()\n         if expressions:\n             clone = clone.annotate(**expressions)\n+            clone.query.values_annotation = True\n         clone._fields = fields\n+        clone.query.values_select = list(fields)\n         clone.query.set_values(fields)\n         return clone\n \n"}
{"instance_id":"django__django-13410","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b905..4938347ea7 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,15 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return True\n+            except OSError:\n+                return False\n"}
{"instance_id":"django__django-13417","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd8311a7..7781586d97 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1219,12 +1219,14 @@ class QuerySet:\n         \"\"\"\n         Return True if the QuerySet is ordered -- i.e. has an order_by()\n         clause or a default ordering on the model (or is empty).\n+        Note that default ordering is not applied for GROUP BY queries.\n         \"\"\"\n         if isinstance(self, EmptyQuerySet):\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        elif (self.query.default_ordering and self.query.get_meta().ordering and\n+              not self.query.group_by):\n             return True\n         else:\n             return False\n"}
{"instance_id":"django__django-13449","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 90d90119d0..9443225f1b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -24,7 +24,12 @@ class SQLiteNumericMixin:\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n         try:\n             if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n+                # For window functions, we need to wrap the entire expression including OVER clause\n+                if ' OVER ' in sql:\n+                    parts = sql.split(' OVER ', 1)\n+                    sql = 'CAST(%s OVER %s AS NUMERIC)' % (parts[0], parts[1])\n+                else:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql\n         except FieldError:\n             pass\n         return sql, params\n"}
{"instance_id":"django__django-13512","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 9de2c60b35..8235aaac01 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1258,7 +1258,7 @@ class JSONField(CharField):\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n"}
{"instance_id":"django__django-13513","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7bd15..0d84d3f7c5 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -397,8 +397,8 @@ class ExceptionReporter:\n     def get_traceback_frames(self):\n         def explicit_or_implicit_cause(exc_value):\n             explicit = getattr(exc_value, '__cause__', None)\n-            suppress_context = getattr(exc_value, '__suppress_context__', None)\n             implicit = getattr(exc_value, '__context__', None)\n+            suppress_context = getattr(exc_value, '__suppress_context__', False)\n             return explicit or (None if suppress_context else implicit)\n \n         # Get the exception and all its causes\n"}
{"instance_id":"django__django-13516","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex e6cbf8c64f..90b9241b38 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -149,6 +149,7 @@ class OutputWrapper(TextIOBase):\n             msg += ending\n         style_func = style_func or self.style_func\n         self._out.write(style_func(msg))\n+        self._out.flush()\n \n \n class BaseCommand:\n"}
{"instance_id":"django__django-13551","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..fc6fddfafb 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -85,6 +85,7 @@ class PasswordResetTokenGenerator:\n            same password is chosen, due to password salting).\n         2. The last_login field will usually be updated very shortly after\n            a password reset.\n+        3. The email field (if available) will invalidate the token if changed.\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n \n@@ -94,7 +95,9 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email_field = user.__class__.get_email_field_name()\n+        email = getattr(user, email_field, '')\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + str(email)\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n"}
{"instance_id":"django__django-13568","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 65fc266f7e..7589759f60 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -4,6 +4,7 @@ from types import MethodType\n from django.apps import apps\n from django.conf import settings\n from django.core import checks\n+from django.db.models import UniqueConstraint\n \n from .management import _get_builtin_permissions\n \n@@ -52,7 +53,15 @@ def check_user_model(app_configs=None, **kwargs):\n         )\n \n     # Check that the username field is unique\n-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n+    field_is_unique = cls._meta.get_field(cls.USERNAME_FIELD).unique\n+    # Check if USERNAME_FIELD is part of any UniqueConstraint\n+    has_unique_constraint = any(\n+        isinstance(constraint, UniqueConstraint) and\n+        cls.USERNAME_FIELD in constraint.fields\n+        for constraint in cls._meta.constraints\n+    )\n+    \n+    if not (field_is_unique or has_unique_constraint):\n         if (settings.AUTHENTICATION_BACKENDS ==\n                 ['django.contrib.auth.backends.ModelBackend']):\n             errors.append(\n"}
{"instance_id":"django__django-13569","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 04e430a42e..836132e6b7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -128,8 +128,11 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n-            if not is_ref:\n-                expressions.extend(expr.get_group_by_cols())\n+            # Also skip Random() expressions as they shouldn't affect grouping\n+            if not is_ref and not expr.contains_aggregate:\n+                group_by_cols = expr.get_group_by_cols()\n+                expressions.extend(col for col in group_by_cols\n+                                 if not isinstance(col, Random))\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n"}
{"instance_id":"django__django-13590","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..b5ca6d1ae3 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,14 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = tuple(\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\n+            # Handle named tuples specially since they don't support iterator expansion\n+            if hasattr(value, '_fields'):\n+                return type(value)(*resolved_values)\n+            return type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n"}
{"instance_id":"django__django-13658","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..4bfe90e857 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,11 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(\n+            prog=self.prog_name,\n+            usage='%(prog)s subcommand [options] [args]',\n+            add_help=False,\n+            allow_abbrev=False)\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n"}
{"instance_id":"django__django-13670","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d79e0..7434c8c682 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):\n \n     def y(self):\n         \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        return '{:02d}'.format(self.data.year % 100)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n"}
{"instance_id":"django__django-13741","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b9eb33329f..9a6614a809 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault(\"required\", False)\n+        kwargs.setdefault(\"disabled\", True)\n         super().__init__(*args, **kwargs)\n \n     def bound_data(self, data, initial):\n"}
{"instance_id":"django__django-13786","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c679c..85ebb46a6f 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -141,7 +141,7 @@ class CreateModel(ModelOperation):\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=operation.options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n"}
{"instance_id":"django__django-13794","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 1c844580c6..03c6f09c4d 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -678,7 +678,7 @@ def add(value, arg):\n         return int(value) + int(arg)\n     except (ValueError, TypeError):\n         try:\n-            return value + arg\n+            return str(value) + str(arg)\n         except Exception:\n             return ''\n \n"}
{"instance_id":"django__django-13807","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98c0d..b0ef30a1fa 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,13 +327,13 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute('PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n"}
{"instance_id":"django__django-13809","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088350..ece1305382 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -51,6 +51,10 @@ class Command(BaseCommand):\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n@@ -114,11 +118,12 @@ class Command(BaseCommand):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks...\\n\\n\")\n-        self.check(display_num_errors=True)\n-        # Need to check migrations here, so can't use the\n-        # requires_migrations_check attribute.\n-        self.check_migrations()\n+        if not options.get('skip_checks'):\n+            self.stdout.write(\"Performing system checks...\\n\\n\")\n+            self.check(display_num_errors=True)\n+            # Need to check migrations here, so can't use the\n+            # requires_migrations_check attribute.\n+            self.check_migrations()\n         now = datetime.now().strftime('%B %d, %Y - %X')\n         self.stdout.write(now)\n         self.stdout.write((\n"}
{"instance_id":"django__django-13810","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..6ca99014db 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -50,13 +50,19 @@ class BaseHandler:\n             else:\n                 middleware_is_async = middleware_can_async\n             try:\n-                # Adapt handler, if needed.\n+                # First instantiate middleware to check if it will be used\n+                original_handler = handler\n+                mw_instance = middleware(handler)\n+                # Only adapt handler if middleware will be used\n                 handler = self.adapt_method_mode(\n-                    middleware_is_async, handler, handler_is_async,\n+                    middleware_is_async, original_handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n+                # Re-instantiate with adapted handler\n                 mw_instance = middleware(handler)\n             except MiddlewareNotUsed as exc:\n+                # Keep original handler when middleware is not used\n+                handler = original_handler\n                 if settings.DEBUG:\n                     if str(exc):\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n"}
{"instance_id":"django__django-13820","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 95a5062ec9..cb80e4108f 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -90,7 +90,7 @@ class MigrationLoader:\n             else:\n                 # Empty directories are namespaces.\n                 # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n+                if getattr(module, '__file__', None) is None and not (hasattr(module, '__path__') and isinstance(module.__path__, list)):\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n                 # Module is not a package (e.g. migrations.py).\n"}
{"instance_id":"django__django-13821","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex ab4ea70492..2b72e047fa 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -64,8 +64,8 @@ def list_aggregate(function):\n \n \n def check_sqlite_version():\n-    if Database.sqlite_version_info < (3, 8, 3):\n-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)\n+    if Database.sqlite_version_info < (3, 9, 0):\n+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s). This version is required for JSON1 and expression indexes support.' % Database.sqlite_version)\n \n \n check_sqlite_version()\n"}
{"instance_id":"django__django-13837","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f881..c7e7707657 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,14 +216,13 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    if hasattr(__main__, '__spec__') and __main__.__spec__ is not None and __main__.__spec__.parent:\n+        # The server was started with `python -m some_package runserver`.\n+        args += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n"}
{"instance_id":"django__django-13925","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..4d6cc93f06 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1299,6 +1299,7 @@ class Model(metaclass=ModelBase):\n     def _check_default_pk(cls):\n         if (\n             cls._meta.pk.auto_created and\n+            cls._meta.pk.model == cls and  # Only warn if PK is not inherited\n             not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n             not cls._meta.app_config._is_default_auto_field_overridden\n         ):\n"}
{"instance_id":"django__django-13933","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..e03a3803cd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'],\n+                code='invalid_choice',\n+                params={'value': value},\n+            )\n         return value\n \n     def validate(self, value):\n"}
{"instance_id":"django__django-13964","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..7a8570d7ca 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -253,8 +253,16 @@ class ForwardManyToOneDescriptor:\n \n         # Set the values of the related field.\n         else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+            if value._state.adding and all(getattr(value, rh_field.attname) in (None, '') for _, rh_field in self.field.related_fields):\n+                # For unsaved objects with unset PK, defer setting the foreign key value\n+                # until the instance is accessed or saved\n+                instance.__dict__[self.field.name] = value\n+                for lh_field, _ in self.field.related_fields:\n+                    instance.__dict__[lh_field.attname] = None\n+            else:\n+                # For saved objects or those with PK already set, behave normally\n+                for lh_field, rh_field in self.field.related_fields:\n+                    setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n"}
{"instance_id":"django__django-14007","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 55b1691166..bf64169baf 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -871,7 +871,10 @@ class Model(metaclass=ModelBase):\n             returning_fields = meta.db_returning_fields\n             results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\n             if results:\n+                connection = connections[using]\n                 for value, field in zip(results[0], returning_fields):\n+                    if hasattr(field, 'from_db_value'):\n+                        value = field.from_db_value(value, None, connection)\n                     setattr(self, field.attname, value)\n         return updated\n \n"}
{"instance_id":"django__django-14011","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..0208aee7da 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -77,10 +77,18 @@ class WSGIServer(simple_server.WSGIServer):\n             super().handle_error(request, client_address)\n \n \n+from django.db import connections\n+\n class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n     daemon_threads = True\n \n+    def process_request_thread(self, request, client_address):\n+        try:\n+            super().process_request_thread(request, client_address)\n+        finally:\n+            connections.close_all()\n+\n \n class ServerHandler(simple_server.ServerHandler):\n     http_version = '1.1'\n"}
{"instance_id":"django__django-14017","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..e51c42abde 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,6 +40,12 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n+        from django.db.models import Exists\n+        if isinstance(other, Exists):\n+            obj = type(self)()\n+            obj.connector = conn\n+            obj.children = list(self.children) + [other]\n+            return obj\n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n"}
{"instance_id":"django__django-14034","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..04caf63170 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1025,8 +1025,12 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n+                elif any(f.required for f in self.fields):\n+                    # Check if any subfield is required before allowing empty values\n+                    for i, field in enumerate(self.fields):\n+                        if field.required and (len(value) <= i or value[i] in self.empty_values):\n+                            raise ValidationError(field.error_messages['required'], code='required')\n+                return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n"}
{"instance_id":"django__django-14053","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 494890cc23..1d80054303 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -220,6 +220,8 @@ class HashedFilesMixin:\n \n         # where to store the new paths\n         hashed_files = {}\n+        # Track which files have been yielded\n+        yielded_files = set()\n \n         # build a list of adjustable files\n         adjustable_paths = [\n@@ -229,14 +231,18 @@ class HashedFilesMixin:\n         # Do a single pass first. Post-process all files once, then repeat for\n         # adjustable files.\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            if processed and name not in yielded_files:\n+                yielded_files.add(name)\n+                yield name, hashed_name, processed\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                if processed and subst and name not in yielded_files:\n+                    yielded_files.add(name)\n+                    yield name, hashed_name, processed\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n"}
{"instance_id":"django__django-14089","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\nindex 871b016715..044068a3c5 100644\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -34,6 +34,9 @@ class OrderedSet:\n     def __len__(self):\n         return len(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict.keys())\n+\n \n class MultiValueDictKeyError(KeyError):\n     pass\n"}
{"instance_id":"django__django-14122","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 850734709d..2bc666a775 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -128,7 +128,9 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n-            if not is_ref:\n+            # Also skip expressions from default ordering (Meta.ordering) when no explicit\n+            # order_by was specified\n+            if not is_ref and not (self.query.default_ordering and not self.query.extra_order_by and not self.query.order_by):\n                 expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n"}
{"instance_id":"django__django-14140","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ae0f886107..1e628451bc 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -87,7 +87,10 @@ class Q(tree.Node):\n         args, kwargs = (), {}\n         if len(self.children) == 1 and not isinstance(self.children[0], Q):\n             child = self.children[0]\n-            kwargs = {child[0]: child[1]}\n+            if isinstance(child, (list, tuple)) and len(child) == 2:\n+                kwargs = {child[0]: child[1]}\n+            else:\n+                args = tuple(self.children)\n         else:\n             args = tuple(self.children)\n             if self.connector != self.default:\n"}
{"instance_id":"django__django-14155","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..0cb1f3ccb5 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,6 +31,7 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        import functools\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -45,6 +46,15 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle partial functions\n+        if isinstance(func, functools.partial):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            func = func.func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -59,8 +69,11 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+        partial_info = \"\"\n+        if hasattr(self, 'partial_args') and (self.partial_args or self.partial_keywords):\n+            partial_info = \", partial_args=%s, partial_kwargs=%s\" % (self.partial_args, self.partial_keywords)\n+        return \"ResolverMatch(func=%s%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+            self._func_path, partial_info, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n"}
{"instance_id":"django__django-14170","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..df068db18e 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -547,6 +547,9 @@ class YearLookup(Lookup):\n         return bounds\n \n     def as_sql(self, compiler, connection):\n+        # Don't optimize iso_year lookups as they need to use EXTRACT('isoyear')\n+        if self.lookup_name == 'iso_year':\n+            return super().as_sql(compiler, connection)\n         # Avoid the extract operation if the rhs is a direct value to allow\n         # indexes to be used.\n         if self.rhs_is_direct_value():\n"}
{"instance_id":"django__django-14238","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..ed6e482222 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2524,7 +2524,11 @@ class AutoFieldMeta(type):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+        return (\n+            subclass in self._subclasses or\n+            any(issubclass(subclass, c) for c in self._subclasses) or\n+            super().__subclasscheck__(subclass)\n+        )\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n"}
{"instance_id":"django__django-14311","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5491..41b60ce9ed 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -224,7 +224,8 @@ def get_child_arguments():\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n     if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n+        module_name = getattr(__main__.__spec__, 'name', None) or __main__.__spec__.parent\n+        args += ['-m', module_name]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n"}
{"instance_id":"django__django-14315","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab65a8..944ac1d03e 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -51,7 +51,7 @@ class DatabaseClient(BaseDatabaseClient):\n             env['PGSSLKEY'] = str(sslkey)\n         if passfile:\n             env['PGPASSFILE'] = str(passfile)\n-        return args, env\n+        return args, env if env else None\n \n     def runshell(self, parameters):\n         sigint_handler = signal.getsignal(signal.SIGINT)\n"}
{"instance_id":"django__django-14349","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/validators.py b/django/core/validators.py\nindex a385819510..b247fd0745 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -101,6 +101,9 @@ class URLValidator(RegexValidator):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        # Reject URLs containing control characters\n+        if '\\n' in value or '\\r' in value or '\\t' in value:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n"}
{"instance_id":"django__django-14351","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py\nindex d745ecd5f9..e1cf4bf940 100644\n--- a/django/db/models/fields/related_lookups.py\n+++ b/django/db/models/fields/related_lookups.py\n@@ -86,7 +86,12 @@ class RelatedIn(In):\n                     AND)\n             return root_constraint.as_sql(compiler, connection)\n         else:\n-            if (not getattr(self.rhs, 'has_select_fields', True) and\n+            # For related field lookups using __in, always select only the ID field\n+            if isinstance(self.lhs.field, models.ForeignObject):\n+                self.rhs.clear_select_clause()\n+                target_field = self.lhs.field.target_field.name\n+                self.rhs.add_fields([target_field], True)\n+            elif (not getattr(self.rhs, 'has_select_fields', True) and\n                     not getattr(self.lhs.field.target_field, 'primary_key', False)):\n                 self.rhs.clear_select_clause()\n                 if (getattr(self.lhs.output_field, 'primary_key', False) and\n"}
{"instance_id":"django__django-14373","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex 38e89c47bb..7185c6921c 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n-        return self.data.year\n+        return '%04d' % self.data.year\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\n"}
{"instance_id":"django__django-14376","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..8b28a60485 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n"}
{"instance_id":"django__django-14404","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 59a4a0364d..74ef4c491e 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -420,7 +420,7 @@ class AdminSite:\n     def catch_all_view(self, request, url):\n         if settings.APPEND_SLASH and not url.endswith('/'):\n             urlconf = getattr(request, 'urlconf', None)\n-            path = '%s/' % request.path_info\n+            path = '%s/' % request.path\n             try:\n                 match = resolve(path, urlconf)\n             except Resolver404:\n"}
{"instance_id":"django__django-14434","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex c06386a2fa..0eb7ce7c82 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -65,7 +65,9 @@ class TableColumns(Table):\n         self.columns = columns\n \n     def references_column(self, table, column):\n-        return self.table == table and column in self.columns\n+        table_name = table.table if isinstance(table, Table) else table\n+        table_to_compare = self.table.table if isinstance(self.table, Table) else self.table\n+        return table_name == table_to_compare and column in self.columns\n \n     def rename_column_references(self, table, old_column, new_column):\n         if self.table == table:\n"}
{"instance_id":"django__django-14493","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b2..720767aa9e 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -261,6 +261,7 @@ class HashedFilesMixin:\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n+        substitutions = False\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n"}
{"instance_id":"django__django-14500","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 57042a8690..bff09b5e72 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -250,10 +250,12 @@ class MigrationExecutor:\n         if not fake:\n             with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n                 state = migration.unapply(state, schema_editor)\n-        # For replacement migrations, record individual statuses\n+        # For replacement migrations, only record replaced migration statuses\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n                 self.recorder.record_unapplied(app_label, name)\n+            # Don't mark the squashed migration itself as unapplied since its\n+            # replaced migrations are still effectively applied\n         else:\n             self.recorder.record_unapplied(migration.app_label, migration.name)\n         # Report progress\n"}
{"instance_id":"django__django-14534","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..8d9086fa76 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,6 +277,8 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n+        if 'attrs' in self.data and 'id' in self.data['attrs']:\n+            return self.data['attrs']['id']\n         return 'id_%s_%s' % (self.data['name'], self.data['index'])\n \n     @property\n"}
{"instance_id":"django__django-14539","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8dd3..d66ec9efbe 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -277,15 +277,15 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n                     middle = middle[:-len(closing)]\n                     trail = closing + trail\n                     trimmed_something = True\n-            # Trim trailing punctuation (after trimming wrapping punctuation,\n-            # as encoded entities contain ';'). Unescape entities to avoid\n-            # breaking them by removing ';'.\n-            middle_unescaped = html.unescape(middle)\n-            stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n-            if middle_unescaped != stripped:\n-                trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n-                trimmed_something = True\n+            # Trim trailing punctuation (after trimming wrapping punctuation)\n+            # Handle trailing punctuation while preserving HTML entities\n+            if middle:\n+                # Check if the last character is trailing punctuation and not part of an entity\n+                last_char = middle[-1]\n+                if last_char in TRAILING_PUNCTUATION_CHARS and not middle.rstrip(TRAILING_PUNCTUATION_CHARS).endswith('&'):\n+                    middle = middle[:-1]\n+                    trail = last_char + trail\n+                    trimmed_something = True\n         return lead, middle, trail\n \n     def is_email_simple(value):\n"}
{"instance_id":"django__django-14559","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca527..5d0c8b1c39 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -541,7 +541,7 @@ class QuerySet:\n         if any(f.primary_key for f in fields):\n             raise ValueError('bulk_update() cannot be used with primary key fields.')\n         if not objs:\n-            return\n+            return 0\n         # PK is used twice in the resulting update query, once in the filter\n         # and once in the WHEN. Each field will also have one CAST.\n         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)\n@@ -563,9 +563,11 @@ class QuerySet:\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n+        total_rows = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                self.filter(pk__in=pks).update(**update_kwargs)\n+                total_rows += self.filter(pk__in=pks).update(**update_kwargs)\n+        return total_rows\n     bulk_update.alters_data = True\n \n     def get_or_create(self, defaults=None, **kwargs):\n"}
{"instance_id":"django__django-14580","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..b56e6b225c 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -163,8 +163,21 @@ class MigrationWriter:\n                 self.needs_manual_porting = True\n \n         # django.db.migrations is always used, but models import may not be.\n-        # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n+        # If models import exists or models.Model is used in bases, merge it with migrations import.\n+        from django.db.models import Model\n+        needs_models = False\n+        \n+        # Check if any CreateModel operation uses models.Model in its bases\n+        for operation in self.migration.operations:\n+            if hasattr(operation, 'bases'):\n+                for base in operation.bases:\n+                    if isinstance(base, type) and issubclass(base, Model):\n+                        needs_models = True\n+                        break\n+            if needs_models:\n+                break\n+\n+        if \"from django.db import models\" in imports or needs_models:\n             imports.discard(\"from django.db import models\")\n             imports.add(\"from django.db import migrations, models\")\n         else:\n"}
{"instance_id":"django__django-14608","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..1b0d4554e0 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,7 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n \n     def clean(self):\n         \"\"\"\n"}
{"instance_id":"django__django-14631","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 88adadb37d..b0f3827504 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -232,6 +232,27 @@ class BoundField:\n     def widget_type(self):\n         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())\n \n+    def _did_change(self):\n+        \"\"\"\n+        Return True if the field value has changed from its initial value.\n+        \"\"\"\n+        if not self.form.is_bound:\n+            return False\n+            \n+        data_value = self.data\n+        if not self.field.show_hidden_initial:\n+            initial_value = self.initial\n+        else:\n+            initial_prefixed_name = self.form.add_initial_prefix(self.name)\n+            hidden_widget = self.field.hidden_widget()\n+            try:\n+                initial_value = self.field.to_python(\n+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)\n+                )\n+            except ValidationError:\n+                return True\n+        return self.field.has_changed(initial_value, data_value)\n+\n \n @html_safe\n class BoundWidget:\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037bfe9..34341e95b9 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -388,14 +388,14 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n-            if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+            bf = self[name]\n+            if not self.is_bound or field.disabled:\n+                value = bf.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bf.data\n             try:\n                 if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n+                    value = field.clean(value, bf.initial)\n                 else:\n                     value = field.clean(value)\n                 self.cleaned_data[name] = value\n"}
{"instance_id":"django__django-14672","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..65950590e2 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n"}
{"instance_id":"django__django-14725","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..f5b52119a3 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -568,10 +568,24 @@ class BaseModelFormSet(BaseFormSet):\n     A ``FormSet`` for editing a queryset and/or adding new objects to it.\n     \"\"\"\n     model = None\n+    allow_creation = True\n \n     # Set of fields that must be unique among forms of this set.\n     unique_fields = set()\n \n+    def is_valid(self):\n+        \"\"\"Return True if every form in self.forms is valid and creation is allowed.\"\"\"\n+        if not self.allow_creation:\n+            # Check if any new objects are being created\n+            for form in self.extra_forms:\n+                if form.has_changed():\n+                    form._errors = {}\n+                    form._errors[\"__all__\"] = form.error_class(\n+                        [\"Adding new objects is not allowed.\"]\n+                    )\n+                    return False\n+        return super().is_valid()\n+\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n@@ -896,6 +910,9 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                               renderer=renderer)\n     FormSet.model = model\n+    # Preserve allow_creation from formset class if it exists\n+    if hasattr(formset, 'allow_creation'):\n+        FormSet.allow_creation = formset.allow_creation\n     return FormSet\n \n \n"}
{"instance_id":"django__django-14752","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..c6f9ae2553 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -9,6 +9,13 @@ class AutocompleteJsonView(BaseListView):\n     paginate_by = 20\n     admin_site = None\n \n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"\n+        Return a dictionary representing a single autocomplete result.\n+        Override this method to customize the result format.\n+        \"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get(self, request, *args, **kwargs):\n         \"\"\"\n         Return a JsonResponse with search results of the form:\n@@ -26,7 +33,7 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+                self.serialize_result(obj, to_field_name)\n                 for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n"}
{"instance_id":"django__django-14765","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 088f5c41f0..1d30c7a20d 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -92,7 +92,8 @@ class ProjectState:\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n         if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n+            assert isinstance(real_apps, set), \"real_apps must be a set\"\n+            self.real_apps = real_apps\n         else:\n             self.real_apps = set()\n         self.is_delayed = False\n"}
{"instance_id":"django__django-14771","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..e4f16bf1dd 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -220,6 +220,8 @@ def get_child_arguments():\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+    args.extend('-X%s' % key if value is None else '-X%s=%s' % (key, value) \n+                for key, value in sys._xoptions.items())\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n"}
{"instance_id":"django__django-14787","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..92f8bf1fbd 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -38,6 +38,8 @@ def _multi_decorate(decorators, method):\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n+        # Preserve attributes from the original method on the partial object\n+        update_wrapper(bound_method, method)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n"}
{"instance_id":"django__django-14792","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..9cfa263201 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -73,7 +73,17 @@ def get_current_timezone_name():\n \n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n-    return str(timezone)\n+    tzname = str(timezone)\n+    if tzname.startswith('Etc/GMT'):\n+        try:\n+            # Extract offset number and flip the sign\n+            if '-' in tzname:\n+                return '+' + tzname.split('-')[1]\n+            elif '+' in tzname:\n+                return '-' + tzname.split('+')[1]\n+        except IndexError:\n+            pass\n+    return tzname\n \n # Timezone selection functions.\n \n"}
{"instance_id":"django__django-14855","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..ba8c3463a0 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n"}
{"instance_id":"django__django-14915","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923c12..bc7e6959e7 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n"}
{"instance_id":"django__django-14999","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..d725c1c90b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,6 +320,11 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Check if both models have explicit db_table set to the same value\n+            old_db_table = getattr(old_model._meta, 'db_table', None)\n+            new_db_table = getattr(new_model._meta, 'db_table', None)\n+            if old_db_table and new_db_table and old_db_table == new_db_table:\n+                return  # Skip the entire operation if db_table remains the same\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n"}
{"instance_id":"django__django-15022","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 66f3396a6b..45c37cbb61 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1031,6 +1031,7 @@ class ModelAdmin(BaseModelAdmin):\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\n+            final_query = models.Q()\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n@@ -1038,7 +1039,8 @@ class ModelAdmin(BaseModelAdmin):\n                     *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                     _connector=models.Q.OR,\n                 )\n-                queryset = queryset.filter(or_queries)\n+                final_query &= or_queries\n+            queryset = queryset.filter(final_query)\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n"}
{"instance_id":"django__django-15037","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477..bf73a29e22 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -124,6 +124,13 @@ class Command(BaseCommand):\n                             \"self\" if relations[column_name][1] == table_name\n                             else table2model(relations[column_name][1])\n                         )\n+                        # Check if this FK references a non-pk field\n+                        for constraint in constraints.values():\n+                            if (constraint.get('foreign_key') and \n+                                constraint['columns'] == [column_name] and\n+                                constraint['foreign_key'][1] != primary_key_column):\n+                                extra_params['to_field'] = constraint['foreign_key'][1]\n+                                break\n                         if rel_to in known_models:\n                             field_type = '%s(%s' % (rel_type, rel_to)\n                         else:\n"}
{"instance_id":"django__django-15098","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 7dcc77b46c..9d8ec98aa6 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -39,7 +39,13 @@ accept_language_re = _lazy_re_compile(r'''\n         ''', re.VERBOSE)\n \n language_code_re = _lazy_re_compile(\n-    r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$',\n+    r'^[a-z]{2,8}'  # language\n+    r'(?:-[A-Z][a-z]{3})?'  # script\n+    r'(?:-[A-Z]{2}|-\\d{3})?'  # region\n+    r'(?:-(?:[a-z0-9]{5,8}|\\d[a-z0-9]{3}))*'  # variant\n+    r'(?:-[0-9A-WY-Za-wy-z](?:-[A-Za-z0-9]{2,8})+)*'  # extension\n+    r'(?:-x(?:-[A-Za-z0-9]{1,8})+)?'  # private use\n+    r'(?:@[a-z0-9]{1,20})?$',  # old style '@' extensions\n     re.IGNORECASE\n )\n \n"}
{"instance_id":"django__django-15103","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/html.py b/django/utils/html.py\nindex da1b5675ec..de1d3d0ba8 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -61,7 +61,7 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id):\n+def json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -69,6 +69,11 @@ def json_script(value, element_id):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    if element_id is None:\n+        return format_html(\n+            '<script type=\"application/json\">{}</script>',\n+            mark_safe(json_str)\n+        )\n     return format_html(\n         '<script id=\"{}\" type=\"application/json\">{}</script>',\n         element_id, mark_safe(json_str)\n"}
{"instance_id":"django__django-15104","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 97977d72ef..bf9c2acd26 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ class MigrationAutodetector:\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n"}
{"instance_id":"django__django-15127","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex 01422066a6..305a4a8775 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -38,7 +38,8 @@ class Message:\n \n     @property\n     def level_tag(self):\n-        return LEVEL_TAGS.get(self.level, '')\n+        from django.contrib.messages.utils import get_level_tags\n+        return get_level_tags().get(self.level, '')\n \n \n class BaseStorage:\n"}
{"instance_id":"django__django-15128","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex aaf35ee37c..992400672b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -846,23 +846,67 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n-        assert set(change_map).isdisjoint(change_map.values())\n-\n+        if not change_map:\n+            return\n+            \n+        # Handle cases where change_map has overlapping keys and values\n+        # by breaking cycles using temporary aliases\n+        final_change_map = {}\n+        processed = set()\n+        temp_num = 0\n+        \n+        def get_temp_alias():\n+            nonlocal temp_num\n+            while True:\n+                temp_alias = f'__T{temp_num}__'\n+                temp_num += 1\n+                if temp_alias not in change_map and temp_alias not in change_map.values():\n+                    return temp_alias\n+        \n+        # First pass: handle chains of changes using temporary aliases\n+        remaining = dict(change_map)\n+        while remaining:\n+            old_alias = next(iter(remaining))\n+            chain = []\n+            current = old_alias\n+            \n+            # Follow the chain of aliases\n+            while current in remaining:\n+                if current in chain:\n+                    # We found a cycle, break it with a temporary alias\n+                    temp_alias = get_temp_alias()\n+                    final_change_map[chain[0]] = temp_alias\n+                    processed.add(chain[0])\n+                    del remaining[chain[0]]\n+                    break\n+                    \n+                chain.append(current)\n+                current = remaining[current]\n+                \n+            if current not in remaining:\n+                # No cycle found, can directly map\n+                final_change_map[chain[0]] = current\n+                processed.add(chain[0])\n+                del remaining[chain[0]]\n+        \n+        # Now apply the final changes\n+        assert set(final_change_map).isdisjoint(final_change_map.values())\n+        \n         # 1. Update references in \"select\" (normal columns plus aliases),\n         # \"group by\" and \"where\".\n-        self.where.relabel_aliases(change_map)\n+        self.where.relabel_aliases(final_change_map)\n         if isinstance(self.group_by, tuple):\n-            self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n-        self.select = tuple([col.relabeled_clone(change_map) for col in self.select])\n+            self.group_by = tuple([col.relabeled_clone(final_change_map) for col in self.group_by])\n+        self.select = tuple([col.relabeled_clone(final_change_map) for col in self.select])\n         self.annotations = self.annotations and {\n-            key: col.relabeled_clone(change_map) for key, col in self.annotations.items()\n+            key: col.relabeled_clone(final_change_map) for key, col in self.annotations.items()\n         }\n \n         # 2. Rename the alias in the internal table/alias datastructures.\n-        for old_alias, new_alias in change_map.items():\n+        for old_alias, new_alias in final_change_map.items():\n             if old_alias not in self.alias_map:\n                 continue\n-            alias_data = self.alias_map[old_alias].relabeled_clone(change_map)\n+            alias_data = self.alias_map[old_alias].relabeled_clone(final_change_map)\n             self.alias_map[new_alias] = alias_data\n             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]\n             del self.alias_refcount[old_alias]\n"}
{"instance_id":"django__django-15161","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..69552cf1b5 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -731,6 +731,7 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+@deconstructible(path='django.db.models.Value')\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n"}
{"instance_id":"django__django-15252","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..d8e8f8ad0c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -58,6 +58,10 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # If migrations are not allowed on this database, do nothing\n+        from django.db import router\n+        if not router.allow_migrate(self.connection.alias, self.Migration._meta.app_label):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n"}
{"instance_id":"django__django-15268","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..d2fb588efa 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -409,7 +409,15 @@ class RenameModel(ModelOperation):\n \n class ModelOptionOperation(ModelOperation):\n     def reduce(self, operation, app_label):\n-        if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            # Only combine operations of exactly the same type (not just same base class)\n+            if type(self) == type(operation):\n+                # If this operation clears (empty set) and next sets values, skip this one\n+                if not self.option_value and operation.option_value:\n+                    return [operation]\n+                # Otherwise use the new operation as it supersedes this one\n+                return [operation]\n+        elif isinstance(operation, DeleteModel) and self.name_lower == operation.name_lower:\n             return [operation]\n         return super().reduce(operation, app_label)\n \n"}
{"instance_id":"django__django-15277","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523346..88c9ca9f28 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n"}
{"instance_id":"django__django-15278","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6752a8e3c0..47b12ee0a3 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -326,8 +326,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         \"\"\"Create a field on a model.\"\"\"\n         # Fields with default values cannot by handled by ALTER TABLE ADD\n         # COLUMN statement because DROP DEFAULT is not supported in\n-        # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        # ALTER TABLE. SQLite also doesn't support adding UNIQUE columns\n+        # with ALTER TABLE.\n+        if not field.null or self.effective_default(field) is not None or getattr(field, 'unique', False):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n"}
{"instance_id":"django__django-15280","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..88344865eb 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -145,6 +145,19 @@ class ForwardManyToOneDescriptor:\n         if not remote_field.multiple:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n+                if isinstance(rel_obj, instance.__class__):\n+                    # For nested prefetch back to same model, preserve the queryset's deferred state\n+                    deferred_fields = queryset.query.deferred_loading[0]\n+                    only_fields = queryset.query.deferred_loading[1]\n+                    if only_fields:\n+                        # only() was used\n+                        rel_obj._state.fields_cache = {}\n+                        for field in only_fields:\n+                            if hasattr(rel_obj, field):\n+                                rel_obj._state.fields_cache[field] = getattr(rel_obj, field)\n+                    rel_obj._deferred = bool(deferred_fields)\n+                remote_field.set_cached_value(rel_obj, rel_obj)\n+            else:\n                 remote_field.set_cached_value(rel_obj, instance)\n         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False\n \n"}
{"instance_id":"django__django-15315","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 88c9ca9f28..fcea1597ef 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -542,11 +542,7 @@ class Field(RegisterLookupMixin):\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash((\n-            self.creation_counter,\n-            self.model._meta.app_label if hasattr(self, 'model') else None,\n-            self.model._meta.model_name if hasattr(self, 'model') else None,\n-        ))\n+        return hash(self.creation_counter)\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}
{"instance_id":"django__django-15368","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex f8d848e926..4aead284e3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -636,6 +636,8 @@ class QuerySet:\n \n         return objs\n \n+    from django.db.models import F\n+\n     def bulk_update(self, objs, fields, batch_size=None):\n         \"\"\"\n         Update the given fields in each of the given objects in the database.\n@@ -670,7 +672,7 @@ class QuerySet:\n                 when_statements = []\n                 for obj in batch_objs:\n                     attr = getattr(obj, field.attname)\n-                    if not isinstance(attr, Expression):\n+                    if not isinstance(attr, (Expression, F)):\n                         attr = Value(attr, output_field=field)\n                     when_statements.append(When(pk=obj.pk, then=attr))\n                 case_statement = Case(*when_statements, output_field=field)\n"}
{"instance_id":"django__django-15375","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex d405a203ee..bcbd4bdc6a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1671,13 +1671,22 @@ class SQLAggregateCompiler(SQLCompiler):\n         parameters.\n         \"\"\"\n         sql, params = [], []\n+        # Include both annotations and any aggregates\n         for annotation in self.query.annotation_select.values():\n             ann_sql, ann_params = self.compile(annotation)\n             ann_sql, ann_params = annotation.select_format(self, ann_sql, ann_params)\n             sql.append(ann_sql)\n             params.extend(ann_params)\n-        self.col_count = len(self.query.annotation_select)\n-        sql = ', '.join(sql)\n+            \n+        # If we have no annotations but have aggregates with defaults,\n+        # we need to select from the inner query columns\n+        if not sql and hasattr(self.query.inner_query, 'aggregate_select'):\n+            for alias, aggregate in self.query.inner_query.aggregate_select.items():\n+                agg_sql = \"subquery.%s\" % self.connection.ops.quote_name(alias)\n+                sql.append(agg_sql)\n+                \n+        self.col_count = len(sql) or len(self.query.inner_query.aggregate_select)\n+        sql = ', '.join(sql) if sql else '1'  # Fallback to prevent empty SELECT\n         params = tuple(params)\n \n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(\n"}
{"instance_id":"django__django-15380","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..f1238a3504 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -824,7 +824,7 @@ class MigrationAutodetector:\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n-            new_model_state = self.to_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n             field = new_model_state.get_field(field_name)\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\n"}
{"instance_id":"django__django-15382","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 50ff13be75..940d675131 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -230,6 +230,10 @@ class NothingNode:\n     contains_aggregate = False\n \n     def as_sql(self, compiler=None, connection=None):\n+        if hasattr(self, 'negated') and isinstance(self, ExistsBoundary):\n+            # For EXISTS with empty queryset, return a FALSE condition\n+            # that will become TRUE when negated\n+            return '(SELECT 0 WHERE 0=1)', []\n         raise EmptyResultSet\n \n \n"}
{"instance_id":"django__django-15467","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087bf1..6d4f2865ab 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                kwargs[\"empty_label\"] = (kwargs.get(\"empty_label\") or _(\"None\")) if db_field.blank else None\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"}
{"instance_id":"django__django-15499","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..b69c431971 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -202,6 +202,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, FieldOperation)\n             and self.name_lower == operation.model_name_lower\n"}
{"instance_id":"django__django-15503","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700c9d..1c08226eff 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -227,6 +227,11 @@ class HasKeyLookup(PostgresOperatorLookup):\n         return super().as_postgresql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n+        if isinstance(self.rhs, (int, float)):\n+            # Handle numeric keys by ensuring proper JSON path quoting\n+            path = f'$.\"' + str(self.rhs) + '\"'\n+            lhs, lhs_params = self.process_lhs(compiler, connection)\n+            return f\"JSON_TYPE(%s, %s) IS NOT NULL\", lhs_params + [path]\n         return self.as_sql(\n             compiler, connection, template=\"JSON_TYPE(%s, %%s) IS NOT NULL\"\n         )\n"}
{"instance_id":"django__django-15525","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex da85cb4b92..9a2c35c02c 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,7 +336,9 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        instance = Model(**data)\n+        instance._state.db = db\n+        natural_key = instance.natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n"}
{"instance_id":"django__django-15554","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 54f3258eac..f9a37836ba 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1570,7 +1570,19 @@ class Query(BaseExpression):\n         return target_clause\n \n     def add_filtered_relation(self, filtered_relation, alias):\n-        filtered_relation.alias = alias\n+        # Generate a unique alias for the filtered relation by combining the base alias\n+        # with a counter if the base relation is already used\n+        base_relation = filtered_relation.relation_name.split('__')[0]\n+        if base_relation in getattr(self, '_filtered_relation_counter', {}):\n+            self._filtered_relation_counter[base_relation] += 1\n+            unique_alias = f\"{alias}_{self._filtered_relation_counter[base_relation]}\"\n+        else:\n+            if not hasattr(self, '_filtered_relation_counter'):\n+                self._filtered_relation_counter = {}\n+            self._filtered_relation_counter[base_relation] = 1\n+            unique_alias = alias\n+            \n+        filtered_relation.alias = unique_alias\n         lookups = dict(get_children_from_q(filtered_relation.condition))\n         relation_lookup_parts, relation_field_parts, _ = self.solve_lookup_type(\n             filtered_relation.relation_name\n"}
{"instance_id":"django__django-15561","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 9d6952df21..b9e0edb2e1 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1389,6 +1389,7 @@ class BaseDatabaseSchemaEditor:\n             \"related_query_name\",\n             \"validators\",\n             \"verbose_name\",\n+            \"choices\",\n         ]\n         for attr in non_database_attrs:\n             old_kwargs.pop(attr, None)\n"}
{"instance_id":"django__django-15563","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex 04063f73bc..89bf1e55ee 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -84,20 +84,33 @@ class UpdateQuery(Query):\n         querysets.\n         \"\"\"\n         values_seq = []\n+        meta = self.get_meta()\n+        updating_model = meta.concrete_model\n+        \n         for name, val in values.items():\n-            field = self.get_meta().get_field(name)\n+            field = meta.get_field(name)\n             direct = (\n                 not (field.auto_created and not field.concrete) or not field.concrete\n             )\n             model = field.model._meta.concrete_model\n+            \n             if not direct or (field.is_relation and field.many_to_many):\n                 raise FieldError(\n                     \"Cannot update model field %r (only non-relations and \"\n                     \"foreign keys permitted).\" % field\n                 )\n-            if model is not self.get_meta().concrete_model:\n+                \n+            # Handle multi-table inheritance specially\n+            if model is not updating_model:\n+                # Check if this is a multi-table inheritance case\n+                if model in [parent for parent, _ in updating_model._meta.parents.items()]:\n+                    # This is a parent model in multi-table inheritance\n+                    self.add_related_update(model, field, val)\n+                    continue\n+                # Not a parent model\n                 self.add_related_update(model, field, val)\n                 continue\n+                \n             values_seq.append((field, model, val))\n         return self.add_update_fields(values_seq)\n \n"}
{"instance_id":"django__django-15569","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0caa165e15..6917820604 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -217,6 +217,7 @@ class RegisterLookupMixin:\n         if lookup_name is None:\n             lookup_name = lookup.lookup_name\n         del cls.class_lookups[lookup_name]\n+        cls._clear_cached_lookups()\n \n \n def select_related_descend(field, restricted, requested, load_fields, reverse=False):\n"}
{"instance_id":"django__django-15572","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/template/loaders/filesystem.py b/django/template/loaders/filesystem.py\nindex a2474a3fad..0d280ceae0 100644\n--- a/django/template/loaders/filesystem.py\n+++ b/django/template/loaders/filesystem.py\n@@ -15,7 +15,9 @@ class Loader(BaseLoader):\n         self.dirs = dirs\n \n     def get_dirs(self):\n-        return self.dirs if self.dirs is not None else self.engine.dirs\n+        dirs = self.dirs if self.dirs is not None else self.engine.dirs\n+        # Filter out empty directory paths\n+        return [d for d in dirs if d and str(d).strip()]\n \n     def get_contents(self, origin):\n         try:\n"}
{"instance_id":"django__django-15629","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex 562b209eef..9a25382151 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -167,6 +167,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n+        # For foreign keys, propagate collation from the target field\n+        if hasattr(new_field, 'target_field') and new_field.target_field.db_collation:\n+            new_type = f\"{new_type} COLLATE {new_field.target_field.db_collation}\"\n         return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n \n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n"}
{"instance_id":"django__django-15695","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..7a1726acac 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -957,6 +957,13 @@ class RenameIndex(IndexOperation):\n                 fields=self.old_fields,\n                 name=matching_index_name[0],\n             )\n+            # For unnamed indexes, use a temporary name during forward migration\n+            if self.old_fields and not getattr(self, '_using_temp_name', False):\n+                temp_name = f\"temp_{old_index.name}_{self.new_name}\"\n+                temp_index = models.Index(fields=self.old_fields, name=temp_name)\n+                schema_editor.rename_index(model, old_index, temp_index)\n+                old_index = temp_index\n+                self._using_temp_name = True\n         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n             old_index = from_model_state.get_index_by_name(self.old_name)\n@@ -964,6 +971,8 @@ class RenameIndex(IndexOperation):\n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n+        if getattr(self, '_using_temp_name', False):\n+            self._using_temp_name = False\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n"}
{"instance_id":"django__django-15731","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex e37e56cd17..f5a49aa1a9 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -81,11 +81,12 @@ class BaseManager:\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            from functools import wraps\n+            \n+            @wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n+            \n             return manager_method\n \n         new_methods = {}\n"}
{"instance_id":"django__django-15732","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex f2ca8c8df9..6420aa9caf 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -826,15 +826,8 @@ class BaseDatabaseSchemaEditor:\n                 primary_key=False,\n                 exclude=meta_constraint_names,\n             )\n-            if strict and len(constraint_names) != 1:\n-                raise ValueError(\n-                    \"Found wrong number (%s) of unique constraints for %s.%s\"\n-                    % (\n-                        len(constraint_names),\n-                        model._meta.db_table,\n-                        old_field.column,\n-                    )\n-                )\n+            # Multiple unique constraints are allowed on a field\n+            # (e.g. from unique_together and primary key)\n             for constraint_name in constraint_names:\n                 self.execute(self._delete_unique_sql(model, constraint_name))\n         # Drop incoming FK constraints if the field is a primary key or unique,\n"}
{"instance_id":"django__django-15741","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322d84..0d2be54019 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -97,6 +97,8 @@ def get_format_modules(lang=None):\n     return _format_modules_cache[lang]\n \n \n+from django.utils.encoding import force_str\n+\n def get_format(format_type, lang=None, use_l10n=None):\n     \"\"\"\n     For a specific format type, return the format for the current\n@@ -106,6 +108,7 @@ def get_format(format_type, lang=None, use_l10n=None):\n     If use_l10n is provided and is not None, it forces the value to\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n+    format_type = force_str(format_type)\n     if use_l10n is None:\n         try:\n             use_l10n = settings._USE_L10N_INTERNAL\n"}
{"instance_id":"django__django-15814","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb90b0..4a084a4397 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2596,7 +2596,7 @@ class RelatedPopulator:\n             )\n \n         self.model_cls = klass_info[\"model\"]\n-        self.pk_idx = self.init_list.index(self.model_cls._meta.pk.attname)\n+        self.pk_idx = self.init_list.index(self.model_cls._meta.concrete_model._meta.pk.attname)\n         self.related_populators = get_related_populators(klass_info, select, self.db)\n         self.local_setter = klass_info[\"local_setter\"]\n         self.remote_setter = klass_info[\"remote_setter\"]\n"}
{"instance_id":"django__django-15851","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 4c9bd63546..3b5ddafaca 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n"}
{"instance_id":"django__django-15863","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7a5b28d159..932c52edb3 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -151,8 +151,11 @@ def floatformat(text, arg=-1):\n             use_l10n = False\n             arg = arg[:-1] or -1\n     try:\n-        input_val = repr(text)\n-        d = Decimal(input_val)\n+        if isinstance(text, Decimal):\n+            d = text\n+        else:\n+            input_val = repr(text)\n+            d = Decimal(input_val)\n     except InvalidOperation:\n         try:\n             d = Decimal(str(float(text)))\n"}
{"instance_id":"django__django-15916","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad94..095f6aea49 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -625,6 +625,10 @@ def modelform_factory(\n         attrs[\"error_messages\"] = error_messages\n     if field_classes is not None:\n         attrs[\"field_classes\"] = field_classes\n+    \n+    # If no explicit formfield_callback is provided, check if the form has one in its Meta\n+    if formfield_callback is None and hasattr(form, 'Meta') and hasattr(form.Meta, 'formfield_callback'):\n+        formfield_callback = form.Meta.formfield_callback\n \n     # If parent form class already has an inner Meta, the Meta we're\n     # creating needs to inherit from the parent's inner meta.\n"}
{"instance_id":"django__django-15930","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 822968ef56..d736de336b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1299,6 +1299,9 @@ class When(Expression):\n         template_params = extra_context\n         sql_params = []\n         condition_sql, condition_params = compiler.compile(self.condition)\n+        # Handle empty conditions by using TRUE\n+        if not condition_sql.strip():\n+            condition_sql = \"TRUE\"\n         template_params[\"condition\"] = condition_sql\n         sql_params.extend(condition_params)\n         result_sql, result_params = compiler.compile(self.result)\n"}
{"instance_id":"django__django-15957","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb90b0..e9ee55ba83 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2145,16 +2145,19 @@ class Prefetch:\n         self.prefetch_through = lookup\n         # `prefetch_to` is the path to the attribute that stores the result.\n         self.prefetch_to = lookup\n-        if queryset is not None and (\n-            isinstance(queryset, RawQuerySet)\n-            or (\n+        if queryset is not None:\n+            if isinstance(queryset, RawQuerySet) or (\n                 hasattr(queryset, \"_iterable_class\")\n                 and not issubclass(queryset._iterable_class, ModelIterable)\n-            )\n-        ):\n-            raise ValueError(\n-                \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n-            )\n+            ):\n+                raise ValueError(\n+                    \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n+                )\n+            if queryset.query.is_sliced:\n+                raise ValueError(\n+                    \"Prefetch querysets cannot use sliced querysets. \"\n+                    \"Use limit() or a filtered queryset instead.\"\n+                )\n         if to_attr:\n             self.prefetch_to = LOOKUP_SEP.join(\n                 lookup.split(LOOKUP_SEP)[:-1] + [to_attr]\n"}
{"instance_id":"django__django-15973","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 09785e8586..5cd680a648 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -450,8 +450,11 @@ class BaseDatabaseSchemaEditor:\n \n         # Make M2M tables\n         for field in model._meta.local_many_to_many:\n-            if field.remote_field.through._meta.auto_created:\n-                self.create_model(field.remote_field.through)\n+            through = field.remote_field.through\n+            if isinstance(through, str):\n+                through = field.model._meta.apps.get_model(through)\n+            if through._meta.auto_created:\n+                self.create_model(through)\n \n     def delete_model(self, model):\n         \"\"\"Delete a model from the database.\"\"\"\n"}
{"instance_id":"django__django-15987","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..bdd7eee73c 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,7 +362,9 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+        # Convert all paths to their absolute, normalized form for comparison\n+        normalized_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]\n+        if len(normalized_dirs) != len(set(normalized_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n"}
{"instance_id":"django__django-16032","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8419dc0d54..a539333553 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -303,6 +303,10 @@ class Query(BaseExpression):\n             raise ValueError(\"Need either using or connection\")\n         if using:\n             connection = connections[using]\n+        # When used as a subquery in an __in lookup, only select the pk\n+        if self.is_subquery and self.subquery_lookup == 'in':\n+            self.clear_select_clause()\n+            self.add_fields([self.get_meta().pk.name])\n         return connection.ops.compiler(self.compiler)(\n             self, connection, using, elide_empty\n         )\n"}
{"instance_id":"django__django-16082","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py\nindex 8b5fd79c3a..ebae05779e 100644\n--- a/django/db/models/functions/math.py\n+++ b/django/db/models/functions/math.py\n@@ -121,7 +121,7 @@ class Log(FixDecimalInputMixin, NumericOutputFieldMixin, Func):\n         return clone.as_sql(compiler, connection, **extra_context)\n \n \n-class Mod(FixDecimalInputMixin, NumericOutputFieldMixin, Func):\n+class Mod(NumericOutputFieldMixin, FixDecimalInputMixin, Func):\n     function = \"MOD\"\n     arity = 2\n \n"}
{"instance_id":"django__django-16100","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5f07a4208a..c338364f31 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2011,14 +2011,16 @@ class ModelAdmin(BaseModelAdmin):\n             )\n             if formset.is_valid():\n                 changecount = 0\n-                for form in formset.forms:\n-                    if form.has_changed():\n-                        obj = self.save_form(request, form, change=True)\n-                        self.save_model(request, obj, form, change=True)\n-                        self.save_related(request, form, formsets=[], change=True)\n-                        change_msg = self.construct_change_message(request, form, None)\n-                        self.log_change(request, obj, change_msg)\n-                        changecount += 1\n+                from django.db import transaction\n+                with transaction.atomic():\n+                    for form in formset.forms:\n+                        if form.has_changed():\n+                            obj = self.save_form(request, form, change=True)\n+                            self.save_model(request, obj, form, change=True)\n+                            self.save_related(request, form, formsets=[], change=True)\n+                            change_msg = self.construct_change_message(request, form, None)\n+                            self.log_change(request, obj, change_msg)\n+                            changecount += 1\n \n                 if changecount:\n                     msg = ngettext(\n"}
{"instance_id":"django__django-16116","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 2e97d9064b..f257e947ba 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -248,12 +248,12 @@ class Command(BaseCommand):\n                 else:\n                     self.log(\"No changes detected\")\n         else:\n+            if check_changes:\n+                sys.exit(1)\n             if self.update:\n                 self.write_to_last_migration_files(changes)\n             else:\n                 self.write_migration_files(changes)\n-            if check_changes:\n-                sys.exit(1)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n"}
{"instance_id":"django__django-16136","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex db1842e3e5..153fe1bfc3 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -139,6 +139,16 @@ class View:\n             )\n         else:\n             handler = self.http_method_not_allowed\n+        \n+        # If the handler is http_method_not_allowed and we have any async method,\n+        # we need to ensure it's handled in async context\n+        if (handler == self.http_method_not_allowed and \n+            any(asyncio.iscoroutinefunction(getattr(self, method)) \n+                for method in self.http_method_names if hasattr(self, method))):\n+            from asgiref.sync import async_to_sync\n+            async def async_handler(*a, **kw):\n+                return self.http_method_not_allowed(*a, **kw)\n+            return async_handler(request, *args, **kwargs)\n         return handler(request, *args, **kwargs)\n \n     def http_method_not_allowed(self, request, *args, **kwargs):\n"}
{"instance_id":"django__django-16139","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n"}
{"instance_id":"django__django-16145","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 3c39f57e4d..4b8cfc73e2 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -147,7 +147,7 @@ class Command(BaseCommand):\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n-                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else self.addr,\n+                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else ('0.0.0.0' if self.addr == '0' else self.addr),\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\n"}
{"instance_id":"django__django-16255","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..b40ad806ed 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n"}
{"instance_id":"django__django-16256","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex c5d87f647a..f78fe7eb02 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -63,6 +63,7 @@ and two directions (forward and reverse) for a total of six combinations.\n    ``ReverseManyToManyDescriptor``, use ``ManyToManyDescriptor`` instead.\n \"\"\"\n \n+from asgiref.sync import sync_to_async\n from django.core.exceptions import FieldError\n from django.db import (\n     DEFAULT_DB_ALIAS,\n@@ -793,6 +794,27 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         create.alters_data = True\n \n+        async def acreate(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            return await sync_to_async(super().create)(**kwargs)\n+\n+        acreate.alters_data = True\n+\n+        async def aget_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            return await sync_to_async(super().get_or_create)(**kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n+        async def aupdate_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            return await sync_to_async(super().update_or_create)(**kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -1191,6 +1213,32 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         create.alters_data = True\n \n+        async def acreate(self, *, through_defaults=None, **kwargs):\n+            db = router.db_for_write(self.instance.__class__, instance=self.instance)\n+            new_obj = await sync_to_async(super().create)(**kwargs)\n+            await sync_to_async(self.add)(new_obj, through_defaults=through_defaults)\n+            return new_obj\n+\n+        acreate.alters_data = True\n+\n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n+            db = router.db_for_write(self.instance.__class__, instance=self.instance)\n+            obj, created = await sync_to_async(super().get_or_create)(**kwargs)\n+            if created:\n+                await sync_to_async(self.add)(obj, through_defaults=through_defaults)\n+            return obj, created\n+\n+        aget_or_create.alters_data = True\n+\n+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):\n+            db = router.db_for_write(self.instance.__class__, instance=self.instance)\n+            obj, created = await sync_to_async(super().update_or_create)(**kwargs)\n+            if created:\n+                await sync_to_async(self.add)(obj, through_defaults=through_defaults)\n+            return obj, created\n+\n+        aupdate_or_create.alters_data = True\n+\n         def get_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(\n"}
{"instance_id":"django__django-16263","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9735ce10c8..ff377750fb 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -548,8 +548,18 @@ class Query(BaseExpression):\n     def get_count(self, using):\n         \"\"\"\n         Perform a COUNT() query using the current filter constraints.\n+        If annotations are not being used in filtering or ordering,\n+        create a clean query without the annotations.\n         \"\"\"\n         obj = self.clone()\n+        if (self.annotations and not self.annotation_select_mask and\n+                not any(ordering.endswith('__count') for ordering in self.order_by) and\n+                not any('OUTER JOIN' in str(where) for where in self.where.children)):\n+            # Create a new query without annotations if they're not being used\n+            obj = Query(self.model)\n+            obj.where = self.where\n+            obj.external_aliases = self.external_aliases\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n"}
{"instance_id":"django__django-16315","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 62273fc43c..a646915597 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -353,12 +353,24 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n+            # Get the model from the first field in the fields tuple\n+            model = fields[0].model\n+            # Get the actual column names for unique fields\n+            unique_columns = [\n+                model._meta.get_field(field).column or field\n+                for field in unique_fields\n+            ]\n+            # Get the actual column names for update fields\n+            update_columns = [\n+                model._meta.get_field(field).column or field\n+                for field in update_fields\n+            ]\n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(map(self.quote_name, unique_columns)),\n                 \", \".join(\n                     [\n-                        f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        f\"{self.quote_name(col)} = EXCLUDED.{self.quote_name(col)}\"\n+                        for col in update_columns\n                     ]\n                 ),\n             )\n"}
{"instance_id":"django__django-16333","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8495..e96f72fefa 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,9 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()\n+        else:\n+            self._meta.model._default_manager._insert = self.save_m2m\n         return user\n \n \n"}
{"instance_id":"django__django-16429","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/timesince.py b/django/utils/timesince.py\nindex 701c49bab9..f582d0e4f2 100644\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -97,6 +97,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             d.hour,\n             d.minute,\n             d.second,\n+            tzinfo=d.tzinfo,\n         )\n     else:\n         pivot = d\n"}
{"instance_id":"django__django-16454","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..ea729edce4 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -57,6 +57,20 @@ class CommandParser(ArgumentParser):\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n \n+    def add_subparsers(self, **kwargs):\n+        # Ensure subparsers use CommandParser\n+        kwargs.setdefault('parser_class', CommandParser)\n+        action = super().add_subparsers(**kwargs)\n+\n+        # Ensure add_parser() passes through the error handling attributes\n+        original_add_parser = action.add_parser\n+        def add_parser(name, **parser_kwargs):\n+            parser_kwargs.setdefault('missing_args_message', self.missing_args_message)\n+            parser_kwargs.setdefault('called_from_command_line', self.called_from_command_line)\n+            return original_add_parser(name, **parser_kwargs)\n+        action.add_parser = add_parser\n+        return action\n+\n     def parse_args(self, args=None, namespace=None):\n         # Catch missing argument for a better error message\n         if self.missing_args_message and not (\n"}
{"instance_id":"django__django-16485","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08c67..3032a36f76 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -183,7 +183,7 @@ def floatformat(text, arg=-1):\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    prec = max(1, abs(p) + units + 1)\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n"}
{"instance_id":"django__django-16493","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7a99b12691..bcf150516b 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -295,7 +295,7 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs[\"upload_to\"] = self.upload_to\n-        if self.storage is not default_storage:\n+        if hasattr(self, \"_storage_callable\") or self.storage is not default_storage:\n             kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)\n         return name, path, args, kwargs\n \n"}
{"instance_id":"django__django-16502","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8911543d4e..00ea3c7ca4 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -147,6 +147,9 @@ class BaseHandler:\n                 response=response,\n                 request=request,\n             )\n+        # Strip response content for HEAD requests as per RFC 2616\n+        if request.method == 'HEAD':\n+            response.content = b''\n         return response\n \n     async def get_response_async(self, request):\n"}
{"instance_id":"django__django-16527","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb..38bb0dcbbd 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -101,6 +101,7 @@ def submit_row(context):\n             ),\n             \"show_save_as_new\": not is_popup\n             and has_change_permission\n+            and has_add_permission\n             and change\n             and save_as,\n             \"show_save_and_add_another\": can_save_and_add_another,\n"}
{"instance_id":"django__django-16560","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 075ecee1be..df3b631e66 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -74,6 +74,8 @@ class BaseConstraint:\n             and self.violation_error_message != self.default_violation_error_message\n         ):\n             kwargs[\"violation_error_message\"] = self.violation_error_message\n+        if self.violation_error_code is not None:\n+            kwargs[\"violation_error_code\"] = self.violation_error_code\n         return (path, (), kwargs)\n \n     def clone(self):\n@@ -112,7 +114,10 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(\n+                    self.get_violation_error_message(),\n+                    code=self.violation_error_code,\n+                )\n         except FieldError:\n             pass\n \n@@ -400,6 +405,9 @@ class UniqueConstraint(BaseConstraint):\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(\n                     against, using=using\n                 ):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(\n+                        self.get_violation_error_message(),\n+                        code=self.violation_error_code,\n+                    )\n             except FieldError:\n                 pass\n"}
{"instance_id":"django__django-16569","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 235aaf844c..02d040ee03 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):\n                     required=False,\n                     widget=self.get_ordering_widget(),\n                 )\n-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(\n                 label=_(\"Delete\"),\n                 required=False,\n"}
{"instance_id":"django__django-16595","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab43ad..4f3d4c7fcc 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -251,6 +251,10 @@ class AlterField(FieldOperation):\n             operation\n         ):\n             return [operation]\n+        elif isinstance(operation, AlterField) and self.is_same_field_operation(\n+            operation\n+        ):\n+            return [operation]\n         elif (\n             isinstance(operation, RenameField)\n             and self.is_same_field_operation(operation)\n"}
{"instance_id":"django__django-16612","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 61be31d890..22aebdd064 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -453,7 +453,10 @@ class AdminSite:\n                 pass\n             else:\n                 if getattr(match.func, \"should_append_slash\", True):\n-                    return HttpResponsePermanentRedirect(\"%s/\" % request.path)\n+                    url = \"%s/\" % request.path\n+                    if request.GET:\n+                        url = \"%s?%s\" % (url, request.GET.urlencode())\n+                    return HttpResponsePermanentRedirect(url)\n         raise Http404\n \n     def _build_app_dict(self, request, label=None):\n"}
{"instance_id":"django__django-16631","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/utils/crypto.py b/django/utils/crypto.py\nindex 1c0e7001c6..edfbb89d24 100644\n--- a/django/utils/crypto.py\n+++ b/django/utils/crypto.py\n@@ -15,6 +15,8 @@ class InvalidAlgorithm(ValueError):\n     pass\n \n \n+from django.conf import settings\n+\n def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\"):\n     \"\"\"\n     Return the HMAC of 'value', using a key generated from key_salt and a\n@@ -22,6 +24,8 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\"):\n     but any algorithm name supported by hashlib can be passed.\n \n     A different key_salt should be passed in for every application of HMAC.\n+    When verifying HMACs, this function will also try keys from settings.SECRET_KEY_FALLBACKS\n+    if the primary key fails.\n     \"\"\"\n     if secret is None:\n         secret = settings.SECRET_KEY\n@@ -34,14 +38,25 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\"):\n         raise InvalidAlgorithm(\n             \"%r is not an algorithm accepted by the hashlib module.\" % algorithm\n         ) from e\n-    # We need to generate a derived key from our base key.  We can do this by\n-    # passing the key_salt and our base key through a pseudo-random function.\n+\n+    # Generate HMAC with the provided/current secret\n     key = hasher(key_salt + secret).digest()\n-    # If len(key_salt + secret) > block size of the hash algorithm, the above\n-    # line is redundant and could be replaced by key = key_salt + secret, since\n-    # the hmac module does the same thing for keys longer than the block size.\n-    # However, we need to ensure that we *always* do this.\n-    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n+    current_hmac = hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n+\n+    # For verification, if this was called with an explicit secret, don't use fallbacks\n+    if secret != force_bytes(settings.SECRET_KEY):\n+        return current_hmac\n+\n+    # Try fallback keys if they exist and we're verifying (not generating new HMAC)\n+    if hasattr(settings, 'SECRET_KEY_FALLBACKS'):\n+        for fallback_key in settings.SECRET_KEY_FALLBACKS:\n+            fallback_key = force_bytes(fallback_key)\n+            key = hasher(key_salt + fallback_key).digest()\n+            fallback_hmac = hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n+            if fallback_hmac.digest() == current_hmac.digest():\n+                return fallback_hmac\n+\n+    return current_hmac\n \n \n RANDOM_STRING_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n"}
{"instance_id":"django__django-16642","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..17e630be37 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -612,6 +612,8 @@ class FileResponse(StreamingHttpResponse):\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-brotli\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n"}
{"instance_id":"django__django-16661","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5240b07cd6..cba2266f80 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -465,8 +465,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # model anyways. For example, if you filter on employee__department__id,\n             # then the id value would be found already from employee__department_id.\n             if not prev_field or (\n-                prev_field.is_relation\n-                and field not in prev_field.path_infos[-1].target_fields\n+                not isinstance(prev_field, models.OneToOneField) and (\n+                    not prev_field.is_relation or\n+                    field not in prev_field.path_infos[-1].target_fields\n+                )\n             ):\n                 relation_parts.append(part)\n             if not getattr(field, \"path_infos\", None):\n"}
{"instance_id":"django__django-16662","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex a59f0c8dcb..364888c46a 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -173,9 +173,11 @@ class MigrationWriter:\n         else:\n             imports.add(\"from django.db import migrations\")\n \n-        # Sort imports by the package / module to be imported (the part after\n-        # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n+        # Sort imports with \"import\" statements before \"from\" statements, then by module name\n+        def import_key(imp):\n+            is_from = imp.startswith('from')\n+            return (is_from, imp.split()[1])\n+        sorted_imports = sorted(imports, key=import_key)\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += (\n"}
{"instance_id":"django__django-16667","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e95c..f4bc74b7cd 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1157,7 +1157,7 @@ class SelectDateWidget(Widget):\n             input_format = formats.sanitize_strftime_format(input_format)\n             try:\n                 date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+            except (ValueError, OverflowError):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n"}
{"instance_id":"django__django-16801","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7f8eb128e1..164d017d20 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -441,7 +441,8 @@ class ImageField(FileField):\n         # after their corresponding image field don't stay cleared by\n         # Model.__init__, see bug #11196.\n         # Only run post-initialization dimension update on non-abstract models\n-        if not cls._meta.abstract:\n+        # and only when dimension fields are actually used\n+        if not cls._meta.abstract and (self.width_field or self.height_field):\n             signals.post_init.connect(self.update_dimension_fields, sender=cls)\n \n     def update_dimension_fields(self, instance, force=False, *args, **kwargs):\n"}
{"instance_id":"django__django-16819","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 967a91fdc8..d60d0ba3c0 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -820,6 +820,15 @@ class AddIndex(IndexOperation):\n             )\n         self.index = index\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, RemoveIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.index.name.lower() == operation.name.lower()\n+        ):\n+            return []\n+        return super().reduce(operation, app_label)\n+\n     def state_forwards(self, app_label, state):\n         state.add_index(app_label, self.model_name_lower, self.index)\n \n@@ -869,6 +878,15 @@ class RemoveIndex(IndexOperation):\n         self.model_name = model_name\n         self.name = name\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, AddIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.name.lower() == operation.index.name.lower()\n+        ):\n+            return []\n+        return super().reduce(operation, app_label)\n+\n     def state_forwards(self, app_label, state):\n         state.remove_index(app_label, self.model_name_lower, self.name)\n \n"}
{"instance_id":"django__django-16877","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5289ef34a0..5104a50b2f 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -498,6 +498,16 @@ def safeseq(value):\n     return [mark_safe(obj) for obj in value]\n \n \n+@register.filter(is_safe=True)\n+def escapeseq(value):\n+    \"\"\"\n+    A filter for sequences that escapes each element. Convert each element to string,\n+    apply HTML escaping, and return a list with the results. Useful when autoescape\n+    is off.\n+    \"\"\"\n+    return [conditional_escape(obj) for obj in value]\n+\n+\n @register.filter(is_safe=True)\n @stringfilter\n def striptags(value):\n"}
{"instance_id":"django__django-16899","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex c395b0bde2..2c90dedc31 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -771,10 +771,11 @@ class BaseModelAdminChecks:\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' is not a callable, an attribute of \"\n-                        \"'%s', or an attribute of '%s'.\"\n+                        \"The value of '%s' refers to '%s', which is not a callable, \"\n+                        \"an attribute of '%s', or an attribute of '%s'.\"\n                         % (\n                             label,\n+                            field_name,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n                         ),\n"}
{"instance_id":"django__django-16901","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex aaab1730b7..84dcfeae51 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -129,13 +129,13 @@ class WhereNode(tree.Node):\n             # Convert if the database doesn't support XOR:\n             #   a XOR b XOR c XOR ...\n             # to:\n-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1\n+            #   (a OR b OR c OR ...) AND (a + b + c + ...) % 2 == 1\n             lhs = self.__class__(self.children, OR)\n             rhs_sum = reduce(\n                 operator.add,\n                 (Case(When(c, then=1), default=0) for c in self.children),\n             )\n-            rhs = Exact(1, rhs_sum)\n+            rhs = Exact(1, rhs_sum % 2)\n             return self.__class__([lhs, rhs], AND, self.negated).as_sql(\n                 compiler, connection\n             )\n"}
{"instance_id":"django__django-16938","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 36048601af..188d359b3e 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -79,7 +79,10 @@ class Serializer(base.Serializer):\n                     return self._value_from_field(value, value._meta.pk)\n \n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).only(\"pk\").iterator()\n+                    # Use base manager to avoid select_related from custom manager\n+                    related_model = field.remote_field.model\n+                    base_qs = related_model._base_manager.filter(pk__in=getattr(obj, field.name).values_list('pk', flat=True))\n+                    return base_qs.only(\"pk\").iterator()\n \n             m2m_iter = getattr(obj, \"_prefetched_objects_cache\", {}).get(\n                 field.name,\n"}
{"instance_id":"django__django-16950","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/forms/models.py b/django/forms/models.py\nindex 3fa04b821f..478091a974 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1143,6 +1143,10 @@ class BaseInlineFormSet(BaseModelFormSet):\n         return cls.fk.remote_field.get_accessor_name(model=cls.model).replace(\"+\", \"\")\n \n     def save_new(self, form, commit=True):\n+        # If the parent instance is new and unsaved, save it first\n+        # to ensure default values (like UUIDs) are generated\n+        if self.instance._state.adding:\n+            self.instance.save()\n         # Ensure the latest copy of the related instance is present on each\n         # form (it may have been saved after the formset was originally\n         # instantiated).\n"}
{"instance_id":"django__django-17029","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 0683f3ad3c..8940b06d09 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -373,6 +373,8 @@ class Apps:\n \n         This is mostly used in tests.\n         \"\"\"\n+        # Clear the swappable settings name cache\n+        self.get_swappable_settings_name.cache_clear()\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n"}
{"instance_id":"django__django-17084","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a778cd413b..d978ded88e 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -77,7 +77,7 @@ class Aggregate(Func):\n             # returning self.filter and including that in this loop.\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n-                if expr.contains_aggregate:\n+                if expr.contains_aggregate and not getattr(expr, 'contains_over_clause', False):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = (\n                         before_resolved.name\n"}
{"instance_id":"django__django-17087","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..06657ebaab 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n"}
{"instance_id":"django__django-7530","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 0b39536f5b..856c45cf24 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -105,7 +105,8 @@ class Command(BaseCommand):\n                     # At least one model must be migrated to the database.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_app_config(app_label).get_models()\n+                    if model._meta.app_label == app_label\n             )):\n                 loader.check_consistent_history(connection)\n \n"}
{"instance_id":"django__django-9296","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/django/core/paginator.py b/django/core/paginator.py\nindex 1f92da5d4f..6bdfcf70c2 100644\n--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -124,6 +124,11 @@ class Paginator:\n                 stacklevel=3\n             )\n \n+    def __iter__(self):\n+        \"\"\"Iterate over the pages in the paginator.\"\"\"\n+        for page_num in self.page_range:\n+            yield self.page(page_num)\n+\n \n class Page(collections.abc.Sequence):\n \n"}
{"instance_id":"matplotlib__matplotlib-13989","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 4b73d52293..bc5461ad9f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6686,7 +6686,7 @@ optional.\n \n         density = bool(density) or bool(normed)\n         if density and not stacked:\n-            hist_kwargs = dict(density=density)\n+            hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n         tops = []\n"}
{"instance_id":"matplotlib__matplotlib-14623","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex da2dea6f57..6c4f266962 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3644,10 +3644,20 @@ class _AxesBase(martist.Artist):\n                 f\"Attempting to set identical bottom == top == {bottom} \"\n                 f\"results in singular transformations; automatically \"\n                 f\"expanding.\")\n-        bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n-        bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n-\n-        self.viewLim.intervaly = (bottom, top)\n+        \n+        # Preserve the intended direction\n+        reverse = bottom > top\n+        \n+        # Get valid range values while maintaining order\n+        _bottom, _top = min(bottom, top), max(bottom, top)\n+        _bottom, _top = self.yaxis.get_major_locator().nonsingular(_bottom, _top)\n+        _bottom, _top = self.yaxis.limit_range_for_scale(_bottom, _top)\n+        \n+        # Reapply the inversion if needed\n+        if reverse:\n+            _bottom, _top = _top, _bottom\n+            \n+        self.viewLim.intervaly = (_bottom, _top)\n         if auto is not None:\n             self._autoscaleYon = bool(auto)\n \n"}
{"instance_id":"matplotlib__matplotlib-20488","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex e0c42c5b69..8890c3cce1 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1471,8 +1471,13 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            # Handle extremely large values by capping them to avoid transform issues\n+            safe_vmin = np.clip(self.vmin, None, 1e300)\n+            safe_vmax = np.clip(self.vmax, None, 1e300)\n+            if clip:\n+                value = np.clip(value, safe_vmin, safe_vmax)\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n-            t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n+            t_vmin, t_vmax = self._trf.transform([safe_vmin, safe_vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n                 raise ValueError(\"Invalid vmin or vmax\")\n             t_value -= t_vmin\n"}
{"instance_id":"matplotlib__matplotlib-20676","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a199e45d40..ee71647bff 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2083,6 +2083,8 @@ class SpanSelector(_SelectorWidget):\n         self._rect = None\n         self.visible = True\n         self._extents_on_press = None\n+        # Prevent the selector from modifying axis limits\n+        ax.autoscale(False)\n \n         # self._pressv is deprecated and we don't use it internally anymore\n         # but we maintain it until it is removed\n"}
{"instance_id":"matplotlib__matplotlib-20826","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 802fd3c997..7d249cc835 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1472,7 +1472,33 @@ class _AxesBase(martist.Artist):\n \n     def clear(self):\n         \"\"\"Clear the axes.\"\"\"\n+        # Store tick states\n+        x_tick_state = self.xaxis._major_tick_kw.copy()\n+        y_tick_state = self.yaxis._major_tick_kw.copy()\n+        \n+        # Store which labels were visible\n+        x_labels_visible = [label.get_visible() for label in self.get_xticklabels()]\n+        y_labels_visible = [label.get_visible() for label in self.get_yticklabels()]\n+        \n+        # Store shared axes state\n+        shared_x = self.get_shared_x_axes()\n+        shared_y = self.get_shared_y_axes()\n+        \n         self.cla()\n+        \n+        # Restore tick states\n+        self.xaxis._major_tick_kw.update(x_tick_state)\n+        self.yaxis._major_tick_kw.update(y_tick_state)\n+        \n+        # If this axis is sharing, reapply label_outer\n+        if len(shared_x.get_siblings(self)) > 1 or len(shared_y.get_siblings(self)) > 1:\n+            self.label_outer()\n+            \n+        # Update tick visibility\n+        for label, visible in zip(self.get_xticklabels(), x_labels_visible):\n+            label.set_visible(visible)\n+        for label, visible in zip(self.get_yticklabels(), y_labels_visible):\n+            label.set_visible(visible)\n \n     def get_facecolor(self):\n         \"\"\"Get the facecolor of the Axes.\"\"\"\n"}
{"instance_id":"matplotlib__matplotlib-20859","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 44ab024698..ee213086bf 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -360,7 +360,7 @@ class Legend(Artist):\n         \"\"\"\n         # local import only to avoid circularity\n         from matplotlib.axes import Axes\n-        from matplotlib.figure import Figure\n+        from matplotlib.figure import FigureBase\n \n         super().__init__()\n \n@@ -434,11 +434,11 @@ class Legend(Artist):\n             self.isaxes = True\n             self.axes = parent\n             self.set_figure(parent.figure)\n-        elif isinstance(parent, Figure):\n+        elif isinstance(parent, FigureBase):\n             self.isaxes = False\n             self.set_figure(parent)\n         else:\n-            raise TypeError(\"Legend needs either Axes or Figure as parent\")\n+            raise TypeError(\"Legend needs either Axes or Figure/SubFigure as parent\")\n         self.parent = parent\n \n         self._loc_used_default = loc is None\n"}
{"instance_id":"matplotlib__matplotlib-21568","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex b2b2195837..69b6a09092 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -315,7 +315,10 @@ class Text(Artist):\n             clean_line, ismath = self._preprocess_math(line)\n             if clean_line:\n                 w, h, d = renderer.get_text_width_height_descent(\n-                    clean_line, self._fontproperties, ismath=ismath)\n+                clean_line, self._fontproperties, ismath=ismath)\n+                if self.get_usetex():\n+                    # Add extra padding for TeX mode to maintain spacing\n+                    w *= 1.15  # 15% extra width for better spacing in TeX mode\n             else:\n                 w = h = d = 0\n \n"}
{"instance_id":"matplotlib__matplotlib-22719","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/category.py b/lib/matplotlib/category.py\nindex c823b68fd9..4110a2c2cf 100644\n--- a/lib/matplotlib/category.py\n+++ b/lib/matplotlib/category.py\n@@ -53,6 +53,9 @@ class StrCategoryConverter(units.ConversionInterface):\n         StrCategoryConverter._validate_unit(unit)\n         # dtype = object preserves numerical pass throughs\n         values = np.atleast_1d(np.array(value, dtype=object))\n+        # Handle empty arrays first\n+        if values.size == 0:\n+            return np.array([], dtype=float)\n         # pass through sequence of non binary numbers\n         with _api.suppress_matplotlib_deprecation_warning():\n             is_numlike = all(units.ConversionInterface.is_numlike(v)\n"}
{"instance_id":"matplotlib__matplotlib-22865","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex c59b0ac815..614d6c3337 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -651,8 +651,16 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        segments = np.dstack([X, Y])\n+        if self.drawedges:\n+            if self.extend in ['both', 'min', 'max']:\n+                # For extended colorbars, include segments at extension boundaries\n+                self.dividers.set_segments(segments)\n+            else:\n+                # For regular colorbars, exclude outer edges\n+                self.dividers.set_segments(segments[1:-1])\n+        else:\n+            self.dividers.set_segments([])\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n"}
{"instance_id":"matplotlib__matplotlib-22871","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 4d8ddf3ee5..8c9998a5df 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -797,8 +797,11 @@ class ConciseDateFormatter(ticker.Formatter):\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n+                # Show year in offset if all dates are in same year\n+                # and we're not starting from January\n                 if level < 2:\n-                    show_offset = False\n+                    show_offset = (len(np.unique(tickdate[:, 0])) == 1 and\n+                                 tickdate[0][1] > 1)  # Month > January\n                 break\n             elif level == 0:\n                 # all tickdate are the same, so only micros might be different\n"}
{"instance_id":"matplotlib__matplotlib-23299","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..057b15fd88 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -1175,7 +1175,18 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+    # Get the backend directly from the dict to avoid triggering resolution\n+    # of _auto_backend_sentinel, which can cause figures to be cleared\n+    backend = dict.__getitem__(rcParams, 'backend')\n+    if backend is rcsetup._auto_backend_sentinel:\n+        # If it's the auto sentinel, we need to detect the current backend\n+        # without triggering a backend switch\n+        from matplotlib import pyplot as plt\n+        if plt._get_backend_mod():\n+            backend = plt._get_backend_mod().backend_version\n+        else:\n+            backend = rcsetup.validate_backend(rcParams._get_backend_or_none() or 'agg')\n+    return backend\n \n \n def interactive(b):\n"}
{"instance_id":"matplotlib__matplotlib-23314","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..e25460816f 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -387,6 +387,9 @@ class Axes3D(Axes):\n \n     @martist.allow_rasterization\n     def draw(self, renderer):\n+        if not self.get_visible():\n+            return\n+            \n         self._unstale_viewLim()\n \n         # draw the background patch\n"}
{"instance_id":"matplotlib__matplotlib-23412","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex e062249589..0c893aac3a 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -586,10 +586,7 @@ class Patch(artist.Artist):\n         # docstring inherited\n         if not self.get_visible():\n             return\n-        # Patch has traditionally ignored the dashoffset.\n-        with cbook._setattr_cm(\n-                 self, _dash_pattern=(0, self._dash_pattern[1])), \\\n-             self._bind_draw_path_function(renderer) as draw_path:\n+        with self._bind_draw_path_function(renderer) as draw_path:\n             path = self.get_path()\n             transform = self.get_transform()\n             tpath = transform.transform_path_non_affine(path)\n"}
{"instance_id":"matplotlib__matplotlib-23476","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex c55864243a..74dff1d174 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3041,10 +3041,17 @@ class Figure(FigureBase):\n                 f\"This figure was saved with matplotlib version {version} and \"\n                 f\"is unlikely to function correctly.\")\n \n+        # Store the original DPI value\n+        original_dpi = state.get('_dpi', None)\n+        \n         self.__dict__ = state\n \n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n+        \n+        # Restore the original DPI if it was present\n+        if original_dpi is not None:\n+            self.set_dpi(original_dpi)\n \n         if restore_to_pylab:\n             # lazy import to avoid circularity\n"}
{"instance_id":"matplotlib__matplotlib-24026","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex c580043eeb..56908412f4 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -70,7 +70,12 @@ def stackplot(axes, x, *args,\n \n     labels = iter(labels)\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        # Don't set prop_cycle for CN format colors\n+        if not any(isinstance(c, str) and c.startswith('C') for c in colors):\n+            axes.set_prop_cycle(color=colors)\n+        color_cycle = iter(colors)\n+    else:\n+        color_cycle = None\n \n     # Assume data passed has not been 'stacked', so stack it here.\n     # We'll need a float buffer for the upcoming calculations.\n@@ -108,7 +113,7 @@ def stackplot(axes, x, *args,\n         stack += first_line\n \n     # Color between x = 0 and the first array.\n-    color = axes._get_lines.get_next_color()\n+    color = next(color_cycle) if color_cycle is not None else axes._get_lines.get_next_color()\n     coll = axes.fill_between(x, first_line, stack[0, :],\n                              facecolor=color, label=next(labels, None),\n                              **kwargs)\n@@ -117,7 +122,7 @@ def stackplot(axes, x, *args,\n \n     # Color between array i-1 and array i\n     for i in range(len(y) - 1):\n-        color = axes._get_lines.get_next_color()\n+        color = next(color_cycle) if color_cycle is not None else axes._get_lines.get_next_color()\n         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],\n                                    facecolor=color, label=next(labels, None),\n                                    **kwargs))\n"}
{"instance_id":"matplotlib__matplotlib-24149","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..230b72aca0 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,11 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        try:\n+            return next(val for val in obj if safe_isfinite(val))\n+        except StopIteration:\n+            # If no finite values found, return the first value even if nan\n+            return next(iter(obj))\n \n \n def sanitize_sequence(data):\n"}
{"instance_id":"matplotlib__matplotlib-24177","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 2412f815cd..96955c9ce6 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6747,6 +6747,9 @@ such objects\n             # this will automatically overwrite bins,\n             # so that each histogram uses the same bins\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n+            if density and not stacked and histtype.startswith('step'):\n+                # For step plots, normalize counts manually to ensure consistent density scaling\n+                m = m / (np.sum(m) * np.diff(bins))\n             tops.append(m)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n         bins = np.array(bins, float)  # causes problems if float16\n"}
{"instance_id":"matplotlib__matplotlib-24570","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 3a506543ac..059a6c8ae3 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -166,10 +166,10 @@ def _get_aligned_offsets(hd_list, height, align=\"baseline\"):\n         descent = max(d for h, d in hd_list)\n         height = height_descent + descent\n         offsets = [0. for h, d in hd_list]\n-    elif align in [\"left\", \"top\"]:\n+    elif align in [\"left\", \"bottom\"]:\n         descent = 0.\n         offsets = [d for h, d in hd_list]\n-    elif align in [\"right\", \"bottom\"]:\n+    elif align in [\"right\", \"top\"]:\n         descent = 0.\n         offsets = [height - h + d for h, d in hd_list]\n     elif align == \"center\":\n"}
{"instance_id":"matplotlib__matplotlib-24627","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 90b0bf117e..75c68a99df 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1284,6 +1284,11 @@ class _AxesBase(martist.Artist):\n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n \n+        # Unset axes and figure references for all artists\n+        for artist in self._children:\n+            artist.axes = None\n+            artist.figure = None\n+\n         for axis in self._axis_map.values():\n             axis.clear()  # Also resets the scale to linear.\n         for spine in self.spines.values():\n"}
{"instance_id":"matplotlib__matplotlib-24637","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd078..e5a3cac86e 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1452,6 +1452,7 @@ or callable, default: value of *xycoords*\n             self._renderer = renderer\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n+        renderer.open_group(self.__class__.__name__, self.get_gid())\n         self.update_positions(renderer)\n         if self.arrow_patch is not None:\n             if self.arrow_patch.figure is None and self.figure is not None:\n@@ -1459,6 +1460,7 @@ or callable, default: value of *xycoords*\n             self.arrow_patch.draw(renderer)\n         self.patch.draw(renderer)\n         self.offsetbox.draw(renderer)\n+        renderer.close_group(self.__class__.__name__)\n         self.stale = False\n \n \n"}
{"instance_id":"matplotlib__matplotlib-24870","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 144eadeae2..9b8b6657b4 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1447,11 +1447,22 @@ class QuadContourSet(ContourSet):\n             fn = 'contour'\n         nargs = len(args)\n         if nargs <= 2:\n-            z = ma.asarray(args[0], dtype=np.float64)\n+            # Check if input is boolean before converting to float64\n+            if isinstance(args[0], np.ndarray) and args[0].dtype == bool:\n+                z = ma.asarray(args[0])\n+                self.levels = [0.5]\n+            else:\n+                z = ma.asarray(args[0], dtype=np.float64)\n             x, y = self._initialize_x_y(z)\n             args = args[1:]\n         elif nargs <= 4:\n             x, y, z = self._check_xyz(args[:3], kwargs)\n+            # Check if input is boolean\n+            if isinstance(z, np.ndarray) and z.dtype == bool:\n+                z = ma.asarray(z)\n+                self.levels = [0.5]\n+            else:\n+                z = ma.asarray(z, dtype=np.float64)\n             args = args[3:]\n         else:\n             raise _api.nargs_error(fn, takes=\"from 1 to 4\", given=nargs)\n"}
{"instance_id":"matplotlib__matplotlib-24970","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 2d3072da04..f1025bd836 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -727,9 +727,9 @@ class Colormap:\n                 xa = xa.astype(int)\n         # Set the over-range indices before the under-range;\n         # otherwise the under-range values get converted to over-range.\n-        xa[xa > self.N - 1] = self._i_over\n-        xa[xa < 0] = self._i_under\n-        xa[mask_bad] = self._i_bad\n+        xa[xa > self.N - 1] = np.array(self._i_over).astype(xa.dtype)\n+        xa[xa < 0] = np.array(self._i_under).astype(xa.dtype)\n+        xa[mask_bad] = np.array(self._i_bad).astype(xa.dtype)\n \n         lut = self._lut\n         if bytes:\n"}
{"instance_id":"matplotlib__matplotlib-25122","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex 3552904c3d..b90c7ada60 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -427,7 +427,7 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n             result /= (np.abs(window)**2).sum()\n         else:\n             # In this case, preserve power in the segment, not amplitude\n-            result /= np.abs(window).sum()**2\n+            result /= window.sum()**2\n \n     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs\n \n"}
{"instance_id":"matplotlib__matplotlib-25287","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex c0e706e2b3..c2aa0f0a42 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -969,7 +969,7 @@ class Axis(martist.Artist):\n                     self._major_tick_kw.get('label1On', False)\n                     or self._major_tick_kw.get('label2On', False))\n             if 'labelcolor' in kwtrans:\n-                self.offsetText.set_color(kwtrans['labelcolor'])\n+                self.offsetText.set_color(kwtrans['labelcolor'] if kwtrans['labelcolor'] != 'inherit' else kwtrans.get('color', mpl.rcParams[f'{self.__name__}.color']))\n \n         self.stale = True\n \n@@ -2255,7 +2255,7 @@ class XAxis(Axis):\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['xtick.labelsize'],\n-            color=mpl.rcParams['xtick.color'],\n+            color=mpl.rcParams['xtick.labelcolor'] if mpl.rcParams['xtick.labelcolor'] != 'inherit' else mpl.rcParams['xtick.color'],\n         )\n         self.offset_text_position = 'bottom'\n \n@@ -2515,7 +2515,7 @@ class YAxis(Axis):\n             transform=mtransforms.blended_transform_factory(\n                 self.axes.transAxes, mtransforms.IdentityTransform()),\n             fontsize=mpl.rcParams['ytick.labelsize'],\n-            color=mpl.rcParams['ytick.color'],\n+            color=mpl.rcParams['ytick.labelcolor'] if mpl.rcParams['ytick.labelcolor'] != 'inherit' else mpl.rcParams['ytick.color'],\n         )\n         self.offset_text_position = 'left'\n \n"}
{"instance_id":"matplotlib__matplotlib-25311","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..121d7ed4ac 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1513,6 +1513,28 @@ class DraggableBase:\n             self.canvas.callbacks._connect_picklable(\n                 'button_release_event', self.on_release),\n         ]\n+        \n+    def __getstate__(self):\n+        \"\"\"Return state values to be pickled.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove unpicklable canvas reference\n+        state['canvas'] = None\n+        # Remove callback IDs since they're canvas-specific\n+        state['cids'] = []\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore state from the unpickled state values.\"\"\"\n+        self.__dict__ = state\n+        # Reconnect to canvas if artist has figure\n+        if self.ref_artist.figure:\n+            self.canvas = self.ref_artist.figure.canvas\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n"}
{"instance_id":"matplotlib__matplotlib-25332","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex c9699b2e21..3a03c97647 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -788,6 +788,20 @@ class Grouper:\n     def __init__(self, init=()):\n         self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}\n \n+    def __getstate__(self):\n+        # Convert weak references to strong references for pickling\n+        mapping = {}\n+        for key, val in self._mapping.items():\n+            k = key()\n+            if k is not None:\n+                mapping[k] = [v() for v in val if v() is not None]\n+        return {'mapping': mapping}\n+\n+    def __setstate__(self, state):\n+        # Restore weak references after unpickling\n+        self._mapping = {weakref.ref(k): [weakref.ref(x) for x in v]\n+                        for k, v in state['mapping'].items()}\n+\n     def __contains__(self, item):\n         return weakref.ref(item) in self._mapping\n \n"}
{"instance_id":"matplotlib__matplotlib-25479","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db956..d099dbf2f5 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -255,6 +255,8 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):\n         except AttributeError as err:\n             raise ValueError(\"Arguments must include a name or a \"\n                              \"Colormap\") from err\n+    # Update the colormap's internal name to match the registered name\n+    cmap.name = name\n     # override_builtin is allowed here for backward compatibility\n     # this is just a shim to enable that to work privately in\n     # the global ColormapRegistry\n"}
{"instance_id":"matplotlib__matplotlib-25775","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 4591316cf9..904a153cbe 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -115,6 +115,7 @@ class Text(Artist):\n                  wrap=False,\n                  transform_rotates_text=False,\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n+                 antialiased=None,   # defaults to rcParams['text.antialiased']\n                  **kwargs\n                  ):\n         \"\"\"\n@@ -149,6 +150,7 @@ class Text(Artist):\n             transform_rotates_text=transform_rotates_text,\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n+            antialiased=antialiased,\n         )\n         self.update(kwargs)\n \n@@ -167,6 +169,7 @@ class Text(Artist):\n         transform_rotates_text=False,\n         linespacing=None,\n         rotation_mode=None,\n+        antialiased=None,\n     ):\n         self.set_text(text)\n         self.set_color(\n@@ -187,6 +190,7 @@ class Text(Artist):\n             linespacing = 1.2  # Maybe use rcParam later.\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n+        self._antialiased = mpl.rcParams['text.antialiased'] if antialiased is None else antialiased\n \n     def update(self, kwargs):\n         # docstring inherited\n@@ -1969,6 +1973,22 @@ or callable, default: value of *xycoords*\n         # Otherwise, a wedge arrowstyle can land partly on top of the Bbox.\n         Text.draw(self, renderer)\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether antialiased rendering is used.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        if self._antialiased != b:\n+            self.stale = True\n+        self._antialiased = b\n+\n     def get_window_extent(self, renderer=None):\n         # docstring inherited\n         # This block is the same as in Text.get_window_extent, but we need to\n"}
{"instance_id":"matplotlib__matplotlib-25960","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..a38b356109 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2276,10 +2276,25 @@ class SubFigure(FigureBase):\n         gs = self._subplotspec.get_gridspec()\n         wr = np.asarray(gs.get_width_ratios())\n         hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        \n+        # Get spacing parameters from gridspec\n+        wspace = gs.get_width_ratios()\n+        hspace = gs.get_height_ratios()\n+        \n+        # Calculate the total width and height including spacing\n+        total_width = 1.0 + (len(wr) - 1) * (gs.wspace if gs.wspace is not None else 0)\n+        total_height = 1.0 + (len(hr) - 1) * (gs.hspace if gs.hspace is not None else 0)\n+        \n+        # Calculate width and height of each subfigure\n+        dx = wr[self._subplotspec.colspan].sum() / (wr.sum() * total_width)\n+        dy = hr[self._subplotspec.rowspan].sum() / (hr.sum() * total_height)\n+        \n+        # Calculate position including spacing\n+        x0 = (wr[:self._subplotspec.colspan.start].sum() / wr.sum() +\n+              self._subplotspec.colspan.start * (gs.wspace if gs.wspace is not None else 0)) / total_width\n+        y0 = 1 - ((hr[:self._subplotspec.rowspan.stop].sum() / hr.sum() +\n+                   self._subplotspec.rowspan.stop * (gs.hspace if gs.hspace is not None else 0)) / total_height)\n+        \n         if self.bbox_relative is None:\n             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n         else:\n"}
{"instance_id":"matplotlib__matplotlib-26113","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5369eadbde..46fb698522 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -5014,7 +5014,7 @@ default: :rc:`scatter.edgecolors`\n             if mincnt is None:\n                 mincnt = 0\n             accum = np.array(\n-                [reduce_C_function(acc) if len(acc) > mincnt else np.nan\n+                [reduce_C_function(acc) if len(acc) >= mincnt else np.nan\n                  for Cs_at_i in [Cs_at_i1, Cs_at_i2]\n                  for acc in Cs_at_i[1:]],  # [1:] drops out-of-range points.\n                 float)\n"}
{"instance_id":"matplotlib__matplotlib-26208","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e3232c..dd2be1495c 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -4400,6 +4400,10 @@ class _AxesBase(martist.Artist):\n             # which currently uses this internal API.\n             if kwargs[\"sharex\"] is not self and kwargs[\"sharey\"] is not self:\n                 raise ValueError(\"Twinned Axes may share only one axis\")\n+        \n+        # Store original dataLim\n+        original_datalim = self.dataLim.frozen()\n+        \n         ss = self.get_subplotspec()\n         if ss:\n             twin = self.figure.add_subplot(ss, *args, **kwargs)\n@@ -4408,9 +4412,15 @@ class _AxesBase(martist.Artist):\n                 self.get_position(True), *args, **kwargs,\n                 axes_locator=_TransformedBoundsLocator(\n                     [0, 0, 1, 1], self.transAxes))\n-        self.set_adjustable('datalim')\n-        twin.set_adjustable('datalim')\n+        \n+        # Join the axes before setting adjustable to preserve transforms\n         self._twinned_axes.join(self, twin)\n+        \n+        # Set adjustable after joining to avoid transform issues\n+        twin.set_adjustable('datalim')\n+        \n+        # Restore original dataLim\n+        self.dataLim.set(original_datalim)\n         return twin\n \n     def twinx(self):\n"}
{"instance_id":"matplotlib__matplotlib-26291","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 13af941552..7725fa10b2 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -395,7 +395,11 @@ class OffsetBox(martist.Artist):\n     def get_window_extent(self, renderer=None):\n         # docstring inherited\n         if renderer is None:\n+            if self.figure is None or not hasattr(self.figure, '_get_renderer'):\n+                return Bbox.from_bounds(0, 0, 0, 0)\n             renderer = self.figure._get_renderer()\n+            if renderer is None:\n+                return Bbox.from_bounds(0, 0, 0, 0)\n         bbox = self.get_bbox(renderer)\n         try:  # Some subclasses redefine get_offset to take no args.\n             px, py = self.get_offset(bbox, renderer)\n"}
{"instance_id":"matplotlib__matplotlib-26342","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 3f84250b64..07096b7b5d 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -994,6 +994,18 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n         state['_contour_generator'] = None\n         return state\n \n+    def set_paths(self, paths):\n+        \"\"\"\n+        Set the contour paths.\n+\n+        Parameters\n+        ----------\n+        paths : list of `~matplotlib.path.Path`\n+            The new contour paths.\n+        \"\"\"\n+        self._paths = paths\n+        self.stale = True\n+\n     def legend_elements(self, variable_name='x', str_format=str):\n         \"\"\"\n         Return a list of artists and labels suitable for passing through\n"}
{"instance_id":"matplotlib__matplotlib-26466","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..ad4e9873ce 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1456,7 +1456,8 @@ class _AnnotationBase:\n                  xycoords='data',\n                  annotation_clip=None):\n \n-        self.xy = xy\n+        import numpy as np\n+        self.xy = np.asarray(xy).copy()  # Make a copy to prevent external modifications\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n \n"}
{"instance_id":"mwaskom__seaborn-3069","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..a78995d0 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1631,10 +1631,27 @@ class Plotter:\n             ax = sub[\"ax\"]\n             for axis in \"xy\":\n                 axis_key = sub[axis]\n+                axis_obj = getattr(ax, f\"{axis}axis\")\n \n-                # Axis limits\n+                # Handle nominal scale behaviors\n+                if axis_key in self._scales:\n+                    scale = self._scales[axis_key]\n+                    if isinstance(scale, Scale) and hasattr(scale, \"_matplotlib_scale\"):\n+                        if scale._matplotlib_scale.name == \"category\":\n+                            # Suppress grid for nominal scales\n+                            ax.grid(False, axis=axis)\n+                            \n+                            # Invert y axis for vertical nominal scales\n+                            if axis == \"y\":\n+                                ax.invert_yaxis()\n+                            \n+                            # Extend limits by 0.5 on each side\n+                            vmin, vmax = axis_obj.get_data_interval()\n+                            axis_obj.set_view_interval(vmin - 0.5, vmax + 0.5)\n+\n+                # Axis limits from user specification\n                 if axis_key in p._limits:\n-                    convert_units = getattr(ax, f\"{axis}axis\").convert_units\n+                    convert_units = axis_obj.convert_units\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n"}
{"instance_id":"mwaskom__seaborn-3187","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..a24c1c92 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -378,7 +378,18 @@ class ContinuousBase(Scale):\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n-            labels = axis.major.formatter.format_ticks(locs)\n+            formatter = axis.major.formatter\n+            \n+            # Format the ticks first to trigger offset calculation\n+            formatter.format_ticks(locs)\n+            \n+            # For ScalarFormatter, handle the offset properly\n+            if hasattr(formatter, 'get_offset') and formatter.get_offset():\n+                offset = float(formatter.get_offset().replace('×', '').replace('10', 'e'))\n+                labels = [f\"{loc * offset:g}\" for loc in locs]\n+            else:\n+                labels = formatter.format_ticks(locs)\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n"}
{"instance_id":"pallets__flask-5014","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex eb50585d..45134b2b 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -192,6 +192,8 @@ class Blueprint(Scaffold):\n \n         if \".\" in name:\n             raise ValueError(\"'name' may not contain a dot '.' character.\")\n+        if not name:\n+            raise ValueError(\"'name' may not be empty.\")\n \n         self.name = name\n         self.url_prefix = url_prefix\n"}
{"instance_id":"psf__requests-1142","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/models.py b/requests/models.py\nindex 99260453..0c99e5dd 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -386,7 +386,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.body = body\n \n     def prepare_content_length(self, body):\n-        self.headers['Content-Length'] = '0'\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n             self.headers['Content-Length'] = str(body.tell())\n"}
{"instance_id":"psf__requests-1724","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/models.py b/requests/models.py\nindex f82f56a3..444cd347 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -307,6 +307,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP method.\"\"\"\n         self.method = method\n         if self.method is not None:\n+            if isinstance(self.method, unicode):\n+                self.method = self.method.encode('ascii')\n             self.method = self.method.upper()\n \n     def prepare_url(self, url, params):\n"}
{"instance_id":"psf__requests-1766","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/auth.py b/requests/auth.py\nindex a3de123d..48416e5f 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -144,7 +144,7 @@ class HTTPDigestAuth(AuthBase):\n         if entdig:\n             base += ', digest=\"%s\"' % entdig\n         if qop:\n-            base += ', qop=auth, nc=%s, cnonce=\"%s\"' % (ncvalue, cnonce)\n+            base += ', qop=\"auth\", nc=%s, cnonce=\"%s\"' % (ncvalue, cnonce)\n \n         return 'Digest %s' % (base)\n \n"}
{"instance_id":"psf__requests-1921","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/structures.py b/requests/structures.py\nindex a1759137..1ef2ab0f 100644\n--- a/requests/structures.py\n+++ b/requests/structures.py\n@@ -71,7 +71,11 @@ class CaseInsensitiveDict(collections.MutableMapping):\n     def __setitem__(self, key, value):\n         # Use the lowercased key for lookups, but store the actual\n         # key alongside the value.\n-        self._store[key.lower()] = (key, value)\n+        if value is None:\n+            # If value is None, remove the key\n+            self._store.pop(key.lower(), None)\n+        else:\n+            self._store[key.lower()] = (key, value)\n \n     def __getitem__(self, key):\n         return self._store[key.lower()][1]\n"}
{"instance_id":"psf__requests-2317","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/sessions.py b/requests/sessions.py\nindex d701ff2e..96021770 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -425,7 +425,11 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n-        method = builtin_str(method)\n+        # Handle both binary and string methods\n+        if isinstance(method, bytes):\n+            method = method.decode('ascii')\n+        else:\n+            method = str(method)\n \n         # Create the Request.\n         req = Request(\n"}
{"instance_id":"psf__requests-2931","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/models.py b/requests/models.py\nindex 9c624d3c..157e2b54 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -80,7 +80,9 @@ class RequestEncodingMixin(object):\n         if parameters are supplied as a dict.\n         \"\"\"\n \n-        if isinstance(data, (str, bytes)):\n+        if isinstance(data, bytes):\n+            return data\n+        elif isinstance(data, str):\n             return to_native_string(data)\n         elif hasattr(data, 'read'):\n             return data\n"}
{"instance_id":"psf__requests-5414","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/models.py b/requests/models.py\nindex e7d292d5..22598888 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -350,11 +350,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     @staticmethod\n     def _get_idna_encoded_host(host):\n         import idna\n+        from .exceptions import InvalidURL\n \n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except idna.IDNAError:\n-            raise UnicodeError\n+            raise InvalidURL('URL has an invalid label')\n         return host\n \n     def prepare_url(self, url, params):\n"}
{"instance_id":"psf__requests-6028","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/requests/auth.py b/requests/auth.py\nindex eeface39..2c46dd71 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -57,10 +57,16 @@ def _basic_auth_str(username, password):\n     # -- End Removal --\n \n     if isinstance(username, str):\n-        username = username.encode('latin1')\n+        try:\n+            username = username.encode('latin1')\n+        except UnicodeEncodeError:\n+            username = username.encode('utf-8')\n \n     if isinstance(password, str):\n-        password = password.encode('latin1')\n+        try:\n+            password = password.encode('latin1')\n+        except UnicodeEncodeError:\n+            password = password.encode('utf-8')\n \n     authstr = 'Basic ' + to_native_string(\n         b64encode(b':'.join((username, password))).strip()\n"}
{"instance_id":"pydata__xarray-2905","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 45553eb9..f38ab474 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -855,7 +855,13 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n+            # Special case: if we're assigning to an object dtype array and the value\n+            # is a single object (not an array/sequence), preserve it without coercion\n+            if (self.dtype == np.dtype('O') and \n+                not isinstance(value, (np.ndarray, list, tuple))):\n+                value = np.array(value, dtype=object)\n+            else:\n+                value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError(\n                     \"shape mismatch: value array of shape %s could not be \"\n"}
{"instance_id":"pydata__xarray-3095","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 379be8f5..f93fa61b 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1947,16 +1947,17 @@ class IndexVariable(Variable):\n                 # point, which doesn't have a copy method, so make a deep copy\n                 # of the underlying `pandas.MultiIndex` and create a new\n                 # `PandasIndexAdapter` instance with it.\n-                data = PandasIndexAdapter(self._data.array.copy(deep=True))\n+                orig_dtype = self._data.dtype\n+                data = PandasIndexAdapter(self._data.array.copy(deep=True), dtype=orig_dtype)\n             else:\n                 data = self._data\n         else:\n             data = as_compatible_data(data)\n             if self.shape != data.shape:\n                 raise ValueError(\"Data shape {} must match shape of object {}\"\n-                                 .format(data.shape, self.shape))\n+                                .format(data.shape, self.shape))\n         return type(self)(self.dims, data, self._attrs,\n-                          self._encoding, fastpath=True)\n+                         self._encoding, fastpath=True)\n \n     def equals(self, other, equiv=None):\n         # if equiv is specified, super up\n"}
{"instance_id":"pydata__xarray-3151","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903b..3a41c38e 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -501,7 +501,8 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                                    fill_value=fill_value)\n \n         # Check the overall coordinates are monotonically increasing\n-        for dim in concatenated.dims:\n+        # Only check dimensions that were actually concatenated\n+        for dim in concat_dims:\n             if dim in concatenated:\n                 indexes = concatenated.indexes.get(dim)\n                 if not (indexes.is_monotonic_increasing\n"}
{"instance_id":"pydata__xarray-3305","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex d6f0da42..f2362c5d 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4768,7 +4768,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                             # the former is often more efficient\n                             reduce_dims = None\n                         variables[name] = var.quantile(\n-                            q, dim=reduce_dims, interpolation=interpolation\n+                            q, dim=reduce_dims, interpolation=interpolation,\n+                            keep_attrs=keep_attrs\n                         )\n \n             else:\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 2e9906ce..f5d305f3 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1592,7 +1592,7 @@ class Variable(\n         \"\"\"\n         return self.broadcast_equals(other, equiv=duck_array_ops.array_notnull_equiv)\n \n-    def quantile(self, q, dim=None, interpolation=\"linear\"):\n+    def quantile(self, q, dim=None, interpolation=\"linear\", keep_attrs=None):\n         \"\"\"Compute the qth quantile of the data along the specified dimension.\n \n         Returns the qth quantiles(s) of the array elements.\n@@ -1608,6 +1608,9 @@ class Variable(\n             This optional parameter specifies the interpolation method to\n             use when the desired quantile lies between two data points\n             ``i < j``:\n+        keep_attrs : bool, optional\n+            If True, the variable's attributes (`attrs`) will be copied from\n+            the original object to the new one.\n                 * linear: ``i + (j - i) * fraction``, where ``fraction`` is\n                   the fractional part of the index surrounded by ``i`` and\n                   ``j``.\n@@ -1658,7 +1661,10 @@ class Variable(\n         qs = np.nanpercentile(\n             self.data, q * 100.0, axis=axis, interpolation=interpolation\n         )\n-        return Variable(new_dims, qs)\n+        result = Variable(new_dims, qs)\n+        if keep_attrs:\n+            result.attrs = self.attrs\n+        return result\n \n     def rank(self, dim, pct=False):\n         \"\"\"Ranks the data.\n"}
{"instance_id":"pydata__xarray-3677","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex ac0a923d..10d4def7 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3604,6 +3604,11 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             If any variables conflict (see ``compat``).\n         \"\"\"\n         _check_inplace(inplace)\n+        from xarray.core.dataarray import DataArray\n+        if isinstance(other, DataArray):\n+            if other.name is None:\n+                raise ValueError(\"DataArray without a name cannot be merged into a Dataset\")\n+            other = other.to_dataset()\n         merge_result = dataset_merge_method(\n             self,\n             other,\n"}
{"instance_id":"pydata__xarray-3993","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 2fef3edb..a2425d17 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3481,17 +3481,17 @@ class DataArray(AbstractArray, DataWithCoords):\n         return self._from_temp_dataset(ds)\n \n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None, **kwargs\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n         .. note::\n-            This feature is limited to simple cartesian geometry, i.e. dim\n+            This feature is limited to simple cartesian geometry, i.e. coord\n             must be one dimensional.\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3528,7 +3528,20 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+        if 'dim' in kwargs:\n+            import warnings\n+            warnings.warn(\n+                \"The `dim` argument has been deprecated and will be removed in \"\n+                \"a future version. Use `coord` instead.\",\n+                DeprecationWarning,\n+                stacklevel=2\n+            )\n+            if coord is not None:\n+                raise ValueError(\"Cannot specify both `dim` and `coord`\")\n+            coord = kwargs.pop('dim')\n+        if kwargs:\n+            raise TypeError(f\"Unexpected keyword arguments: {list(kwargs.keys())}\")\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n"}
{"instance_id":"pydata__xarray-4075","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 996d2e4c..8a7cd6ca 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -141,8 +141,11 @@ class Weighted:\n \n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n+        \n+        # Convert boolean weights to numeric to ensure proper arithmetic operations\n+        weights = self.weights * 1 if self.weights.dtype == bool else self.weights\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n"}
{"instance_id":"pydata__xarray-4094","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..c14d5f1f 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k}, drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\n"}
{"instance_id":"pydata__xarray-4356","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py\nindex 41c8d258..760d0494 100644\n--- a/xarray/core/nanops.py\n+++ b/xarray/core/nanops.py\n@@ -26,13 +26,15 @@ def _maybe_null_out(result, axis, mask, min_count=1):\n     \"\"\"\n     xarray version of pandas.core.nanops._maybe_null_out\n     \"\"\"\n-    if hasattr(axis, \"__len__\"):  # if tuple or list\n-        raise ValueError(\n-            \"min_count is not available for reduction with more than one dimensions.\"\n-        )\n-\n     if axis is not None and getattr(result, \"ndim\", False):\n-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n+        if hasattr(axis, \"__len__\"):  # if tuple or list\n+            # Calculate total elements and sum across all specified dimensions\n+            total_elements = np.prod([mask.shape[ax] for ax in axis])\n+            valid_elements = mask.sum(axis=axis)\n+            null_mask = (total_elements - valid_elements - min_count) < 0\n+        else:\n+            null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n+            \n         if null_mask.any():\n             dtype, fill_value = dtypes.maybe_promote(result.dtype)\n             result = result.astype(dtype)\n"}
{"instance_id":"pydata__xarray-4629","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex ca4e29b6..dff00804 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -501,7 +501,7 @@ def merge_attrs(variable_attrs, combine_attrs):\n     if combine_attrs == \"drop\":\n         return {}\n     elif combine_attrs == \"override\":\n-        return variable_attrs[0]\n+        return dict(variable_attrs[0])\n     elif combine_attrs == \"no_conflicts\":\n         result = dict(variable_attrs[0])\n         for attrs in variable_attrs[1:]:\n"}
{"instance_id":"pydata__xarray-4687","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 9fe93c88..b44b8da8 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1727,7 +1727,7 @@ def dot(*arrays, dims=None, **kwargs):\n     return result.transpose(*all_dims, missing_dims=\"ignore\")\n \n \n-def where(cond, x, y):\n+def where(cond, x, y, keep_attrs=True):\n     \"\"\"Return elements from `x` or `y` depending on `cond`.\n \n     Performs xarray-like broadcasting across input arguments.\n@@ -1743,6 +1743,8 @@ def where(cond, x, y):\n         values to choose from where `cond` is True\n     y : scalar, array, Variable, DataArray or Dataset\n         values to choose from where `cond` is False\n+    keep_attrs : bool, optional\n+        If True, preserve attributes from x when possible. Default is True.\n \n     Returns\n     -------\n@@ -1817,6 +1819,7 @@ def where(cond, x, y):\n         join=\"exact\",\n         dataset_join=\"exact\",\n         dask=\"allowed\",\n+        keep_attrs=keep_attrs,\n     )\n \n \n"}
{"instance_id":"pydata__xarray-4695","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 843feb04..72d59469 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -188,7 +188,13 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n                     )\n                 indexer = index.get_loc(label_value)\n             else:\n-                indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n+                # Only pass method/tolerance when doing interpolation lookups\n+                kwargs = {}\n+                if method is not None and method in ['pad', 'backfill', 'nearest']:\n+                    kwargs['method'] = method\n+                    if tolerance is not None:\n+                        kwargs['tolerance'] = tolerance\n+                indexer = index.get_loc(label_value, **kwargs)\n         elif label.dtype.kind == \"b\":\n             indexer = label\n         else:\n"}
{"instance_id":"pydata__xarray-4966","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py\nindex b035ff82..938752c4 100644\n--- a/xarray/coding/variables.py\n+++ b/xarray/coding/variables.py\n@@ -316,6 +316,14 @@ class UnsignedIntegerCoder(VariableCoder):\n                     if \"_FillValue\" in attrs:\n                         new_fill = unsigned_dtype.type(attrs[\"_FillValue\"])\n                         attrs[\"_FillValue\"] = new_fill\n+            elif data.dtype.kind == \"u\":\n+                if unsigned == \"false\":\n+                    signed_dtype = np.dtype(\"i%s\" % data.dtype.itemsize)\n+                    transform = partial(np.asarray, dtype=signed_dtype)\n+                    data = lazy_elemwise_func(data, transform, signed_dtype)\n+                    if \"_FillValue\" in attrs:\n+                        new_fill = signed_dtype.type(attrs[\"_FillValue\"])\n+                        attrs[\"_FillValue\"] = new_fill\n             else:\n                 warnings.warn(\n                     \"variable %r has _Unsigned attribute but is not \"\n"}
{"instance_id":"pydata__xarray-6461","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 7676d8e5..35b10120 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1829,7 +1829,12 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: attrs[1]\n+        # fall back to condition's attributes if x is a scalar\n+        def _keep_attrs(attrs, context):\n+            if len(attrs) > 1 and attrs[1] is not None:\n+                return attrs[1]\n+            return attrs[0] if attrs else None\n+        keep_attrs = _keep_attrs\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n"}
{"instance_id":"pydata__xarray-6599","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..1a287243 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1933,7 +1933,7 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+        if x.dtype.kind == \"M\":\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1941,10 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":\n+            return x.copy(\n+                data=x.data.astype(\"timedelta64[ns]\").astype(np.float64)\n+            )\n         return x\n \n     if isinstance(data, Dataset):\n"}
{"instance_id":"pydata__xarray-6721","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 2d115ff0..947e438c 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1014,7 +1014,11 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):\n         Variable.chunks\n         xarray.unify_chunks\n         \"\"\"\n-        if hasattr(self._data, \"chunks\"):\n+        # First try to get chunks from encoding to avoid loading data\n+        if hasattr(self, 'encoding') and 'chunks' in self.encoding and self.encoding['chunks'] is not None:\n+            return Frozen({dim: c for dim, c in zip(self.dims, self.encoding['chunks'])})\n+        # Fall back to checking data.chunks\n+        elif hasattr(self._data, \"chunks\"):\n             return Frozen({dim: c for dim, c in zip(self.dims, self.data.chunks)})\n         else:\n             return {}\n"}
{"instance_id":"pydata__xarray-6744","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex aef290f6..33ea4a35 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,9 +270,28 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n+        \n+        window_size = int(self.window[0])\n+        array_size = len(self.window_labels)\n+        \n+        if self.center:\n+            # For centered windows:\n+            # - First w//2 positions: partial windows causing NaN\n+            # - Middle positions: full windows centered on current position\n+            # - Last w//2 positions: partial windows causing NaN\n+            radius = window_size // 2\n+            starts = np.arange(array_size) - radius\n+            stops = starts + window_size\n+        else:\n+            # Original behavior for non-centered windows\n+            stops = np.arange(1, array_size + 1)\n+            starts = stops - window_size\n+            starts[: window_size] = 0\n+            \n+        # Ensure we don't go out of bounds\n+        starts = np.maximum(starts, 0)\n+        stops = np.minimum(stops, array_size)\n+        \n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n"}
{"instance_id":"pydata__xarray-6938","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c775d05c..bc7bb438 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3772,7 +3772,7 @@ class Dataset(\n         for k, v in self.variables.items():\n             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)\n             if k in result_dims:\n-                var = v.to_index_variable()\n+                var = v.to_index_variable().copy(deep=True)\n                 var.dims = dims\n                 if k in self._indexes:\n                     indexes[k] = self._indexes[k]\n@@ -3783,7 +3783,7 @@ class Dataset(\n                     variables.update(index_vars)\n                     coord_names.update(index_vars)\n             else:\n-                var = v.to_base_variable()\n+                var = v.to_base_variable().copy(deep=True)\n                 var.dims = dims\n                 variables[k] = var\n \n"}
{"instance_id":"pydata__xarray-6992","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 620f32f8..f5a1ea50 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4177,7 +4177,7 @@ class Dataset(\n         }\n         variables.update(new_variables)\n \n-        coord_names = set(new_variables) | self._coord_names\n+        coord_names = (self._coord_names - set(drop_variables)) | set(new_variables)\n \n         return self._replace(variables, coord_names=coord_names, indexes=indexes)\n \n"}
{"instance_id":"pydata__xarray-7229","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..aaa489a7 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1860,7 +1860,13 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        def _keep_attrs(attrs, context):\n+            # For coordinates, preserve their original attributes\n+            if hasattr(x, 'coords') and any(attrs == coord.attrs for coord in x.coords.values()):\n+                return attrs\n+            # For variables, use x's attributes\n+            return getattr(x, \"attrs\", {})\n+        keep_attrs = _keep_attrs\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n"}
{"instance_id":"pydata__xarray-7233","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex c194ec08..a4eeecab 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -973,8 +973,8 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):\n             else:\n                 reshaped[key] = var\n \n-        should_be_coords = set(window_dim) & set(self.obj.coords)\n-        result = reshaped.set_coords(should_be_coords)\n+        # Preserve all original coordinates\n+        result = reshaped.set_coords(obj.coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n         else:\n"}
{"instance_id":"pydata__xarray-7393","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 3d4bf0a9..ea508bef 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4538,6 +4538,10 @@ class Dataset(\n                 new_indexes[new_dim] = idx\n                 new_indexes.update({k: idx for k in product_vars})\n                 idx_vars = idx.create_variables(product_vars)\n+                # Preserve original dtypes from product variables\n+                for k, var in idx_vars.items():\n+                    if k in product_vars:\n+                        idx_vars[k] = var.astype(product_vars[k].dtype)\n                 # keep consistent multi-index coordinate order\n                 for k in idx_vars:\n                     new_variables.pop(k, None)\n"}
{"instance_id":"pylint-dev__pylint-4551","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 8fa122022..a481000a1 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -166,6 +166,18 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             for assignattr in assignattrs:\n                 if not isinstance(assignattr, astroid.Unknown):\n                     self.handle_assignattr_type(assignattr, node)\n+        \n+        # Handle type hints from __init__ parameters that become instance attributes\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        if init_method:\n+            for arg in init_method.args.arguments[1:]:  # Skip 'self'\n+                if arg.name in node.instance_attrs and hasattr(arg, 'annotation'):\n+                    if arg.annotation:\n+                        type_name = arg.annotation.as_string()\n+                        # Clean up the type name (remove quotes if present)\n+                        type_name = type_name.strip(\"'\").strip('\"')\n+                        node.instance_attrs_type[arg.name].append(type_name)\n+\n         # resolve implemented interface\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n"}
{"instance_id":"pylint-dev__pylint-4604","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..12016f193 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2050,6 +2050,15 @@ class VariablesChecker(BaseChecker):\n \n                     if as_name == \"_\":\n                         continue\n+                    \n+                    # Check if import is used in type comments\n+                    name_in_type_comments = any(\n+                        imported_name in comment.value\n+                        for comment in stmt.parent.type_comments\n+                    )\n+                    if name_in_type_comments:\n+                        continue\n+                        \n                     if as_name is None:\n                         msg = \"import %s\" % imported_name\n                     else:\n@@ -2074,6 +2083,14 @@ class VariablesChecker(BaseChecker):\n                     if imported_name == \"*\":\n                         self.add_message(\"unused-wildcard-import\", args=name, node=stmt)\n                     else:\n+                        # Check if import is used in type comments\n+                        name_in_type_comments = any(\n+                            imported_name in comment.value\n+                            for comment in stmt.parent.type_comments\n+                        )\n+                        if name_in_type_comments:\n+                            continue\n+                            \n                         if as_name is None:\n                             msg = f\"{imported_name} imported from {stmt.modname}\"\n                         else:\n"}
{"instance_id":"pylint-dev__pylint-4661","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py\nindex 84774d0e3..665b60632 100644\n--- a/pylint/config/__init__.py\n+++ b/pylint/config/__init__.py\n@@ -60,10 +60,9 @@ if \"PYLINTHOME\" in os.environ:\n     PYLINT_HOME = os.environ[\"PYLINTHOME\"]\n     if USER_HOME == \"~\":\n         USER_HOME = os.path.dirname(PYLINT_HOME)\n-elif USER_HOME == \"~\":\n-    PYLINT_HOME = \".pylint.d\"\n else:\n-    PYLINT_HOME = os.path.join(USER_HOME, \".pylint.d\")\n+    xdg_data_home = os.environ.get(\"XDG_DATA_HOME\", os.path.join(USER_HOME, \".local\", \"share\"))\n+    PYLINT_HOME = os.path.join(xdg_data_home, \"pylint\")\n \n \n def _get_pdata_path(base_name, recurs):\n@@ -110,11 +109,12 @@ ENV_HELP = (\n The following environment variables are used:\n     * PYLINTHOME\n     Path to the directory where persistent data for the run will be stored. If\n-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working\n-directory).\n+not found, it defaults to $XDG_DATA_HOME/pylint (usually ~/.local/share/pylint).\n     * PYLINTRC\n     Path to the configuration file. See the documentation for the method used\n to search for configuration file.\n+    * XDG_DATA_HOME\n+    Base directory for user-specific data files. Defaults to ~/.local/share.\n \"\"\"\n     % globals()  # type: ignore\n )\n"}
{"instance_id":"pylint-dev__pylint-4970","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex c65b1c893..ba65b2a11 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -531,6 +531,8 @@ class Similar:\n         \"\"\"iterate on similarities among all files, by making a cartesian\n         product\n         \"\"\"\n+        if self.min_lines == 0:\n+            return\n         for idx, lineset in enumerate(self.linesets[:-1]):\n             for lineset2 in self.linesets[idx + 1 :]:\n                 yield from self._find_common(lineset, lineset2)\n"}
{"instance_id":"pylint-dev__pylint-6386","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py\nindex c793cc85a..e3c287da4 100644\n--- a/pylint/lint/base_options.py\n+++ b/pylint/lint/base_options.py\n@@ -538,7 +538,7 @@ def _make_run_options(self: Run) -> Options:\n         (\n             \"verbose\",\n             {\n-                \"action\": _DoNothingAction,\n+                \"action\": \"store_true\",\n                 \"kwargs\": {},\n                 \"short\": \"v\",\n                 \"help\": \"In verbose mode, extra non-checker-related info \"\n"}
{"instance_id":"pylint-dev__pylint-6528","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..000b92cb7 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -564,32 +564,43 @@ class PyLinter(\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n+        Respects ignore patterns configured in Pylint.\n         \"\"\"\n         for something in files_or_modules:\n             if os.path.isdir(something) and not os.path.isfile(\n                 os.path.join(something, \"__init__.py\")\n             ):\n                 skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n+                for root, dirs, files in os.walk(something):\n+                    # Remove ignored directories to prevent traversing them\n+                    dirs[:] = [\n+                        d for d in dirs\n+                        if self.should_analyze_file(d, os.path.join(root, d))\n+                    ]\n+\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+\n                     if \"__init__.py\" in files:\n-                        skip_subtrees.append(root)\n-                        yield root\n+                        if self.should_analyze_file(os.path.basename(root), root):\n+                            skip_subtrees.append(root)\n+                            yield root\n                     else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        for file in files:\n+                            if not file.endswith(\".py\"):\n+                                continue\n+                            path = os.path.join(root, file)\n+                            if self.should_analyze_file(file, path):\n+                                yield path\n             else:\n-                yield something\n+                base = os.path.basename(something)\n+                if self.should_analyze_file(base, something):\n+                    yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n"}
{"instance_id":"pylint-dev__pylint-6903","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex a7e5d5574..dfcec7eac 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -56,8 +56,8 @@ def _query_cpu() -> int | None:\n     elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n         with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n             cpu_shares = int(file.read().rstrip())\n-        # For AWS, gives correct value * 1024.\n-        avail_cpu = int(cpu_shares / 1024)\n+        # For AWS, gives correct value * 1024. Ensure at least 1 CPU.\n+        avail_cpu = max(1, int(cpu_shares / 1024))\n     return avail_cpu\n \n \n"}
{"instance_id":"pylint-dev__pylint-7080","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 5cacc0371..a90e460a4 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -53,10 +53,12 @@ def _is_ignored_file(\n     ignore_list_paths_re: list[Pattern[str]],\n ) -> bool:\n     basename = os.path.basename(element)\n+    # Normalize path to use forward slashes for consistent pattern matching\n+    normalized_path = os.path.normpath(element).replace(os.sep, '/')\n     return (\n         basename in ignore_list\n         or _is_in_ignore_list_re(basename, ignore_list_re)\n-        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n+        or _is_in_ignore_list_re(normalized_path, ignore_list_paths_re)\n     )\n \n \ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..cb2e47bab 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -598,7 +598,7 @@ class PyLinter(\n                         continue\n \n                     if _is_ignored_file(\n-                        root,\n+                        os.path.normpath(root),\n                         self.config.ignore,\n                         self.config.ignore_patterns,\n                         self.config.ignore_paths,\n"}
{"instance_id":"pylint-dev__pylint-7277","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 9f3dd74e6..f22258e29 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,7 +96,9 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+    first_path = sys.path[0] if sys.path else \"\"\n+    if first_path in (\"\", \".\", os.getcwd()):\n+        sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n"}
{"instance_id":"pylint-dev__pylint-8898","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/pylint/checkers/base/name_checker/checker.py b/pylint/checkers/base/name_checker/checker.py\nindex 42a7c6b2e..a55693232 100644\n--- a/pylint/checkers/base/name_checker/checker.py\n+++ b/pylint/checkers/base/name_checker/checker.py\n@@ -229,10 +229,10 @@ class NameChecker(_BasicChecker):\n             \"bad-names-rgxs\",\n             {\n                 \"default\": \"\",\n-                \"type\": \"regexp_csv\",\n+                \"type\": \"regexp\",\n                 \"metavar\": \"<names>\",\n-                \"help\": \"Bad variable names regexes, separated by a comma. If names match any regex,\"\n-                \" they will always be refused\",\n+                \"help\": \"Bad variable names regex pattern. Names matching this pattern will always be refused.\"\n+                \" Note: This is a single regex pattern, not a comma-separated list.\",\n             },\n         ),\n         (\n"}
{"instance_id":"pytest-dev__pytest-10051","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..ff097a692 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -441,6 +441,10 @@ class LogCaptureFixture:\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n+        if hasattr(self, \"_item\"):\n+            self._item.stash[caplog_records_key][\"call\"] = []\n+            self._item.stash[caplog_records_key][\"setup\"] = []\n+            self._item.stash[caplog_records_key][\"teardown\"] = []\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n"}
{"instance_id":"pytest-dev__pytest-10081","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 851e4943b..1bea073c4 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -316,7 +316,7 @@ class TestCaseFunction(Function):\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\n-            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n+            if self.config.getoption(\"usepdb\") and not (_is_skipped(self.obj) or getattr(self._testcase.__class__, \"__unittest_skip__\", False)):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n"}
{"instance_id":"pytest-dev__pytest-10356","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex 800a25c92..38c288aeb 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -357,9 +357,21 @@ class MarkDecorator:\n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n     \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    mark_list = []\n+    if isinstance(obj, type):\n+        # For classes, collect marks from the entire MRO chain\n+        for cls in reversed(obj.__mro__):\n+            cls_marks = getattr(cls, \"pytestmark\", [])\n+            if cls_marks:\n+                if not isinstance(cls_marks, list):\n+                    cls_marks = [cls_marks]\n+                mark_list.extend(cls_marks)\n+    else:\n+        # For non-class objects, get marks directly\n+        direct_marks = getattr(obj, \"pytestmark\", [])\n+        if not isinstance(direct_marks, list):\n+            direct_marks = [direct_marks]\n+        mark_list.extend(direct_marks)\n     return normalize_mark_list(mark_list)\n \n \n"}
{"instance_id":"pytest-dev__pytest-5262","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 25eab7fdf..b462172ec 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -447,6 +447,11 @@ class EncodedFile(object):\n         \"\"\"Ensure that file.name is a string.\"\"\"\n         return repr(self.buffer)\n \n+    @property\n+    def mode(self):\n+        \"\"\"Return the mode without 'b' since this wrapper does not support bytes.\"\"\"\n+        return getattr(self.buffer, 'mode', '').replace('b', '')\n+\n     def __getattr__(self, name):\n         return getattr(object.__getattribute__(self, \"buffer\"), name)\n \n"}
{"instance_id":"pytest-dev__pytest-5631","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex d238061b4..7f7f99f25 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -68,8 +68,10 @@ def num_mock_patch_args(function):\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n         return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n-        )\n+                [p for p in patchings if not p.attribute_name and (\n+                    any(p.new is s for s in sentinels)  # Handle both array and non-array cases\n+                )]\n+            )\n     return len(patchings)\n \n \n"}
{"instance_id":"pytest-dev__pytest-5787","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..c7f5ba94c 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -177,6 +177,19 @@ class BaseReport:\n                 new_entries.append(entry_data)\n \n             reprtraceback[\"reprentries\"] = new_entries\n+            \n+            # Capture exception chain information\n+            if hasattr(rep.longrepr, \"chain\"):\n+                chain_data = []\n+                for excinfo in rep.longrepr.chain:\n+                    exc_dict = excinfo.__dict__.copy()\n+                    # Store the type of chaining (__cause__ or __context__)\n+                    if excinfo.value.__cause__ is not None:\n+                        exc_dict[\"chaining\"] = \"cause\"\n+                    elif excinfo.value.__context__ is not None:\n+                        exc_dict[\"chaining\"] = \"context\"\n+                    chain_data.append(exc_dict)\n+                reprtraceback[\"chain\"] = chain_data\n \n             return {\n                 \"reprcrash\": reprcrash,\n@@ -255,6 +268,17 @@ class BaseReport:\n                     reprcrash=ReprFileLocation(**reprcrash),\n                 )\n \n+                # Reconstruct exception chain if present\n+                if \"chain\" in reprtraceback:\n+                    chain = []\n+                    for exc_data in reprtraceback[\"chain\"]:\n+                        exc_info = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**exc_data),\n+                            reprcrash=ReprFileLocation(**exc_data.get(\"reprcrash\", {})),\n+                        )\n+                        chain.append(exc_info)\n+                    exception_info.chain = chain\n+\n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n                 reportdict[\"longrepr\"] = exception_info\n"}
{"instance_id":"pytest-dev__pytest-5809","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/pastebin.py b/src/_pytest/pastebin.py\nindex 41576a615..79b0d9d40 100644\n--- a/src/_pytest/pastebin.py\n+++ b/src/_pytest/pastebin.py\n@@ -79,7 +79,7 @@ def create_new_paste(contents):\n \n     params = {\n         \"code\": contents,\n-        \"lexer\": \"python3\" if sys.version_info[0] >= 3 else \"python\",\n+        \"lexer\": \"text\",\n         \"expiry\": \"1week\",\n     }\n     url = \"https://bpaste.net\"\n"}
{"instance_id":"pytest-dev__pytest-5840","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..d49e0dfd7 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -435,12 +435,36 @@ class PytestPluginManager(PluginManager):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\n         # symlinks to actual files.\n+        import os\n+        import sys\n+        \n         conftestpath = unique_path(conftestpath)\n         try:\n             return self._conftestpath2mod[conftestpath]\n         except KeyError:\n             pkgpath = conftestpath.pypkgpath()\n             if pkgpath is None:\n+                # On Windows, ensure we use the actual case from filesystem\n+                if sys.platform.startswith('win'):\n+                    real_path = os.path.dirname(str(conftestpath))\n+                    while real_path:\n+                        parent = os.path.dirname(real_path)\n+                        if not parent or parent == real_path:\n+                            break\n+                        base = os.path.basename(real_path)\n+                        # Get the actual case from the filesystem\n+                        try:\n+                            actual_names = os.listdir(parent)\n+                            for name in actual_names:\n+                                if name.lower() == base.lower():\n+                                    # Update sys.path with correct casing\n+                                    if parent in sys.path:\n+                                        sys.path.remove(parent)\n+                                        sys.path.insert(0, os.path.join(parent, name))\n+                                    break\n+                        except OSError:\n+                            pass\n+                        real_path = parent\n                 _ensure_removed_sysmodule(conftestpath.purebasename)\n             try:\n                 mod = conftestpath.pyimport()\n"}
{"instance_id":"pytest-dev__pytest-6197","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 306e5f217..da35058a4 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -645,7 +645,15 @@ class Package(Module):\n         if init_module.check(file=1) and path_matches_patterns(\n             init_module, self.config.getini(\"python_files\")\n         ):\n-            yield Module(init_module, self)\n+            try:\n+                import importlib.util\n+                spec = importlib.util.spec_from_file_location(\"__init__\", str(init_module))\n+                if spec is not None:\n+                    module = importlib.util.module_from_spec(spec)\n+                    spec.loader.exec_module(module)\n+                    yield Module(init_module, self)\n+            except ImportError:\n+                pass\n         pkg_prefixes = set()\n         for path in this_path.visit(rec=self._recurse, bf=True, sort=True):\n             # We will visit our own __init__.py file, in which case we skip it.\n"}
{"instance_id":"pytest-dev__pytest-6202","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex b8b365ad3..5f2af31e2 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -286,7 +286,7 @@ class PyobjMixin(PyobjContext):\n             parts.append(name)\n         parts.reverse()\n         s = \".\".join(parts)\n-        return s.replace(\".[\", \"[\")\n+        return s\n \n     def reportinfo(self):\n         # XXX caching?\n"}
{"instance_id":"pytest-dev__pytest-7205","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py\nindex c9cc589ff..f4dca76ce 100644\n--- a/src/_pytest/setuponly.py\n+++ b/src/_pytest/setuponly.py\n@@ -66,7 +66,8 @@ def _show_fixture_action(fixturedef, msg):\n             tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n \n     if hasattr(fixturedef, \"cached_param\"):\n-        tw.write(\"[{}]\".format(fixturedef.cached_param))\n+        from _pytest.util import saferepr\n+        tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param)))\n \n     tw.flush()\n \n"}
{"instance_id":"pytest-dev__pytest-7236","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545af..6f08ad6bf 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -214,13 +214,18 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n-            # when --pdb is given, we want to postpone calling tearDown() otherwise\n-            # when entering the pdb prompt, tearDown() would have probably cleaned up\n-            # instance variables, which makes it difficult to debug\n-            # arguably we could always postpone tearDown(), but this changes the moment where the\n-            # TestCase instance interacts with the results object, so better to only do it\n-            # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            # Check if test is skipped\n+            test_method = getattr(self._testcase, self.name)\n+            is_skipped = getattr(test_method, \"__unittest_skip__\", False) or getattr(self._testcase.__class__, \"__unittest_skip__\", False)\n+            \n+            if is_skipped:\n+                # For skipped tests, don't set up tearDown at all\n+                original_teardown = self._testcase.tearDown\n+                setattr(self._testcase, \"tearDown\", lambda *args: None)\n+            elif self.config.getoption(\"usepdb\"):\n+                # when --pdb is given, we want to postpone calling tearDown() otherwise\n+                # when entering the pdb prompt, tearDown() would have probably cleaned up\n+                # instance variables, which makes it difficult to debug\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n@@ -231,6 +236,9 @@ class TestCaseFunction(Function):\n                 self._testcase(result=self)\n             finally:\n                 delattr(self._testcase, self.name)\n+                if is_skipped:\n+                    # Restore original tearDown for skipped tests\n+                    setattr(self._testcase, \"tearDown\", original_teardown)\n \n     def _prunetraceback(self, excinfo):\n         Function._prunetraceback(self, excinfo)\n"}
{"instance_id":"pytest-dev__pytest-7324","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\nindex 04c73411a..128fdf3de 100644\n--- a/src/_pytest/mark/expression.py\n+++ b/src/_pytest/mark/expression.py\n@@ -161,6 +161,13 @@ def not_expr(s: Scanner) -> ast.expr:\n         return ret\n     ident = s.accept(TokenType.IDENT)\n     if ident:\n+        # Handle special constants\n+        if ident.value == 'True':\n+            return ast.Constant(value=True)\n+        elif ident.value == 'False':\n+            return ast.Constant(value=False)\n+        elif ident.value == 'None':\n+            return ast.Constant(value=None)\n         return ast.Name(ident.value, ast.Load())\n     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))\n \n"}
{"instance_id":"pytest-dev__pytest-7432","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..93c4d0b22 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -262,6 +262,21 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = yield\n     rep = outcome.get_result()\n     xfailed = item._store.get(xfailed_key, None)\n+    \n+    # Fix skip location before any other processing\n+    if (\n+        item._store.get(skipped_by_mark_key, True)\n+        and rep.skipped\n+        and type(rep.longrepr) is tuple\n+    ):\n+        # skipped by mark.skipif; change the location of the failure\n+        # to point to the item definition, otherwise it will display\n+        # the location of where the skip exception was raised within pytest\n+        _, _, reason = rep.longrepr\n+        filename, line = item.reportinfo()[:2]\n+        assert line is not None\n+        rep.longrepr = str(filename), line + 1, reason\n+    \n     # unittest special case, see setting of unexpectedsuccess_key\n     if unexpectedsuccess_key in item._store and rep.when == \"call\":\n         reason = item._store[unexpectedsuccess_key]\n"}
{"instance_id":"pytest-dev__pytest-7490","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 335e10996..d2d919c9f 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -261,6 +261,9 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = yield\n     rep = outcome.get_result()\n+    # Re-evaluate xfail marks to catch dynamically added ones\n+    if call.when == \"call\" and call.excinfo:\n+        item._store[xfailed_key] = evaluate_xfail_marks(item)\n     xfailed = item._store.get(xfailed_key, None)\n     # unittest special case, see setting of unexpectedsuccess_key\n     if unexpectedsuccess_key in item._store and rep.when == \"call\":\n"}
{"instance_id":"pytest-dev__pytest-7521","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 3f9c60fb9..b3007d135 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -478,7 +478,8 @@ class FDCapture(FDCaptureBinary):\n     def snap(self):\n         self._assert_state(\"snap\", (\"started\", \"suspended\"))\n         self.tmpfile.seek(0)\n-        res = self.tmpfile.read()\n+        # Read raw bytes and decode manually to preserve \\r\n+        res = self.tmpfile.buffer.read().decode(self.tmpfile.encoding, errors=self.tmpfile.errors)\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n         return res\n"}
{"instance_id":"pytest-dev__pytest-7571","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 11031f2f2..6bd35ee58 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -356,6 +356,10 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        \n+        # restore handler level\n+        if hasattr(self, '_initial_handler_level'):\n+            self.handler.setLevel(self._initial_handler_level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n@@ -433,6 +437,9 @@ class LogCaptureFixture:\n         logger_obj = logging.getLogger(logger)\n         # save the original log-level to restore it during teardown\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        # save the original handler level\n+        if not hasattr(self, '_initial_handler_level'):\n+            self._initial_handler_level = self.handler.level\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n \n"}
{"instance_id":"pytest-dev__pytest-7982","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex f0bdb1481..b96cba069 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -558,7 +558,7 @@ def visit(\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\n-        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n+        if entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n"}
{"instance_id":"pytest-dev__pytest-8399","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 719eb4e88..3f88d7a9e 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -144,7 +144,7 @@ def _make_xunit_fixture(\n         scope=scope,\n         autouse=True,\n         # Use a unique name to speed up lookup.\n-        name=f\"unittest_{setup_name}_fixture_{obj.__qualname__}\",\n+        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n     )\n     def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n         if _is_skipped(self):\n"}
{"instance_id":"scikit-learn__scikit-learn-10297","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n"}
{"instance_id":"scikit-learn__scikit-learn-10844","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py\nindex a987778ae..9bcca75a2 100644\n--- a/sklearn/metrics/cluster/supervised.py\n+++ b/sklearn/metrics/cluster/supervised.py\n@@ -856,7 +856,7 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\n-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.\n+    return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\n"}
{"instance_id":"scikit-learn__scikit-learn-10908","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 9b1ebd632..7dcbeda0e 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -300,8 +300,12 @@ class VectorizerMixin(object):\n \n     def _check_vocabulary(self):\n         \"\"\"Check if vocabulary is empty or missing (not fit-ed)\"\"\"\n-        msg = \"%(name)s - Vocabulary wasn't fitted.\"\n-        check_is_fitted(self, 'vocabulary_', msg=msg),\n+        if not hasattr(self, 'vocabulary_'):\n+            if self.vocabulary is not None:\n+                self._validate_vocabulary()\n+            else:\n+                msg = \"%(name)s - Vocabulary wasn't fitted.\"\n+                check_is_fitted(self, 'vocabulary_', msg=msg)\n \n         if len(self.vocabulary_) == 0:\n             raise ValueError(\"Vocabulary is empty\")\n"}
{"instance_id":"scikit-learn__scikit-learn-11310","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 99d6096af..ead82c209 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -764,12 +764,15 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                 self.best_index_]\n \n         if self.refit:\n+            import time\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n+            refit_start_time = time.time()\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+            self.refit_time_ = time.time() - refit_start_time\n \n         # Store the only scorer not as a dict for single metric evaluation\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n"}
{"instance_id":"scikit-learn__scikit-learn-11578","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex e4ea696ce..93f410679 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -922,7 +922,13 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n         check_input=False, max_squared_sum=max_squared_sum,\n         sample_weight=sample_weight)\n \n-    log_reg = LogisticRegression(fit_intercept=fit_intercept)\n+    log_reg = LogisticRegression(\n+        fit_intercept=fit_intercept,\n+        multi_class=multi_class,\n+        solver=solver,\n+        penalty=penalty,\n+        dual=dual,\n+        intercept_scaling=intercept_scaling)\n \n     # The score method of Logistic Regression has a classes_ attribute.\n     if multi_class == 'ovr':\n@@ -931,7 +937,7 @@ def _log_reg_scoring_path(X, y, train, test, pos_class=None, Cs=10,\n         log_reg.classes_ = np.unique(y_train)\n     else:\n         raise ValueError(\"multi_class should be either multinomial or ovr, \"\n-                         \"got %d\" % multi_class)\n+                         \"got %s\" % multi_class)\n \n     if pos_class is not None:\n         mask = (y_test == pos_class)\n"}
{"instance_id":"scikit-learn__scikit-learn-12585","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/base.py b/sklearn/base.py\nindex 56ffb18bf..34998270c 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -48,7 +48,7 @@ def clone(estimator, safe=True):\n     # XXX: not handling dictionaries\n     if estimator_type in (list, tuple, set, frozenset):\n         return estimator_type([clone(e, safe=safe) for e in estimator])\n-    elif not hasattr(estimator, 'get_params'):\n+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\n         if not safe:\n             return copy.deepcopy(estimator)\n         else:\n"}
{"instance_id":"scikit-learn__scikit-learn-12682","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..7a5aeb142 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -865,7 +865,8 @@ class SparseCodingMixin(TransformerMixin):\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n-                                  n_jobs=None, positive_code=False):\n+                                  n_jobs=None, positive_code=False,\n+                                  transform_max_iter=1000):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n         self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n@@ -873,6 +874,7 @@ class SparseCodingMixin(TransformerMixin):\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n         self.positive_code = positive_code\n+        self.transform_max_iter = transform_max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -900,7 +902,8 @@ class SparseCodingMixin(TransformerMixin):\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code,\n+            max_iter=self.transform_max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -991,12 +994,13 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 transform_max_iter=1000):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+                                       positive_code, transform_max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n"}
{"instance_id":"scikit-learn__scikit-learn-12973","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 03b34a0dc..79c03acca 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):\n         y : array-like, shape (n_samples,)\n             target values. Will be cast to X's dtype if necessary\n \n-        copy_X : boolean, optional, default True\n+        copy_X : boolean, optional, default None\n             If ``True``, X will be copied; else, it may be overwritten.\n+            If None, defaults to the value passed in the constructor.\n \n         Returns\n         -------\n@@ -1500,8 +1501,9 @@ class LassoLarsIC(LassoLars):\n         \"\"\"\n         X, y = check_X_y(X, y, y_numeric=True)\n \n+        copy_X = self.copy_X if copy_X is None else copy_X\n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(\n-            X, y, self.fit_intercept, self.normalize, self.copy_X)\n+            X, y, self.fit_intercept, self.normalize, copy_X)\n         max_iter = self.max_iter\n \n         Gram = self.precompute\n"}
{"instance_id":"scikit-learn__scikit-learn-13124","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 24394f869..f19e3b57a 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -645,29 +645,27 @@ class StratifiedKFold(_BaseKFold):\n                            \" be less than n_splits=%d.\"\n                            % (min_groups, self.n_splits)), Warning)\n \n-        # pre-assign each sample to a test fold index using individual KFold\n-        # splitting strategies for each class so as to respect the balance of\n-        # classes\n-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n-        # will break when the data is not 100% stratifiable for all classes.\n-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n-        per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n-            for count in y_counts]\n-\n+        from sklearn.utils import check_random_state\n+        \n+        rng = check_random_state(self.random_state)\n         test_folds = np.zeros(n_samples, dtype=np.int)\n-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n-                cls_test_folds = test_folds[y == cls]\n-                # the test split can be too big because we used\n-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n-                # stratifiable for all the classes\n-                # (we use a warning instead of raising an exception)\n-                # If this is the case, let's trim it:\n-                test_split = test_split[test_split < len(cls_test_folds)]\n-                cls_test_folds[test_split] = test_fold_indices\n-                test_folds[y == cls] = cls_test_folds\n+        \n+        # For each class, get indices and optionally shuffle them\n+        for cls_idx, cls in enumerate(unique_y):\n+            cls_indices = np.where(y == cls)[0]\n+            if self.shuffle:\n+                rng.shuffle(cls_indices)\n+            \n+            # Split indices into n_splits groups\n+            fold_sizes = np.full(self.n_splits, len(cls_indices) // self.n_splits, dtype=int)\n+            fold_sizes[:len(cls_indices) % self.n_splits] += 1\n+            current = 0\n+            \n+            # Assign samples to folds\n+            for fold_idx, fold_size in enumerate(fold_sizes):\n+                start, stop = current, current + fold_size\n+                test_folds[cls_indices[start:stop]] = fold_idx\n+                current = stop\n \n         return test_folds\n \n"}
{"instance_id":"scikit-learn__scikit-learn-13135","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py\nindex dd969c12b..8cb4c523b 100644\n--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n@@ -172,6 +172,7 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):\n                 # 1D k-means procedure\n                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n+                centers = np.sort(centers)  # Sort centers to ensure monotonic bin edges\n                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n \n"}
{"instance_id":"scikit-learn__scikit-learn-13142","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex bd34333c0..d5213ef11 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                 best_params = self._get_parameters()\n                 best_n_iter = n_iter\n \n-        # Always do a final e-step to guarantee that the labels returned by\n-        # fit_predict(X) are always consistent with fit(X).predict(X)\n-        # for any value of max_iter and tol (and any random_state).\n-        _, log_resp = self._e_step(X)\n-\n         if not self.converged_:\n             warnings.warn('Initialization %d did not converge. '\n                           'Try different init parameters, '\n@@ -273,7 +268,7 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n         self.n_iter_ = best_n_iter\n         self.lower_bound_ = max_lower_bound\n \n-        return log_resp.argmax(axis=1)\n+        return self.predict(X)\n \n     def _e_step(self, X):\n         \"\"\"E step.\n"}
{"instance_id":"scikit-learn__scikit-learn-13328","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 65c686400..d4c9d1d9d 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -90,7 +90,7 @@ def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):\n         grad = np.zeros(n_features + 1)\n \n     # Gradient due to the squared loss.\n-    X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers)\n+    X_non_outliers = -axis0_safe_slice(X.astype(np.float64), ~outliers_mask, n_non_outliers)\n     grad[:n_features] = (\n         2. / sigma * safe_sparse_dot(weighted_non_outliers, X_non_outliers))\n \n@@ -98,7 +98,7 @@ def _huber_loss_and_gradient(w, X, y, epsilon, alpha, sample_weight=None):\n     signed_outliers = np.ones_like(outliers)\n     signed_outliers_mask = linear_loss[outliers_mask] < 0\n     signed_outliers[signed_outliers_mask] = -1.0\n-    X_outliers = axis0_safe_slice(X, outliers_mask, num_outliers)\n+    X_outliers = axis0_safe_slice(X.astype(np.float64), outliers_mask, num_outliers)\n     sw_outliers = sample_weight[outliers_mask] * signed_outliers\n     grad[:n_features] -= 2. * epsilon * (\n         safe_sparse_dot(sw_outliers, X_outliers))\n"}
{"instance_id":"scikit-learn__scikit-learn-13439","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 7eaf9a46f..e88143d95 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -561,6 +561,16 @@ class Pipeline(_BaseComposition):\n         # check if first estimator expects pairwise input\n         return getattr(self.steps[0][1], '_pairwise', False)\n \n+    def __len__(self):\n+        \"\"\"Returns the length of the Pipeline\n+\n+        Returns\n+        -------\n+        length : int\n+            The length of the Pipeline\n+        \"\"\"\n+        return len(self.steps)\n+\n \n def _name_estimators(estimators):\n     \"\"\"Generate names for estimators.\"\"\"\n"}
{"instance_id":"scikit-learn__scikit-learn-13496","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..ba11df2da 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -173,7 +173,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n@@ -187,10 +188,12 @@ class IsolationForest(BaseBagging, OutlierMixin):\n             max_features=max_features,\n             n_jobs=n_jobs,\n             random_state=random_state,\n-            verbose=verbose)\n+            verbose=verbose,\n+            warm_start=warm_start)\n \n         self.behaviour = behaviour\n         self.contamination = contamination\n+        self.warm_start = warm_start\n \n     def _set_oob_score(self, X, y):\n         raise NotImplementedError(\"OOB score not supported by iforest\")\n"}
{"instance_id":"scikit-learn__scikit-learn-13779","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..91ffd3de9 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -29,6 +29,8 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n+    if estimator is None:\n+        return None\n     if sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n"}
{"instance_id":"scikit-learn__scikit-learn-14053","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 1fe11e596..0f977f98c 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -890,9 +890,11 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        feature_names_ = [feature_names[i] if i != _tree.TREE_UNDEFINED else \"undefined\"\n+                         for i in tree_.feature]\n     else:\n-        feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n+        feature_names_ = [\"feature_{}\".format(i) if i != _tree.TREE_UNDEFINED else \"undefined\"\n+                         for i in tree_.feature]\n \n     export_text.report = \"\"\n \n"}
{"instance_id":"scikit-learn__scikit-learn-14087","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..b39e62789 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2170,18 +2170,21 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n                 best_indices = np.argmax(scores, axis=1)\n-                if self.multi_class == 'ovr':\n-                    w = np.mean([coefs_paths[i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n-                else:\n+                if multi_class == 'multinomial':\n                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                             for i in range(len(folds))], axis=0)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                             for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n \n-                best_indices_l1 = best_indices // len(self.Cs_)\n-                self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n+                if len(l1_ratios_) > 1:\n+                    best_indices_l1 = best_indices // len(self.Cs_)\n+                    self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n+                else:\n+                    self.l1_ratio_.append(l1_ratios_[0])\n \n             if multi_class == 'multinomial':\n                 self.C_ = np.tile(self.C_, n_classes)\n"}
{"instance_id":"scikit-learn__scikit-learn-14141","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex e5d3141bf..ecba9ec68 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -48,6 +48,7 @@ def _get_deps_info():\n         \"Cython\",\n         \"pandas\",\n         \"matplotlib\",\n+        \"joblib\",\n     ]\n \n     def get_version(module):\n"}
{"instance_id":"scikit-learn__scikit-learn-14496","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/cluster/optics_.py b/sklearn/cluster/optics_.py\nindex 4f7eb11ab..228d88c4e 100755\n--- a/sklearn/cluster/optics_.py\n+++ b/sklearn/cluster/optics_.py\n@@ -437,7 +437,7 @@ if metric=’precomputed’.\n     n_samples = X.shape[0]\n     _validate_size(min_samples, n_samples, 'min_samples')\n     if min_samples <= 1:\n-        min_samples = max(2, min_samples * n_samples)\n+        min_samples = int(round(max(2, min_samples * n_samples)))\n \n     # Start all points as 'unprocessed' ##\n     reachability_ = np.empty(n_samples)\n"}
{"instance_id":"scikit-learn__scikit-learn-14629","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py\nindex 95669a212..51e77ba46 100644\n--- a/sklearn/model_selection/_validation.py\n+++ b/sklearn/model_selection/_validation.py\n@@ -855,10 +855,16 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,\n     predictions = func(X_test)\n     if method in ['decision_function', 'predict_proba', 'predict_log_proba']:\n         if isinstance(predictions, list):\n-            predictions = [_enforce_prediction_order(\n-                estimator.classes_[i_label], predictions[i_label],\n-                n_classes=len(set(y[:, i_label])), method=method)\n-                for i_label in range(len(predictions))]\n+            if hasattr(estimator, 'estimators_'):  # Handle MultiOutputClassifier\n+                predictions = [_enforce_prediction_order(\n+                    estimator.estimators_[i_label].classes_, predictions[i_label],\n+                    n_classes=len(set(y[:, i_label])), method=method)\n+                    for i_label in range(len(predictions))]\n+            else:\n+                predictions = [_enforce_prediction_order(\n+                    estimator.classes_[i_label], predictions[i_label],\n+                    n_classes=len(set(y[:, i_label])), method=method)\n+                    for i_label in range(len(predictions))]\n         else:\n             # A 2D y array should be a binary label indicator matrix\n             n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]\n"}
{"instance_id":"scikit-learn__scikit-learn-14894","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe837..caaef3d99 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -286,12 +286,15 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = 1\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_SV == 0:\n+            self.dual_coef_ = sp.csr_matrix((n_class, 0))\n+        else:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                        dual_coef_indices.size / n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n"}
{"instance_id":"scikit-learn__scikit-learn-14983","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..b616f8c72 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1213,9 +1213,15 @@ class RepeatedKFold(_RepeatedSplits):\n     RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n+        self.n_splits = n_splits\n+        self.n_repeats = n_repeats\n+        self.random_state = random_state\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return f'{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})'\n+\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1266,9 +1272,15 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n     RepeatedKFold: Repeats K-Fold n times.\n     \"\"\"\n     def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n+        self.n_splits = n_splits\n+        self.n_repeats = n_repeats\n+        self.random_state = random_state\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return f'{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})'\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n"}
{"instance_id":"scikit-learn__scikit-learn-15100","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex bb5a9d646..11236d958 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -130,10 +130,7 @@ def strip_accents_unicode(s):\n         ASCII equivalent.\n     \"\"\"\n     normalized = unicodedata.normalize('NFKD', s)\n-    if normalized == s:\n-        return s\n-    else:\n-        return ''.join([c for c in normalized if not unicodedata.combining(c)])\n+    return ''.join([c for c in normalized if not unicodedata.combining(c)])\n \n \n def strip_accents_ascii(s):\n"}
{"instance_id":"scikit-learn__scikit-learn-25102","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..1a5eed6a0 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    dtypes=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -36,6 +37,9 @@ def _wrap_in_pandas_container(\n     index : array-like, default=None\n         Index for data.\n \n+    dtypes : Series, default=None\n+        Data types to use for the columns in the output DataFrame.\n+\n     Returns\n     -------\n     dataframe : DataFrame\n@@ -57,9 +61,14 @@ def _wrap_in_pandas_container(\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if dtypes is not None:\n+            data_to_wrap = data_to_wrap.astype(dtypes)\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        df = df.astype(dtypes)\n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -126,11 +135,21 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n \n+    # Get selected feature names\n+    feature_names = estimator.get_feature_names_out()\n+    \n+    # If original input was DataFrame, get dtypes for selected features\n+    dtypes = None\n+    if hasattr(original_input, \"dtypes\"):\n+        selected_cols = original_input.columns[estimator.get_support()]\n+        dtypes = original_input.dtypes[selected_cols]\n+\n     # dense_config == \"pandas\"\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n-        columns=estimator.get_feature_names_out,\n+        columns=feature_names,\n+        dtypes=dtypes,\n     )\n \n \n"}
{"instance_id":"scikit-learn__scikit-learn-25232","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 1d918bc0c..62099019b 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -281,6 +281,7 @@ class IterativeImputer(_BaseImputer):\n         \"initial_strategy\": [\n             StrOptions({\"mean\", \"median\", \"most_frequent\", \"constant\"})\n         ],\n+        \"fill_value\": [None, \"array-like\"],\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n@@ -301,6 +302,7 @@ class IterativeImputer(_BaseImputer):\n         tol=1e-3,\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n+        fill_value=None,\n         imputation_order=\"ascending\",\n         skip_complete=False,\n         min_value=-np.inf,\n@@ -322,6 +324,7 @@ class IterativeImputer(_BaseImputer):\n         self.tol = tol\n         self.n_nearest_features = n_nearest_features\n         self.initial_strategy = initial_strategy\n+        self.fill_value = fill_value\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n         self.min_value = min_value\n@@ -610,11 +613,14 @@ class IterativeImputer(_BaseImputer):\n         X_missing_mask = _get_mask(X, self.missing_values)\n         mask_missing_values = X_missing_mask.copy()\n         if self.initial_imputer_ is None:\n-            self.initial_imputer_ = SimpleImputer(\n-                missing_values=self.missing_values,\n-                strategy=self.initial_strategy,\n-                keep_empty_features=self.keep_empty_features,\n-            )\n+            imputer_params = {\n+                'missing_values': self.missing_values,\n+                'strategy': self.initial_strategy,\n+                'keep_empty_features': self.keep_empty_features,\n+            }\n+            if self.initial_strategy == 'constant':\n+                imputer_params['fill_value'] = self.fill_value\n+            self.initial_imputer_ = SimpleImputer(**imputer_params)\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n             X_filled = self.initial_imputer_.transform(X)\n"}
{"instance_id":"scikit-learn__scikit-learn-25747","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..3bdf09d74 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -55,10 +55,18 @@ def _wrap_in_pandas_container(\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n+    elif isinstance(data_to_wrap, pd.Series):\n+        # Preserve Series index for grouped operations\n+        if columns is not None:\n+            data_to_wrap.name = columns[0] if isinstance(columns, (list, np.ndarray)) else columns\n+        return data_to_wrap.to_frame()\n \n+    # Only use provided index if shapes match\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n"}
{"instance_id":"scikit-learn__scikit-learn-25931","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex 4d6c1c3f0..02bbda7bf 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -345,7 +345,11 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             return self\n \n         # else, define offset_ wrt contamination parameter\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        # Store the already validated data to avoid re-validation\n+        self._fit_X = X\n+        scores = self._compute_chunked_score_samples(X)\n+        self.offset_ = np.percentile(-scores, 100.0 * self.contamination)\n+        del self._fit_X\n \n         return self\n \n@@ -432,8 +436,9 @@ class IsolationForest(OutlierMixin, BaseBagging):\n \n         check_is_fitted(self)\n \n-        # Check data\n-        X = self._validate_data(X, accept_sparse=\"csr\", dtype=np.float32, reset=False)\n+        # Skip validation if this is the same data used in fit\n+        if not hasattr(self, '_fit_X') or X is not self._fit_X:\n+            X = self._validate_data(X, accept_sparse=\"csr\", dtype=np.float32, reset=False)\n \n         # Take the opposite of the scores as bigger is better (here less\n         # abnormal)\n"}
{"instance_id":"scikit-learn__scikit-learn-25973","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/feature_selection/_sequential.py b/sklearn/feature_selection/_sequential.py\nindex e983c55de..63bd9d58d 100644\n--- a/sklearn/feature_selection/_sequential.py\n+++ b/sklearn/feature_selection/_sequential.py\n@@ -261,6 +261,10 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n \n         cloned_estimator = clone(self.estimator)\n \n+        # Convert cv to a list if it's an iterator to allow multiple passes\n+        if hasattr(self.cv, '__iter__') and not isinstance(self.cv, (int, str)):\n+            self.cv = list(self.cv)\n+\n         # the current mask corresponds to the set of features:\n         # - that we have already *selected* if we do forward selection\n         # - that we have already *excluded* if we do backward selection\n"}
{"instance_id":"scikit-learn__scikit-learn-26194","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\nindex 0cdead923..ac79de7f5 100644\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -1083,7 +1083,12 @@ def roc_curve(\n     # to make sure that the curve starts at (0, 0)\n     tps = np.r_[0, tps]\n     fps = np.r_[0, fps]\n-    thresholds = np.r_[thresholds[0] + 1, thresholds]\n+    \n+    # For probability scores (max score <= 1), use 1.0 as the maximum threshold\n+    if thresholds[0] <= 1.0:\n+        thresholds = np.r_[1.0, thresholds]\n+    else:\n+        thresholds = np.r_[thresholds[0] + 1, thresholds]\n \n     if fps[-1] <= 0:\n         warnings.warn(\n"}
{"instance_id":"scikit-learn__scikit-learn-26323","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1..875d4749d 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -303,6 +303,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Handle remainder transformer if it exists and is an estimator\n+        remainder = getattr(self, \"remainder\", None)\n+        if remainder not in (None, \"passthrough\", \"drop\"):\n+            _safe_set_output(remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\n"}
{"instance_id":"scikit-learn__scikit-learn-9288","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex b7fbdf7da..c5efd83d6 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -360,6 +360,8 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n     else:\n         raise ValueError(\"Algorithm must be 'auto', 'full' or 'elkan', got\"\n                          \" %s\" % str(algorithm))\n+    # Generate seeds for all runs upfront to ensure consistency\n+    seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n     if effective_n_jobs(n_jobs) == 1:\n         # For a single thread, less memory is needed if we just store one set\n         # of the best results (as opposed to one set per run per thread).\n@@ -369,7 +371,7 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n                 X, sample_weight, n_clusters, max_iter=max_iter, init=init,\n                 verbose=verbose, precompute_distances=precompute_distances,\n                 tol=tol, x_squared_norms=x_squared_norms,\n-                random_state=random_state)\n+                random_state=seeds[it])\n             # determine if these results are the best so far\n             if best_inertia is None or inertia < best_inertia:\n                 best_labels = labels.copy()\n@@ -378,7 +380,6 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n                 best_n_iter = n_iter_\n     else:\n         # parallelisation of k-means runs\n-        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n         results = Parallel(n_jobs=n_jobs, verbose=0)(\n             delayed(kmeans_single)(X, sample_weight, n_clusters,\n                                    max_iter=max_iter, init=init,\n"}
{"instance_id":"sphinx-doc__sphinx-10323","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex dc44ed314..fbe227037 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,7 +343,14 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Find indentation from first non-empty line\n+            indent = ''\n+            for line in lines:\n+                if line.strip():\n+                    indent = line[:len(line) - len(line.lstrip())]\n+                    break\n+            # Apply the same indentation to prepended content\n+            lines.insert(0, indent + prepend.lstrip() + '\\n')\n \n         return lines\n \n"}
{"instance_id":"sphinx-doc__sphinx-10435","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..8bdee2f36 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -1710,11 +1710,13 @@ class LaTeXTranslator(SphinxTranslator):\n         # TODO: Use nowrap option once LaTeX formatter supports it\n         # https://github.com/pygments/pygments/pull/1343\n         hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n-                                r'\\sphinxcode{\\sphinxupquote{')\n+                                r'\\sphinxcode{\\sphinxupquote{%')\n         # get consistent trailer\n         hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n+        # Remove any leading/trailing whitespace from the highlighted content\n+        hlcode = hlcode.strip()\n         self.body.append(hlcode)\n-        self.body.append('}}')\n+        self.body.append('%}}')\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n"}
{"instance_id":"sphinx-doc__sphinx-10449","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..5798276fe 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1552,7 +1552,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        # Always hide return annotations for class signatures\n+        kwargs['show_return_annotation'] = False\n+        return stringify_signature(sig, **kwargs)\n \n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n"}
{"instance_id":"sphinx-doc__sphinx-10466","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex e8bc547b7..eefcce61f 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -32,7 +32,13 @@ class Message:\n     \"\"\"An entry of translatable message.\"\"\"\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        # Deduplicate locations while preserving order of first appearance\n+        seen = dict()\n+        self.locations = []\n+        for loc in locations:\n+            if loc not in seen:\n+                seen[loc] = True\n+                self.locations.append(loc)\n         self.uuids = uuids\n \n \n"}
{"instance_id":"sphinx-doc__sphinx-10614","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 6e3985512..9f9ee3971 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -413,12 +413,17 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = \"../\" + child.get('refuri')\n+                # Get the target document name without .html suffix\n+                target_docname = child.get('refuri').replace(self.builder.out_suffix, '')\n+                # Use builder's get_relative_uri to compute correct relative path\n+                relative_uri = self.builder.get_relative_uri(self.builder.current_docname, target_docname)\n+                urls[child['reftitle']] = relative_uri\n             else:\n                 urls[child['reftitle']] = child.get('refuri')\n         elif child.get('refid') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n+                relative_uri = self.builder.get_relative_uri(self.builder.current_docname, self.builder.current_docname)\n+                urls[child['reftitle']] = relative_uri + '#' + child.get('refid')\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n \n"}
{"instance_id":"sphinx-doc__sphinx-10673","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 35e16e623..099c175b4 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -119,16 +119,20 @@ class TocTree(SphinxDirective):\n                 if url_re.match(ref) or ref == 'self':\n                     toctree['entries'].append((title, ref))\n                 elif docname not in self.env.found_docs:\n-                    if excluded(self.env.doc2path(docname, False)):\n-                        message = __('toctree contains reference to excluded document %r')\n-                        subtype = 'excluded'\n+                    # Skip warning for special Sphinx-generated pages\n+                    if docname in ('genindex', 'modindex', 'search'):\n+                        toctree['entries'].append((title, docname))\n                     else:\n-                        message = __('toctree contains reference to nonexisting document %r')\n-                        subtype = 'not_readable'\n-\n-                    logger.warning(message, docname, type='toc', subtype=subtype,\n-                                   location=toctree)\n-                    self.env.note_reread()\n+                        if excluded(self.env.doc2path(docname, False)):\n+                            message = __('toctree contains reference to excluded document %r')\n+                            subtype = 'excluded'\n+                        else:\n+                            message = __('toctree contains reference to nonexisting document %r')\n+                            subtype = 'not_readable'\n+\n+                        logger.warning(message, docname, type='toc', subtype=subtype,\n+                                       location=toctree)\n+                        self.env.note_reread()\n                 else:\n                     if docname in all_docnames:\n                         all_docnames.remove(docname)\n"}
{"instance_id":"sphinx-doc__sphinx-11445","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..99f32fef8 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,7 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+docinfo_re = re.compile('^:\\\\w+: +.*?$')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n"}
{"instance_id":"sphinx-doc__sphinx-11510","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..e2ee8d0b7 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -95,6 +95,8 @@ class SphinxStandaloneReader(SphinxBaseReader):\n     def setup(self, app: Sphinx) -> None:\n         self.transforms = self.transforms + app.registry.get_transforms()\n         super().setup(app)\n+        if not hasattr(app.env, '_source_cache'):\n+            app.env._source_cache = {}\n \n     def read(self, source: Input, parser: Parser, settings: Values) -> nodes.document:\n         self.source = source\n@@ -107,11 +109,22 @@ class SphinxStandaloneReader(SphinxBaseReader):\n \n     def read_source(self, env: BuildEnvironment) -> str:\n         \"\"\"Read content from source and do post-process.\"\"\"\n-        content = self.source.read()\n+        source_path = getattr(self.source, 'source_path', None)\n+        \n+        # Check if we have cached content for this file\n+        if source_path and source_path in env._source_cache:\n+            return env._source_cache[source_path]\n \n+        content = self.source.read()\n+        \n         # emit \"source-read\" event\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+        \n+        # Cache the transformed content if we have a source path\n+        if source_path:\n+            env._source_cache[source_path] = arg[0]\n+            \n         return arg[0]\n \n \n"}
{"instance_id":"sphinx-doc__sphinx-7440","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex d820cfe5c..edc110d2a 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -305,7 +305,7 @@ def make_glossary_term(env: \"BuildEnvironment\", textnodes: Iterable[Node], index\n         term['ids'].append(node_id)\n \n     std = cast(StandardDomain, env.get_domain('std'))\n-    std.note_object('term', termtext.lower(), node_id, location=term)\n+    std.note_object('term', termtext, node_id, location=term)\n \n     # add an index entry too\n     indexnode = addnodes.index()\n"}
{"instance_id":"sphinx-doc__sphinx-7454","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex eb38d232c..3dd6a8de9 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -45,10 +45,10 @@ def stringify(annotation: Any) -> str:\n         return annotation\n     elif isinstance(annotation, TypeVar):  # type: ignore\n         return annotation.__name__\n+    elif annotation is None or annotation is NoneType:  # type: ignore\n+        return 'None'\n     elif not annotation:\n         return repr(annotation)\n-    elif annotation is NoneType:  # type: ignore\n-        return 'None'\n     elif (getattr(annotation, '__module__', None) == 'builtins' and\n           hasattr(annotation, '__qualname__')):\n         return annotation.__qualname__\n"}
{"instance_id":"sphinx-doc__sphinx-7462","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 3ca730e30..6c8dc13fc 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -115,10 +115,11 @@ def _parse_annotation(annotation: str) -> List[Node]:\n             return result\n         elif isinstance(node, ast.Tuple):\n             result = []\n-            for elem in node.elts:\n-                result.extend(unparse(elem))\n-                result.append(addnodes.desc_sig_punctuation('', ', '))\n-            result.pop()\n+            if node.elts:\n+                for elem in node.elts:\n+                    result.extend(unparse(elem))\n+                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+                result.pop()\n             return result\n         else:\n             raise SyntaxError  # unsupported syntax\n"}
{"instance_id":"sphinx-doc__sphinx-7590","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d881d..efc86cc82 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4662,8 +4662,14 @@ class DefinitionParser(BaseParser):\n                       integer_literal_re, octal_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n+                # Handle standard suffixes\n                 while self.current_char in 'uUlLfF':\n                     self.pos += 1\n+                # Handle user defined literal suffix\n+                if self.current_char == '_':\n+                    self.pos += 1\n+                    while self.match(identifier_re):\n+                        pass\n                 return ASTNumberLiteral(self.definition[pos:self.pos])\n \n         string = self._parse_string()\n"}
{"instance_id":"sphinx-doc__sphinx-7748","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be999..2a620f19f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,14 +1037,14 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n+    def _find_signature(self, encoding: str = None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1066,10 +1066,8 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            results.append((args, retann))\n+        return results if results else None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1085,9 +1083,13 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results is not None:\n+                signatures = []\n+                for args, retann in results:\n+                    self.args, self.retann = args, retann\n+                    signatures.append(super().format_signature(**kwargs))  # type: ignore\n+                return '\\n'.join(signatures)\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n"}
{"instance_id":"sphinx-doc__sphinx-7757","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex fc1136ae2..b33a2c8d3 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -178,7 +178,8 @@ def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n                 node += nodes.Text(' ')\n             else:\n                 node += addnodes.desc_sig_operator('', '=')\n-            node += nodes.inline('', param.default, classes=['default_value'],\n+                node += nodes.Text(' ')\n+            node += nodes.inline('', repr(param.default), classes=['default_value'],\n                                  support_smartquotes=False)\n \n         params += node\n"}
{"instance_id":"sphinx-doc__sphinx-7889","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 98a3a3a96..fcc81fbe1 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -68,12 +68,16 @@ class _MockObject:\n         return self.__display_name__\n \n \n+from typing import TypeVar\n+\n def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                    attributes: Any = None) -> Any:\n-    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n+    # Convert TypeVar to string if necessary\n+    name_str = str(name) if isinstance(name, TypeVar) else name\n+    attrs = {'__module__': module, '__display_name__': module + '.' + name_str}\n     attrs.update(attributes or {})\n \n-    return type(name, (superclass,), attrs)\n+    return type(name_str, (superclass,), attrs)\n \n \n class _MockModule(ModuleType):\n"}
{"instance_id":"sphinx-doc__sphinx-7910","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py\nindex 10b1ff3a3..8485c87e4 100644\n--- a/sphinx/ext/napoleon/__init__.py\n+++ b/sphinx/ext/napoleon/__init__.py\n@@ -430,14 +430,15 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,\n             cls_path, _, _ = qualname.rpartition('.')\n             if cls_path:\n                 try:\n-                    if '.' in cls_path:\n-                        import importlib\n-                        import functools\n+                    import importlib\n+                    import functools\n \n+                    try:\n                         mod = importlib.import_module(obj.__module__)\n                         mod_path = cls_path.split('.')\n                         cls = functools.reduce(getattr, mod_path, mod)\n-                    else:\n+                    except Exception:\n+                        # Fallback to globals lookup if module path resolution fails\n                         cls = obj.__globals__[cls_path]\n                 except Exception:\n                     cls_is_owner = False\n"}
{"instance_id":"sphinx-doc__sphinx-7985","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd5317087..9d1167b93 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -212,10 +212,17 @@ class CheckExternalLinksBuilder(Builder):\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n+            elif not uri.startswith(('http:', 'https:')):\n+                # Check if local target exists in our document\n+                docname = self.env.doc2path(self.env.docname, base=False)\n+                if uri in self.env.titles or uri in self.env.labels:\n+                    self.good.add(uri)\n+                    return 'working', '', 0\n+                else:\n+                    self.broken[uri] = 'document not found'\n+                    return 'broken', 'document not found', 0\n             elif uri in self.broken:\n                 return 'broken', self.broken[uri], 0\n             elif uri in self.redirected:\n"}
{"instance_id":"sphinx-doc__sphinx-8035","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8c3509c3b..85343614a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -656,8 +656,12 @@ class Documenter:\n                 isattr = True\n             elif want_all and isprivate:\n                 # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if isinstance(self.options.private_members, list):\n+                    keep = membername in self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n+                else:\n+                    keep = self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\n@@ -859,7 +863,7 @@ class ModuleDocumenter(Documenter):\n         'show-inheritance': bool_option, 'synopsis': identity,\n         'platform': identity, 'deprecated': bool_option,\n         'member-order': member_order_option, 'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': members_option, 'special-members': members_option,\n         'imported-members': bool_option, 'ignore-module-all': bool_option\n     }  # type: Dict[str, Callable]\n \n"}
{"instance_id":"sphinx-doc__sphinx-8056","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..48dde0ec0 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -407,14 +407,23 @@ class GoogleDocstring:\n         _desc = self._strip_empty(_desc)\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n+        \n+        # Handle multiple parameter names\n+        names = [n.strip() for n in _name.split(',')]\n+        if len(names) > 1:\n+            # Format multiple names with shared type\n+            name_part = '**' + '**, **'.join(names) + '**'\n+        else:\n+            name_part = '**%s**' % _name\n+            \n         if _name:\n             if _type:\n                 if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+                    field = '%s (%s)%s' % (name_part, _type, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    field = '%s (*%s*)%s' % (name_part, _type, separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                field = '%s%s' % (name_part, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n"}
{"instance_id":"sphinx-doc__sphinx-8120","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/locale/__init__.py b/sphinx/locale/__init__.py\nindex 385ca3566..8615e0d67 100644\n--- a/sphinx/locale/__init__.py\n+++ b/sphinx/locale/__init__.py\n@@ -134,7 +134,9 @@ def init(locale_dirs: List[str], language: str,\n             if translator is None:\n                 translator = trans\n             else:\n-                translator.add_fallback(trans)\n+                # Make the new translation primary and add existing as fallback\n+                trans.add_fallback(translator)\n+                translator = trans\n         except Exception:\n             # Language couldn't be found in the specified path\n             pass\n"}
{"instance_id":"sphinx-doc__sphinx-8265","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 378174993..32b1af7a3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -390,6 +390,8 @@ def object_description(object: Any) -> str:\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, tuple):\n+        return \"(%s)\" % \", \".join(object_description(x) for x in object)\n     try:\n         s = repr(object)\n     except Exception as exc:\n"}
{"instance_id":"sphinx-doc__sphinx-8269","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc7c..fef48c48f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -162,27 +162,35 @@ class CheckExternalLinksBuilder(Builder):\n             kwargs['headers'] = get_request_headers()\n \n             try:\n-                if anchor and self.app.config.linkcheck_anchors:\n-                    # Read the whole document and see if #anchor exists\n+                # Always try HEAD request first, regardless of anchor\n+                try:\n+                    response = requests.head(req_url, config=self.app.config,\n+                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n+                except HTTPError:\n+                    # retry with GET request if HEAD fails\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n-                    found = check_anchor(response, unquote(anchor))\n+                    response.raise_for_status()\n+\n+                # Only check anchor if URL is accessible and anchor checking is enabled\n+                if anchor and self.app.config.linkcheck_anchors:\n+                    # Read the whole document and see if #anchor exists\n+                    if not response.headers.get('content-type', '').startswith('text/html'):\n+                        # Skip anchor check for non-HTML content\n+                        return 'working', '', 0\n+                    \n+                    if isinstance(response, requests.models.Response) and not response.raw.closed:\n+                        # Reuse existing response if it's a GET with content\n+                        found = check_anchor(response, unquote(anchor))\n+                    else:\n+                        # Need new GET request for content if we used HEAD\n+                        response = requests.get(req_url, stream=True, config=self.app.config,\n+                                               auth=auth_info, **kwargs)\n+                        found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n                         raise Exception(__(\"Anchor '%s' not found\") % anchor)\n-                else:\n-                    try:\n-                        # try a HEAD request first, which should be easier on\n-                        # the server and the network\n-                        response = requests.head(req_url, config=self.app.config,\n-                                                 auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-                    except HTTPError:\n-                        # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n-                        response = requests.get(req_url, stream=True, config=self.app.config,\n-                                                auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n             except HTTPError as err:\n                 if err.response.status_code == 401:\n                     # We'll take \"Unauthorized\" as working.\n"}
{"instance_id":"sphinx-doc__sphinx-8459","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 70cbc3ba1..666c532b0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -28,11 +28,13 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj)\n+            type_aliases = getattr(app.config, 'autodoc_type_aliases', {})\n+            \n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation[param.name] = typing.stringify(param.annotation, type_aliases)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                annotation['return'] = typing.stringify(sig.return_annotation, type_aliases)\n     except (TypeError, ValueError):\n         pass\n \ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 18649433b..b0516c13c 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -275,7 +275,7 @@ def _restify_py36(cls: Optional[\"Type\"]) -> str:\n             return ':obj:`%s.%s`' % (cls.__module__, qualname)\n \n \n-def stringify(annotation: Any) -> str:\n+def stringify(annotation: Any, type_aliases: Optional[Dict[str, str]] = None) -> str:\n     \"\"\"Stringify type annotation object.\"\"\"\n     if isinstance(annotation, str):\n         if annotation.startswith(\"'\") and annotation.endswith(\"'\"):\n@@ -295,10 +295,24 @@ def stringify(annotation: Any) -> str:\n     elif annotation is Ellipsis:\n         return '...'\n \n-    if sys.version_info >= (3, 7):  # py37+\n-        return _stringify_py37(annotation)\n-    else:\n-        return _stringify_py36(annotation)\n+    # Get the basic stringified type\n+    basic_type = _stringify_py37(annotation) if sys.version_info >= (3, 7) else _stringify_py36(annotation)\n+\n+    # Apply type aliases if provided\n+    if type_aliases:\n+        # First try direct lookup\n+        if basic_type in type_aliases:\n+            return type_aliases[basic_type]\n+        \n+        # Try resolving fully qualified names\n+        module = getattr(annotation, '__module__', '')\n+        qualname = getattr(annotation, '__qualname__', '')\n+        if module and qualname:\n+            full_name = f\"{module}.{qualname}\"\n+            if full_name in type_aliases:\n+                return type_aliases[full_name]\n+\n+    return basic_type\n \n \n def _stringify_py37(annotation: Any) -> str:\n"}
{"instance_id":"sphinx-doc__sphinx-8475","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 1dc0337c3..d826e631f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -20,7 +20,7 @@ from urllib.parse import unquote, urlparse\n \n from docutils import nodes\n from docutils.nodes import Node\n-from requests.exceptions import HTTPError\n+from requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -172,9 +172,9 @@ class CheckExternalLinksBuilder(Builder):\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except (HTTPError, TooManyRedirects):\n                         # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n+                        # don't like HEAD requests or return too many redirects\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n                                                 auth=auth_info, **kwargs)\n                         response.raise_for_status()\n"}
{"instance_id":"sphinx-doc__sphinx-8548","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a26c818c0..516751d1c 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -889,7 +889,7 @@ class Signature:\n \n \n def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n-           allow_inherited: bool = False, cls: Any = None, name: str = None) -> str:\n+            allow_inherited: bool = False, cls: Any = None, name: str = None) -> str:\n     \"\"\"Get the docstring for the object.\n \n     This tries to obtain the docstring for some kind of objects additionally:\n@@ -897,6 +897,7 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n     * partial functions\n     * inherited docstring\n     * inherited decorated methods\n+    * inherited attributes\n     \"\"\"\n     doc = attrgetter(obj, '__doc__', None)\n     if ispartial(obj) and doc == obj.__class__.__doc__:\n@@ -904,14 +905,25 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n     elif doc is None and allow_inherited:\n         doc = inspect.getdoc(obj)\n \n-        if doc is None and cls:\n-            # inspect.getdoc() does not support some kind of inherited and decorated methods.\n-            # This tries to obtain the docstring from super classes.\n+        if doc is None and cls and name:\n+            # Check for docstrings in class dictionaries through MRO\n             for basecls in getattr(cls, '__mro__', []):\n-                meth = safe_getattr(basecls, name, None)\n-                if meth is not None:\n-                    doc = inspect.getdoc(meth)\n-                    if doc:\n+                # First check class dictionary for attribute docstring\n+                if name in basecls.__dict__:\n+                    attr = basecls.__dict__[name]\n+                    if hasattr(attr, '__doc__') and attr.__doc__:\n+                        doc = attr.__doc__\n                         break\n \n+            # If no docstring found in class dictionaries, try traditional method lookup\n+            if doc is None:\n+                # inspect.getdoc() does not support some kind of inherited and decorated methods\n+                # This tries to obtain the docstring from super classes.\n+                for basecls in getattr(cls, '__mro__', []):\n+                    meth = safe_getattr(basecls, name, None)\n+                    if meth is not None:\n+                        doc = inspect.getdoc(meth)\n+                        if doc:\n+                            break\n+\n     return doc\n"}
{"instance_id":"sphinx-doc__sphinx-8551","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 79d7e4f46..6baf89ff9 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1259,6 +1259,11 @@ class PythonDomain(Domain):\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n+                if not newname and modname and '.' not in name:\n+                    # For unqualified names, try current module first\n+                    fullname = modname + '.' + name\n+                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                        return [(fullname, self.objects[fullname])]\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n@@ -1266,11 +1271,12 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        # Only do fuzzy search if name contains dots\n+                        if '.' in name:\n+                            searchname = '.' + name\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n"}
{"instance_id":"sphinx-doc__sphinx-8593","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5be..c287d237b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1865,7 +1865,22 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        if not (isinstance(parent, ModuleDocumenter) and isattr):\n+            return False\n+\n+        # Check for :meta public: in docstring\n+        if membername.startswith('_'):\n+            try:\n+                analyzer = ModuleAnalyzer.for_module(parent.object.__name__)\n+                tags = analyzer.find_attr_docs()\n+                if membername in tags:\n+                    docstring = tags[membername][0]\n+                    if ':meta public:' in docstring:\n+                        return True\n+            except Exception:\n+                pass\n+\n+        return not membername.startswith('_')\n \n     def update_annotations(self, parent: Any) -> None:\n         \"\"\"Update __annotations__ to support type_comment and so on.\"\"\"\n"}
{"instance_id":"sphinx-doc__sphinx-8595","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..eeb722046 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,15 +1074,18 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n+            module_all = getattr(self.object, '__all__', None)\n+            if module_all is None:\n+                # No __all__ attribute - document all members\n                 return True, list(members.values())\n+            elif not module_all:\n+                # Empty __all__ - document no members\n+                return False, []\n             else:\n+                # Non-empty __all__ - only document members in __all__\n                 for member in members.values():\n-                    if member.__name__ not in self.__all__:\n+                    if member.__name__ not in module_all:\n                         member.skipped = True\n-\n                 return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n@@ -1092,7 +1095,7 @@ class ModuleDocumenter(Documenter):\n                     ret.append(members[name])\n                 else:\n                     logger.warning(__('missing attribute mentioned in :members: option: '\n-                                      'module %s, attribute %s') %\n+                                     'module %s, attribute %s') %\n                                    (safe_getattr(self.object, '__name__', '???'), name),\n                                    type='autodoc')\n             return False, ret\n"}
{"instance_id":"sphinx-doc__sphinx-8621","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py\nindex c91da57e9..b052b20db 100644\n--- a/sphinx/builders/html/transforms.py\n+++ b/sphinx/builders/html/transforms.py\n@@ -37,7 +37,7 @@ class KeyboardTransform(SphinxPostTransform):\n     \"\"\"\n     default_priority = 400\n     builders = ('html',)\n-    pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n+    pattern = re.compile(r'(?<=\\w)(-|\\+|\\^)(?=\\w)|(\\s+)')\n \n     def run(self, **kwargs: Any) -> None:\n         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n"}
{"instance_id":"sphinx-doc__sphinx-8638","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d3..9e1a8ec99 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1149,17 +1149,26 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n+                    # For variables, only allow exact matches with full context\n+                    if type in ('attribute', 'data'):\n+                        if modname and classname:\n+                            fullname = modname + '.' + classname + '.' + name\n+                            if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                newname = fullname\n                     else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        # For non-variables, keep existing behavior\n+                        if modname and modname + '.' + name in self.objects and \\\n+                           self.objects[modname + '.' + name].objtype in objtypes:\n+                            newname = modname + '.' + name\n+                        elif name in self.objects and self.objects[name].objtype in objtypes:\n+                            newname = name\n+                        else:\n+                            # \"fuzzy\" searching mode (skip for variables)\n+                            if type not in ('attribute', 'data'):\n+                                searchname = '.' + name\n+                                matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                           if oname.endswith(searchname) and\n+                                           self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n"}
{"instance_id":"sphinx-doc__sphinx-8721","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..8831c128e 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -182,6 +182,9 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    # Skip page generation for epub builds when viewcode_enable_epub is False\n+    if app.builder.name.startswith('epub') and not app.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n"}
{"instance_id":"sphinx-doc__sphinx-9229","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1f4c98284..c21479630 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1797,12 +1797,14 @@ class GenericAliasMixin(DataDocumenterMixinBase):\n                 super().should_suppress_directive_header())\n \n     def update_content(self, more_content: StringList) -> None:\n-        if inspect.isgenericalias(self.object):\n+        has_docstring = bool(self.get_doc())\n+        super().update_content(more_content)\n+        \n+        # Only add alias text if no custom docstring exists\n+        if inspect.isgenericalias(self.object) and not has_docstring:\n             more_content.append(_('alias of %s') % restify(self.object), '')\n             more_content.append('', '')\n \n-        super().update_content(more_content)\n-\n \n class NewTypeMixin(DataDocumenterMixinBase):\n     \"\"\"\n@@ -1815,13 +1817,15 @@ class NewTypeMixin(DataDocumenterMixinBase):\n                 super().should_suppress_directive_header())\n \n     def update_content(self, more_content: StringList) -> None:\n-        if inspect.isNewType(self.object):\n+        has_docstring = bool(self.get_doc())\n+        super().update_content(more_content)\n+        \n+        # Only add alias text if no custom docstring exists\n+        if inspect.isNewType(self.object) and not has_docstring:\n             supertype = restify(self.object.__supertype__)\n             more_content.append(_('alias of %s') % supertype, '')\n             more_content.append('', '')\n \n-        super().update_content(more_content)\n-\n \n class TypeVarMixin(DataDocumenterMixinBase):\n     \"\"\"\n@@ -1848,7 +1852,11 @@ class TypeVarMixin(DataDocumenterMixinBase):\n             return super().get_doc()  # type: ignore\n \n     def update_content(self, more_content: StringList) -> None:\n-        if isinstance(self.object, TypeVar):\n+        has_docstring = bool(self.get_doc())\n+        super().update_content(more_content)\n+        \n+        # Only add alias text if no custom docstring exists\n+        if isinstance(self.object, TypeVar) and not has_docstring:\n             attrs = [repr(self.object.__name__)]\n             for constraint in self.object.__constraints__:\n                 attrs.append(stringify_typehint(constraint))\n@@ -1862,8 +1870,6 @@ class TypeVarMixin(DataDocumenterMixinBase):\n             more_content.append(_('alias of TypeVar(%s)') % \", \".join(attrs), '')\n             more_content.append('', '')\n \n-        super().update_content(more_content)\n-\n \n class UninitializedGlobalVariableMixin(DataDocumenterMixinBase):\n     \"\"\"\n"}
{"instance_id":"sphinx-doc__sphinx-9230","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py\nindex 3a3367ebe..487f0c12c 100644\n--- a/sphinx/util/docfields.py\n+++ b/sphinx/util/docfields.py\n@@ -295,10 +295,22 @@ class DocFieldTransformer:\n                     types.setdefault(typename, {})[fieldarg] = content\n                 continue\n \n-            # also support syntax like ``:param type name:``\n+            # also support syntax like ``:param type name:`` and complex types like ``:param dict(str,str) name:``\n             if typedesc.is_typed:\n                 try:\n-                    argtype, argname = fieldarg.split(None, 1)\n+                    # Handle complex types with parentheses\n+                    in_parens = 0\n+                    for i, c in enumerate(fieldarg):\n+                        if c == '(':\n+                            in_parens += 1\n+                        elif c == ')':\n+                            in_parens -= 1\n+                        elif c.isspace() and in_parens == 0:\n+                            argtype = fieldarg[:i].rstrip()\n+                            argname = fieldarg[i:].lstrip()\n+                            break\n+                    else:\n+                        raise ValueError\n                 except ValueError:\n                     pass\n                 else:\n"}
{"instance_id":"sphinx-doc__sphinx-9258","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 7d39d80ed..248b313e0 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -92,6 +92,16 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         kwargs = {}\n \n+    if '|' in text:\n+        # Handle union types\n+        types = [t.strip() for t in text.split('|')]\n+        nodes_list = []\n+        for i, t in enumerate(types):\n+            if i > 0:\n+                nodes_list.append(nodes.Text(' | '))\n+            nodes_list.append(type_to_xref(t, env))\n+        return nodes.inline('', '', *nodes_list)\n+\n     if env.config.python_use_unqualified_type_names:\n         # Note: It would be better to use qualname to describe the object to support support\n         # nested classes.  But python domain can't access the real python object because this\n"}
{"instance_id":"sphinx-doc__sphinx-9281","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a7074..5e25fc648 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -457,6 +457,8 @@ def object_description(object: Any) -> str:\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, enum.Enum):\n+        return f\"{object.__class__.__name__}.{object.name}\"\n     try:\n         s = repr(object)\n     except Exception as exc:\n"}
{"instance_id":"sphinx-doc__sphinx-9320","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py\nindex a40a21073..d530e54b8 100644\n--- a/sphinx/cmd/quickstart.py\n+++ b/sphinx/cmd/quickstart.py\n@@ -89,6 +89,8 @@ class ValidationError(Exception):\n \n \n def is_path(x: str) -> str:\n+    if not x:  # Allow empty input\n+        return x\n     x = path.expanduser(x)\n     if not path.isdir(x):\n         raise ValidationError(__(\"Please enter a valid path name.\"))\n@@ -225,7 +227,7 @@ def ask_user(d: Dict) -> None:\n         d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),\n                               '', is_path)\n         if not d['path']:\n-            sys.exit(1)\n+            sys.exit(0)\n \n     if 'sep' not in d:\n         print()\n"}
{"instance_id":"sphinx-doc__sphinx-9367","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex f541ec0a9..2b4f0d434 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -213,10 +213,12 @@ class _UnparseVisitor(ast.NodeVisitor):\n         return \"%s %s\" % (self.visit(node.op), self.visit(node.operand))\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n-        if node.elts:\n-            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n-        else:\n+        if not node.elts:\n             return \"()\"\n+        elif len(node.elts) == 1:\n+            return \"(\" + self.visit(node.elts[0]) + \",)\"\n+        else:\n+            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n \n     if sys.version_info < (3, 8):\n         # these ast nodes were deprecated in python 3.8\n"}
{"instance_id":"sphinx-doc__sphinx-9461","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 23dd9e930..0d54ce95f 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -390,6 +390,14 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n+    # Handle class methods wrapping properties (Python 3.9+)\n+    if sys.version_info >= (3, 9):\n+        if isinstance(obj, classmethod):\n+            # Access the wrapped function if available\n+            wrapped = getattr(obj, '__wrapped__', None)\n+            if wrapped is not None and isinstance(wrapped, property):\n+                return True\n+\n     return isinstance(obj, property)\n \n \n"}
{"instance_id":"sphinx-doc__sphinx-9591","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 938f976cd..afe2255a5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1316,6 +1316,12 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n \n     def add_directive_header(self, sig: str) -> None:\n         sourcename = self.get_sourcename()\n+        \n+        # Get the return annotation if it exists\n+        if sig == '' and hasattr(self.object, 'fget') and hasattr(self.object.fget, '__annotations__'):\n+            if 'return' in self.object.fget.__annotations__:\n+                sig = ' -> ' + self.format_annotation(self.object.fget.__annotations__['return'])\n+        \n         super().add_directive_header(sig)\n \n         if inspect.iscoroutinefunction(self.object):\n"}
{"instance_id":"sphinx-doc__sphinx-9602","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 9875a9f4b..74094a7c9 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -82,7 +82,7 @@ class ModuleEntry(NamedTuple):\n \n def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n-    if text == 'None':\n+    if text in ('None', 'True', 'False') or text.startswith((\"'\", '\"')):\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n@@ -1391,7 +1391,7 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n \n     if node.get('refdomain') != 'py':\n         return None\n-    elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':\n+    elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') in ('None', 'True', 'False'):\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n"}
{"instance_id":"sphinx-doc__sphinx-9658","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex a255c0691..b64bc3779 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1664,7 +1664,20 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             self.env.events.emit('autodoc-process-bases',\n                                  self.fullname, self.object, self.options, bases)\n \n-            base_classes = [restify(cls) for cls in bases]\n+            def format_base_class(cls):\n+                if ismock(cls):\n+                    # Get module path and name parts\n+                    module = getattr(cls, '__module__', '')\n+                    name = getattr(cls, '__name__', '')\n+                    if module and name:\n+                        # For mocked objects, combine module and name properly\n+                        if name not in module:  # Avoid duplication if name is already in module\n+                            return '%s.%s' % (module, name)\n+                    # Fallback to string representation if proper attributes not found\n+                    return str(cls)\n+                return restify(cls)\n+\n+            base_classes = [format_base_class(cls) for cls in bases]\n             sourcename = self.get_sourcename()\n             self.add_line('', sourcename)\n             self.add_line('   ' + _('Bases: %s') % ', '.join(base_classes), sourcename)\n"}
{"instance_id":"sphinx-doc__sphinx-9673","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..97fe2d670 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n"}
{"instance_id":"sphinx-doc__sphinx-9698","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex cd02eaad5..1a3bd60c7 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -796,7 +796,7 @@ class PyMethod(PyObject):\n         if 'classmethod' in self.options:\n             return _('%s() (%s class method)') % (methname, clsname)\n         elif 'property' in self.options:\n-            return _('%s() (%s property)') % (methname, clsname)\n+            return _('%s (%s property)') % (methname, clsname)\n         elif 'staticmethod' in self.options:\n             return _('%s() (%s static method)') % (methname, clsname)\n         else:\n"}
{"instance_id":"sphinx-doc__sphinx-9711","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 7ec6c8518..08a0b1e7c 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -39,6 +39,8 @@ class Extension:\n         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)\n \n \n+from packaging.version import parse\n+\n def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n     \"\"\"Verify the required Sphinx extensions are loaded.\"\"\"\n     if config.needs_extensions is None:\n@@ -51,7 +53,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or parse(reqversion) > parse(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n"}
{"instance_id":"sympy__sympy-11618","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 593048464b..e1a00a5481 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -266,8 +266,11 @@ def distance(self, p):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n-        return sqrt(sum([(a - b)**2 for a, b in zip(\n-            self.args, p.args if isinstance(p, Point) else p)]))\n+        p_args = p.args if isinstance(p, Point) else p\n+        max_len = max(len(self.args), len(p_args))\n+        a_coords = list(self.args) + [0] * (max_len - len(self.args))\n+        b_coords = list(p_args) + [0] * (max_len - len(p_args))\n+        return sqrt(sum((a - b)**2 for a, b in zip(a_coords, b_coords)))\n \n     def taxicab_distance(self, p):\n         \"\"\"The Taxicab Distance from self to point p.\n"}
{"instance_id":"sympy__sympy-12096","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 1b8005e1d2..8039d5e895 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -507,7 +507,11 @@ def _eval_evalf(self, prec):\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n             try:\n-                return Float(self._imp_(*self.args), prec)\n+                result = self._imp_(*self.args)\n+                # Evaluate the result before converting to Float\n+                if hasattr(result, 'evalf'):\n+                    result = result.evalf(prec)\n+                return Float(result, prec)\n             except (AttributeError, TypeError, ValueError):\n                 return\n \n"}
{"instance_id":"sympy__sympy-12419","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 372487664c..51df9cff6c 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -302,6 +302,16 @@ def _eval_simplify(self, ratio=1.7, measure=None):\n         return factor_sum(result, limits=self.limits)\n \n     def _eval_summation(self, f, x):\n+        from sympy import MatrixElement, Identity, ask, Q\n+        if isinstance(f, MatrixElement):\n+            matrix = f.parent\n+            # If matrix is identity, handle the double sum case\n+            if ask(Q.diagonal(matrix)) and ask(Q.integer_elements(matrix)):\n+                i, j = f.indices\n+                if i == j and matrix.shape[0] == matrix.shape[1]:\n+                    # For identity matrix, diagonal elements are 1, others are 0\n+                    # So sum over all elements equals matrix size\n+                    return matrix.shape[0]\n         return None\n \n     def is_convergent(self):\n"}
{"instance_id":"sympy__sympy-12481","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..26dfba1121 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,27 +894,28 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n-        temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+        if not is_cycle:\n+            # For array form, check for duplicates\n+            if has_dups(temp):\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n-\n-        if not is_cycle and \\\n-                any(i not in temp for i in range(len(temp))):\n-            raise ValueError(\"Integers 0 through %s must be present.\" %\n-                             max(temp))\n+            \n+            # Check all integers are present\n+            if any(i not in temp for i in range(len(temp))):\n+                raise ValueError(\"Integers 0 through %s must be present.\" %\n+                                 max(temp))\n \n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+            # For cycle notation, compose cycles left-to-right\n+            # Convert each cycle to Cycle object and compose\n+            result = Cycle()\n+            for cycle in args:\n+                # Skip empty cycles\n+                if not cycle:\n+                    continue\n+                # Convert current cycle and compose with result\n+                curr = Cycle(*cycle)\n+                result = result * curr\n+            aform = result.list()\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n"}
{"instance_id":"sympy__sympy-12489","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4ac1c2ef3b..c5b2a9a6fc 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -924,8 +924,8 @@ def __new__(cls, *args, **kwargs):\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n@@ -944,7 +944,7 @@ def _af_new(perm):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n@@ -1300,7 +1300,7 @@ def __mul__(self, other):\n         else:\n             b.extend(list(range(len(b), len(a))))\n             perm = [b[i] for i in a] + b[len(a):]\n-        return _af_new(perm)\n+        return type(self)._af_new(perm)\n \n     def commutes_with(self, other):\n         \"\"\"\n@@ -1341,7 +1341,7 @@ def __pow__(self, n):\n             raise NotImplementedError(\n                 'p**p is not defined; do you mean p^p (conjugate)?')\n         n = int(n)\n-        return _af_new(_af_pow(self.array_form, n))\n+        return type(self)._af_new(_af_pow(self.array_form, n))\n \n     def __rxor__(self, i):\n         \"\"\"Return self(i) when ``i`` is an int.\n@@ -1519,7 +1519,7 @@ def __invert__(self):\n         >>> p*~p == ~p*p == Permutation([0, 1, 2, 3])\n         True\n         \"\"\"\n-        return _af_new(_af_invert(self._array_form))\n+        return type(self)._af_new(_af_invert(self._array_form))\n \n     def __iter__(self):\n         \"\"\"Yield elements from array form.\n"}
{"instance_id":"sympy__sympy-13031","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..7cebdd7b43 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -475,9 +475,13 @@ def row_join(self, other):\n         row\n         col_join\n         \"\"\"\n-        # A null matrix can always be stacked (see  #10770)\n-        if self.cols == 0 and self.rows != other.rows:\n-            return self._new(other.rows, 0, []).row_join(other)\n+        # Handle matrices with zero rows while preserving column counts\n+        if self.rows == 0 and other.rows == 0:\n+            return self._new(0, self.cols + other.cols, [])\n+        if self.rows == 0:\n+            return self._new(other.rows, self.cols + other.cols, [])\n+        if other.rows == 0:\n+            return self._new(self.rows, self.cols + other.cols, [])\n \n         if self.rows != other.rows:\n             raise ShapeError(\n"}
{"instance_id":"sympy__sympy-13091","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex db4e971848..6ab9ce5273 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -313,7 +313,7 @@ def __eq__(self, other):\n             try:\n                 other = _sympify(other)\n             except SympifyError:\n-                return False    # sympy != other\n+                return NotImplemented    # sympy != other\n \n             if type(self) != type(other):\n                 return False\n"}
{"instance_id":"sympy__sympy-13372","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 72a5fbae52..03b36b13bc 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1295,18 +1295,22 @@ def evalf(x, prec, options):\n             re, im = xe.as_real_imag()\n             if re.has(re_) or im.has(im_):\n                 raise NotImplementedError\n+            reprec = None\n+            imprec = None\n             if re == 0:\n                 re = None\n-                reprec = None\n             elif re.is_number:\n                 re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                 reprec = prec\n+            else:\n+                raise NotImplementedError\n             if im == 0:\n                 im = None\n-                imprec = None\n             elif im.is_number:\n                 im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                 imprec = prec\n+            else:\n+                raise NotImplementedError\n             r = re, im, reprec, imprec\n         except AttributeError:\n             raise NotImplementedError\n"}
{"instance_id":"sympy__sympy-13480","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d919..5fbb73c786 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\n"}
{"instance_id":"sympy__sympy-13551","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 66aafde2d6..ccdca0430b 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -237,8 +237,31 @@ def _eval_product(self, term, limits):\n         from sympy.concrete.delta import deltaproduct, _has_simple_delta\n         from sympy.concrete.summations import summation\n         from sympy.functions import KroneckerDelta, RisingFactorial\n+        from sympy import expand, Pow, S, Integer\n \n         (k, a, n) = limits\n+        \n+        # Special case for products involving geometric sequences\n+        if term.is_Add:\n+            # Try to match pattern n + 1/2^k\n+            expanded = expand(term)\n+            if len(expanded.args) == 2:\n+                const_term = None\n+                exp_term = None\n+                for arg in expanded.args:\n+                    if not arg.has(k):\n+                        const_term = arg\n+                    elif (isinstance(arg, Pow) and arg.base == S.Half and arg.exp == k) or \\\n+                         (isinstance(arg, Pow) and arg.base == Integer(2) and arg.exp == -k):\n+                        exp_term = arg\n+                \n+                if const_term is not None and exp_term is not None:\n+                    # Direct computation for finite products\n+                    if (n - a).is_Integer and n >= a:\n+                        result = S.One\n+                        for i in range(a, n + 1):\n+                            result *= term.subs(k, i)\n+                        return result\n \n         if k not in term.free_symbols:\n             if (term - 1).is_zero:\n"}
{"instance_id":"sympy__sympy-13615","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 917717bb74..a15e99ef5a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -999,8 +999,12 @@ def _complement(self, other):\n             return Union(a, b)\n \n         if isinstance(other, FiniteSet):\n+            # If there are any non-numeric elements, let the default handling take over\n+            if any(not m.is_number for m in other.args):\n+                return None\n+            # Only handle pure numeric FiniteSets\n             nums = [m for m in other.args if m.is_number]\n-            if nums == []:\n+            if not nums:\n                 return None\n \n         return Set._complement(self, other)\n"}
{"instance_id":"sympy__sympy-13647","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 056d9bc497..4aa75e4d77 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -86,7 +86,7 @@ def entry(i, j):\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\n"}
{"instance_id":"sympy__sympy-13757","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex d5ac051f63..4312dd7ac5 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4049,13 +4049,7 @@ def __mul__(f, g):\n \n     @_sympifyit('g', NotImplemented)\n     def __rmul__(f, g):\n-        if not g.is_Poly:\n-            try:\n-                g = f.__class__(g, *f.gens)\n-            except PolynomialError:\n-                return g*f.as_expr()\n-\n-        return g.mul(f)\n+        return f.__class__(g * f.as_expr(), *f.gens)\n \n     @_sympifyit('n', NotImplemented)\n     def __pow__(f, n):\n"}
{"instance_id":"sympy__sympy-13798","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex ad4d7d9613..495cfd22ac 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -156,11 +156,17 @@ def __init__(self, settings=None):\n             \"times\": r\" \\times \"\n         }\n \n-        self._settings['mul_symbol_latex'] = \\\n-            mul_symbol_table[self._settings['mul_symbol']]\n+        mul_symbol = self._settings['mul_symbol']\n+        if mul_symbol in mul_symbol_table:\n+            self._settings['mul_symbol_latex'] = mul_symbol_table[mul_symbol]\n+        else:\n+            # Handle custom multiplication symbol\n+            self._settings['mul_symbol_latex'] = f\" {mul_symbol} \" if mul_symbol is not None else \" \"\n \n+        # For numbers, use the predefined symbol if available, otherwise use custom symbol\n+        number_mul_symbol = mul_symbol or 'dot'\n         self._settings['mul_symbol_latex_numbers'] = \\\n-            mul_symbol_table[self._settings['mul_symbol'] or 'dot']\n+            mul_symbol_table[number_mul_symbol] if number_mul_symbol in mul_symbol_table else f\" {number_mul_symbol} \"\n \n         self._delim_dict = {'(': ')', '[': ']'}\n \n"}
{"instance_id":"sympy__sympy-13852","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py\nindex b8e2b66195..fe5a5253ef 100644\n--- a/sympy/functions/special/zeta_functions.py\n+++ b/sympy/functions/special/zeta_functions.py\n@@ -291,7 +291,7 @@ def _eval_expand_func(self, **hints):\n         from sympy import log, expand_mul, Dummy, exp_polar, I\n         s, z = self.args\n         if s == 1:\n-            return -log(1 + exp_polar(-I*pi)*z)\n+            return -log(1 - z)\n         if s.is_Integer and s <= 0:\n             u = Dummy('u')\n             start = u/(1 - u)\n"}
{"instance_id":"sympy__sympy-13877","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 97cde62e26..cebea3e039 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -380,15 +380,17 @@ def cofactor_matrix(self, method=\"berkowitz\"):\n         return self._new(self.rows, self.cols,\n                          lambda i, j: self.cofactor(i, j, method))\n \n-    def det(self, method=\"bareiss\"):\n+    def det(self, method=\"auto\"):\n         \"\"\"Computes the determinant of a matrix.  If the matrix\n         is at most 3x3, a hard-coded formula is used.\n         Otherwise, the determinant using the method `method`.\n \n \n         Possible values for \"method\":\n-          bareis\n-          berkowitz\n+          auto    - Choose between bareiss/berkowitz automatically\n+          bareis  - alias for bareiss\n+          bareiss - Bareiss algorithm (best for numeric matrices)\n+          berkowitz - Berkowitz algorithm (best for symbolic matrices)\n           lu\n         \"\"\"\n \n@@ -398,6 +400,13 @@ def det(self, method=\"bareiss\"):\n             method = \"bareiss\"\n         if method == \"det_lu\":\n             method = \"lu\"\n+        if method == \"auto\":\n+            # Check if matrix contains symbolic elements\n+            if any(getattr(i, 'is_Symbol', False) or getattr(i, 'has', lambda x: False)(Symbol)\n+                   for i in self):\n+                method = \"berkowitz\"\n+            else:\n+                method = \"bareiss\"\n         if method not in (\"bareiss\", \"berkowitz\", \"lu\"):\n             raise ValueError(\"Determinant method '%s' unrecognized\" % method)\n \n"}
{"instance_id":"sympy__sympy-13974","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 9dd10d219e..6612c8ffa2 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -257,6 +257,28 @@ def _eval_expand_tensorproduct(self, **hints):\n         else:\n             return self\n \n+    def _eval_power(self, exp):\n+        \"\"\"Evaluate powers of tensor products.\"\"\"\n+        if not exp.is_Integer or exp < 0:\n+            return None\n+\n+        # For positive integer powers, compute power of each component\n+        if len(self.args) == 2:  # Most common case: binary tensor product\n+            left, right = self.args\n+            # Compute powers of each part\n+            left_pow = left ** exp\n+            right_pow = right ** exp\n+            # Special case: if either evaluation gives None, return None\n+            if left_pow is None or right_pow is None:\n+                return None\n+            return TensorProduct(left_pow, right_pow)\n+        else:\n+            # For general case with multiple arguments\n+            powered_args = [arg ** exp for arg in self.args]\n+            if None in powered_args:\n+                return None\n+            return TensorProduct(*powered_args)\n+\n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n"}
{"instance_id":"sympy__sympy-14248","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..86f08aa574 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -389,6 +389,12 @@ def _print_Gradient(self, expr):\n     def _print_Mul(self, expr):\n         from sympy.core.power import Pow\n         from sympy.physics.units import Quantity\n+        from sympy.matrices.expressions.matexpr import MatrixExpr\n+\n+        # Special handling for -1 * MatrixExpr cases\n+        if len(expr.args) >= 2 and expr.args[0] == -1 and any(isinstance(arg, MatrixExpr) for arg in expr.args[1:]):\n+            return \"- \" + self._print(Mul(*expr.args[1:], evaluate=False))\n+\n         include_parens = False\n         if _coeff_isneg(expr):\n             expr = -expr\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..46b38a4d38 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -257,9 +257,14 @@ def _print_DeferredVector(self, expr):\n         return expr.name\n \n     def _print_Mul(self, expr):\n+        from sympy.matrices.expressions.matexpr import MatrixExpr\n \n         prec = precedence(expr)\n \n+        # Special handling for -1 * MatrixExpr cases\n+        if len(expr.args) >= 2 and expr.args[0] == -1 and any(isinstance(arg, MatrixExpr) for arg in expr.args[1:]):\n+            return \"-\" + \"*\".join(self._print(arg) for arg in expr.args[1:])\n+\n         c, e = expr.as_coeff_Mul()\n         if c < 0:\n             expr = _keep_coeff(-c, e)\n"}
{"instance_id":"sympy__sympy-14531","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex cc1d19fcce..ab0c3f9e3e 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -576,6 +576,21 @@ def _print_Rational(self, expr):\n                 return \"S(%s)/%s\" % (expr.p, expr.q)\n             return \"%s/%s\" % (expr.p, expr.q)\n \n+    def _print_Eq(self, expr):\n+        # Use _print to ensure settings are propagated\n+        return \"Eq(%s)\" % self.stringify([self._print(arg) for arg in expr.args], \", \")\n+\n+    def _print_Limit(self, expr):\n+        e, z, z0, dir = expr.args\n+        # Use _print to ensure settings are propagated\n+        e_str = self._print(e)\n+        z_str = self._print(z)\n+        z0_str = self._print(z0)\n+        if str(dir) == \"+\":\n+            return \"Limit(%s, %s, %s)\" % (e_str, z_str, z0_str)\n+        else:\n+            return \"Limit(%s, %s, %s, dir='%s')\" % (e_str, z_str, z0_str, dir)\n+\n     def _print_PythonRational(self, expr):\n         if expr.q == 1:\n             return str(expr.p)\n"}
{"instance_id":"sympy__sympy-14711","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..8849119218 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -57,6 +57,8 @@ def __hash__(self):\n \n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n"}
{"instance_id":"sympy__sympy-14976","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex d06901425d..3047f0d38a 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -331,6 +331,12 @@ def _print_Float(self, e):\n         args = str(tuple(map(int, e._mpf_)))\n         return '{func}({args})'.format(func=self._module_format('mpmath.mpf'), args=args)\n \n+    def _print_Rational(self, e):\n+        return '{func}(\"{p}/{q}\")'.format(\n+            func=self._module_format('mpmath.mpf'),\n+            p=e.p,\n+            q=e.q)\n+\n \n     def _print_uppergamma(self, e):\n         return \"{0}({1}, {2}, {3})\".format(\n"}
{"instance_id":"sympy__sympy-15017","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\nindex 9be94a8631..9790712755 100644\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1\n         return self\n \n     def __setitem__(self, index, value):\n@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 1\n         return self\n \n     def __setitem__(self, index, value):\n"}
{"instance_id":"sympy__sympy-15345","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..60e487b12e 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -116,6 +116,9 @@ def _print_Derivative(self, expr):\n         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]\n         return \"Hold[D[\" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + \"]]\"\n \n+    def _print_Max(self, expr):\n+        return \"Max[\" + \", \".join(self.doprint(arg) for arg in expr.args) + \"]\"\n+\n \n def mathematica_code(expr, **settings):\n     r\"\"\"Converts an expr to a string of the Wolfram Mathematica code\n"}
{"instance_id":"sympy__sympy-15349","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py\nindex b84e7cb95a..7eae8d73d0 100644\n--- a/sympy/algebras/quaternion.py\n+++ b/sympy/algebras/quaternion.py\n@@ -529,7 +529,7 @@ def to_rotation_matrix(self, v=None):\n \n         m10 = 2*s*(q.b*q.c + q.d*q.a)\n         m11 = 1 - 2*s*(q.b**2 + q.d**2)\n-        m12 = 2*s*(q.c*q.d + q.b*q.a)\n+        m12 = 2*s*(q.c*q.d - q.b*q.a)\n \n         m20 = 2*s*(q.b*q.d - q.c*q.a)\n         m21 = 2*s*(q.c*q.d + q.b*q.a)\n"}
{"instance_id":"sympy__sympy-15599","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc..cb2b219b48 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -51,6 +51,17 @@ def doit(p, q):\n                         return S.Zero\n                     elif p.is_odd:\n                         return S.One\n+                    # Handle coefficient cases for modulo 2\n+                    elif p.is_Mul and any(arg.is_integer for arg in p.args):\n+                        coeff = S.One\n+                        other = []\n+                        for arg in p.args:\n+                            if arg.is_Number:\n+                                coeff *= arg\n+                            else:\n+                                other.append(arg)\n+                        if coeff.is_integer and coeff % 2 != 0:\n+                            return cls(Mul(*other), 2)\n \n             if hasattr(p, '_eval_Mod'):\n                 rv = getattr(p, '_eval_Mod')(q)\n"}
{"instance_id":"sympy__sympy-15809","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 5f9fe73c5c..c4297e3fa7 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -339,8 +339,10 @@ def real_root(arg, n=None, evaluate=None):\n \n class MinMaxBase(Expr, LatticeOp):\n     def __new__(cls, *args, **assumptions):\n+        from sympy.core.singleton import S\n+\n         if not args:\n-            raise ValueError(\"The Max/Min functions must have arguments.\")\n+            return S.NegativeInfinity if cls.__name__ == 'Min' else S.Infinity\n \n         args = (sympify(arg) for arg in args)\n \n"}
{"instance_id":"sympy__sympy-15875","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 83a5f2aedc..5ff5b667a3 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -536,8 +536,7 @@ def _eval_is_zero(self):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        complex_terms = False\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n@@ -546,10 +545,14 @@ def _eval_is_zero(self):\n                     nz.append(a)\n                 else:\n                     return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+            elif a.is_imaginary or not a.is_real:\n+                complex_terms = True\n+                if a.is_zero is False:\n+                    nz.append(a)\n+                elif a.is_zero:\n+                    z += 1\n+                else:\n+                    return\n             else:\n                 return\n         if z == len(self.args):\n@@ -558,12 +561,11 @@ def _eval_is_zero(self):\n             return None\n         b = self.func(*nz)\n         if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n-        if b.is_zero is False:\n+            return True\n+        if b.is_zero is False and not complex_terms:\n             return False\n+        # If we have complex terms and couldn't determine zero, return None\n+        return None\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n"}
{"instance_id":"sympy__sympy-15976","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 3f8b8d49e0..822b4a1b2e 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -772,6 +772,11 @@ def translate(s):\n             else:\n                 return s\n \n+        # Handle symbols with numbers directly in their name\n+        if sym.name.isalnum() and not sym.name.isalpha():\n+            x.appendChild(self.dom.createTextNode(sym.name))\n+            return x\n+\n         name, supers, subs = split_super_sub(sym.name)\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n"}
{"instance_id":"sympy__sympy-16450","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex c6b511f206..2cd989680a 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -251,8 +251,12 @@ def posify(eq):\n             eq[i] = e.subs(reps)\n         return f(eq), {r: s for s, r in reps.items()}\n \n-    reps = {s: Dummy(s.name, positive=True)\n-                 for s in eq.free_symbols if s.is_positive is None}\n+    reps = {}\n+    for s in eq.free_symbols:\n+        if s.is_positive is None:\n+            assumptions = s._assumptions.copy()\n+            assumptions['positive'] = True\n+            reps[s] = Dummy(s.name, **assumptions)\n     eq = eq.subs(reps)\n     return eq, {r: s for s, r in reps.items()}\n \n"}
{"instance_id":"sympy__sympy-16597","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/assumptions/sathandlers.py b/sympy/assumptions/sathandlers.py\nindex 3f71ae5a60..c14937d74e 100644\n--- a/sympy/assumptions/sathandlers.py\n+++ b/sympy/assumptions/sathandlers.py\n@@ -376,7 +376,10 @@ def register_fact(klass, fact, registry=fact_registry):\n     (ImaginaryUnit, CheckOldAssump(Q.nonpositive)),\n     (ImaginaryUnit, CheckOldAssump(Q.rational)),\n     (ImaginaryUnit, CheckOldAssump(Q.irrational)),\n-    (ImaginaryUnit, CheckOldAssump(Q.imaginary))\n+    (ImaginaryUnit, CheckOldAssump(Q.imaginary)),\n+    \n+    # Even numbers are always finite\n+    (Number, Implies(Q.even, Q.finite))\n     ]:\n \n     register_fact(klass, fact)\n"}
{"instance_id":"sympy__sympy-16766","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex aaad985df9..ef63937c67 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -43,6 +43,10 @@ def _print_Symbol(self, expr):\n     def _print_module(self, expr):\n         raise ValueError('Modules in the expression are unacceptable')\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n def python(expr, **settings):\n     \"\"\"Return Python interpretation of passed expression\n"}
{"instance_id":"sympy__sympy-16792","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd7..c722fe1ae9 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -319,6 +319,10 @@ def __init__(self, name, datatype=None, dimensions=None, precision=None):\n                 \"The dimension argument must be a sequence of tuples\")\n \n         self._name = name\n+        # Handle MatrixSymbol dimensions automatically\n+        if isinstance(name, MatrixSymbol) and dimensions is None:\n+            dimensions = [(0, s-1) for s in name.shape]\n+\n         self._datatype = {\n             'C': datatype.cname,\n             'FORTRAN': datatype.fname,\n"}
{"instance_id":"sympy__sympy-16886","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/crypto/crypto.py b/sympy/crypto/crypto.py\nindex ca552191c0..0c556b6efb 100644\n--- a/sympy/crypto/crypto.py\n+++ b/sympy/crypto/crypto.py\n@@ -1520,7 +1520,7 @@ def decipher_kid_rsa(msg, key):\n     \"..-\": \"U\", \"...-\": \"V\",\n     \".--\": \"W\", \"-..-\": \"X\",\n     \"-.--\": \"Y\", \"--..\": \"Z\",\n-    \"-----\": \"0\", \"----\": \"1\",\n+    \"-----\": \"0\", \".----\": \"1\",\n     \"..---\": \"2\", \"...--\": \"3\",\n     \"....-\": \"4\", \".....\": \"5\",\n     \"-....\": \"6\", \"--...\": \"7\",\n"}
{"instance_id":"sympy__sympy-17139","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..c8f8f4c773 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,6 +501,8 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n+        if not rv.exp.is_real:\n+            return rv\n         if (rv.exp < 0) == True:\n             return rv\n         if (rv.exp > max) == True:\n"}
{"instance_id":"sympy__sympy-17318","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 216ae26204..37da7129de 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,8 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+    if not a:\n+        return S.One, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n"}
{"instance_id":"sympy__sympy-17630","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..82350ad603 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -162,10 +162,31 @@ def structurally_equal(self, other):\n             and self.colblocksizes == other.colblocksizes)\n \n     def _blockmul(self, other):\n+        from sympy.matrices.expressions import ZeroMatrix\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n-\n+            blocks = []\n+            for i in range(self.blockshape[0]):\n+                row = []\n+                for j in range(other.blockshape[1]):\n+                    sum_block = None\n+                    for k in range(self.blockshape[1]):\n+                        left = self.blocks[i, k]\n+                        right = other.blocks[k, j]\n+                        \n+                        # Handle zero blocks while preserving matrix dimensions\n+                        if (left.is_zero or right.is_zero):\n+                            prod = ZeroMatrix(left.rows, right.cols)\n+                        else:\n+                            prod = left * right\n+                            \n+                        if sum_block is None:\n+                            sum_block = prod\n+                        else:\n+                            sum_block = sum_block + prod\n+                    row.append(sum_block)\n+                blocks.append(row)\n+            return BlockMatrix(blocks)\n         return self * other\n \n     def _blockadd(self, other):\n"}
{"instance_id":"sympy__sympy-17655","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..a8eaa02936 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -278,6 +278,18 @@ def __mul__(self, factor):\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, factor):\n+        \"\"\"Multiply point's coordinates by a factor from the left.\n+\n+        This method is called when the point is the right operand\n+        of the multiplication.\n+\n+        See Also\n+        ========\n+        __mul__\n+        \"\"\"\n+        return self.__mul__(factor)\n+\n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]\n"}
{"instance_id":"sympy__sympy-18189","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..b43f5c1dcf 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                            for t in diophantine(eq, param, permute=permute)}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n"}
{"instance_id":"sympy__sympy-18199","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 9a3052d4c3..d7b4f40da6 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -770,6 +770,11 @@ def nthroot_mod(a, n, p, all_roots=False):\n     a, n, p = as_int(a), as_int(n), as_int(p)\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n+    # Handle the case where a ≡ 0 (mod p)\n+    if a % p == 0:\n+        if all_roots:\n+            return [0]\n+        return 0\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n     if not is_nthpow_residue(a, n, p):\n         return None\n"}
{"instance_id":"sympy__sympy-18211","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex f581bfa3c4..e7753b4abc 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -389,10 +389,17 @@ def __nonzero__(self):\n     def _eval_as_set(self):\n         # self is univariate and periodicity(self, x) in (0, None)\n         from sympy.solvers.inequalities import solve_univariate_inequality\n+        from sympy.sets import ConditionSet\n+        from sympy import S\n         syms = self.free_symbols\n         assert len(syms) == 1\n         x = syms.pop()\n-        return solve_univariate_inequality(self, x, relational=False)\n+        try:\n+            return solve_univariate_inequality(self, x, relational=False)\n+        except NotImplementedError:\n+            # For equations that cannot be solved explicitly (e.g. transcendental equations)\n+            # return a ConditionSet instead\n+            return ConditionSet(x, self, S.Reals)\n \n     @property\n     def binary_symbols(self):\n"}
{"instance_id":"sympy__sympy-18698","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f..1c9e9481ad 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -3234,7 +3234,30 @@ def sqf_list(f, all=False):\n         else:  # pragma: no cover\n             raise OperationNotSupported(f, 'sqf_list')\n \n-        return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]\n+        # Convert to list of (poly, multiplicity) pairs\n+        result = [(f.per(g), k) for g, k in factors]\n+        \n+        # Group factors by multiplicity\n+        by_mult = {}\n+        for factor, mult in result:\n+            if mult in by_mult:\n+                by_mult[mult].append(factor)\n+            else:\n+                by_mult[mult] = [factor]\n+        \n+        # Combine factors with same multiplicity\n+        combined = []\n+        for mult, fact_list in by_mult.items():\n+            if len(fact_list) > 1:\n+                # Multiply the factors together and factor the result\n+                prod = fact_list[0]\n+                for factor in fact_list[1:]:\n+                    prod *= factor\n+                combined.append((prod.factor(), mult))\n+            else:\n+                combined.append((fact_list[0], mult))\n+        \n+        return f.rep.dom.to_sympy(coeff), sorted(combined, key=lambda x: x[1])\n \n     def sqf_list_include(f, all=False):\n         \"\"\"\n"}
{"instance_id":"sympy__sympy-18763","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8743723ea0..2cf540a6ba 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -703,8 +703,8 @@ def _print_Subs(self, subs):\n         latex_new = (self._print(e) for e in new)\n         latex_subs = r'\\\\ '.join(\n             e[0] + '=' + e[1] for e in zip(latex_old, latex_new))\n-        return r'\\left. %s \\right|_{\\substack{ %s }}' % (latex_expr,\n-                                                         latex_subs)\n+        return r'\\left. \\left(%s\\right) \\right|_{\\substack{ %s }}' % (latex_expr,\n+                                                          latex_subs)\n \n     def _print_Integral(self, expr):\n         tex, symbols = \"\", []\n"}
{"instance_id":"sympy__sympy-19040","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex 68b69d1a24..d25ef95aec 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -6252,6 +6252,24 @@ def factor_list(f, *gens, **args):\n     (2, [(x + y, 1), (x**2 + 1, 2)])\n \n     \"\"\"\n+    if 'extension' in args:\n+        # First get regular factorization\n+        regular_args = dict(args)\n+        regular_args.pop('extension')\n+        coeff, regular_factors = _generic_factor_list(f, gens, regular_args, method='factor')\n+        \n+        # Try factorization with extension\n+        ext_coeff, ext_factors = _generic_factor_list(f, gens, args, method='factor')\n+        \n+        # Compare total degrees\n+        reg_deg = sum(deg for _, deg in regular_factors)\n+        ext_deg = sum(deg for _, deg in ext_factors)\n+        \n+        # If extension factorization dropped factors, use regular factorization\n+        if ext_deg < reg_deg:\n+            return coeff, regular_factors\n+        return ext_coeff, ext_factors\n+    \n     return _generic_factor_list(f, gens, args, method='factor')\n \n \n"}
{"instance_id":"sympy__sympy-19346","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/repr.py b/sympy/printing/repr.py\nindex c936a692c0..56815ab841 100644\n--- a/sympy/printing/repr.py\n+++ b/sympy/printing/repr.py\n@@ -250,6 +250,17 @@ def _print_tuple(self, expr):\n         else:\n             return \"(%s)\" % self.reprify(expr, \", \")\n \n+    def _print_set(self, expr):\n+        if not expr:\n+            return \"set()\"\n+        return \"{%s}\" % self.reprify(sorted(expr, key=str), \", \")\n+\n+    def _print_dict(self, expr):\n+        if not expr:\n+            return \"{}\"\n+        items = sorted(expr.items(), key=lambda x: str(x[0]))\n+        return \"{%s}\" % \", \".join(\"%s: %s\" % (self._print(k), self._print(v)) for k, v in items)\n+\n     def _print_WildFunction(self, expr):\n         return \"%s('%s')\" % (expr.__class__.__name__, expr.name)\n \n"}
{"instance_id":"sympy__sympy-19495","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 8b024abea2..845775092e 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -965,6 +965,9 @@ def subs(self, *args, **kwargs):\n                 # using d*m so Subs will be used on dummy variables\n                 # in things like Derivative(f(x, y), x) in which x\n                 # is both free and bound\n+                # For ConditionSet and ImageSet, preserve bound variables\n+                if hasattr(rv, 'free_symbols') and old not in rv.free_symbols:\n+                    continue\n                 rv = rv._subs(old, d*m, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n"}
{"instance_id":"sympy__sympy-19637","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex a3f1ce2851..4266773dff 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -513,7 +513,7 @@ def kernS(s):\n             while kern in s:\n                 kern += choice(string.ascii_letters + string.digits)\n             s = s.replace(' ', kern)\n-        hit = kern in s\n+            hit = kern in s\n \n     for i in range(2):\n         try:\n"}
{"instance_id":"sympy__sympy-19783","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py\nindex 17da3cfd2c..c0c8f4cc97 100644\n--- a/sympy/physics/quantum/dagger.py\n+++ b/sympy/physics/quantum/dagger.py\n@@ -85,5 +85,12 @@ def __new__(cls, arg):\n             return obj\n         return Expr.__new__(cls, arg)\n \n+    def __mul__(self, other):\n+        from sympy.physics.quantum.operator import IdentityOperator\n+        if isinstance(other, IdentityOperator):\n+            return self\n+        from sympy import Mul\n+        return Mul(self, other)\n+\n adjoint.__name__ = \"Dagger\"\n adjoint._sympyrepr = lambda a, b: \"Dagger(%s)\" % b._print(a.args[0])\n"}
{"instance_id":"sympy__sympy-19954","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..0e59a7216a 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2194,18 +2194,20 @@ def _number_blocks(blocks):\n                 # check if the system is minimal with\n                 # respect to the already discovere ones\n                 minimal = True\n-                to_remove = []\n+                to_remove_indices = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove_indices.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n-                # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                # remove non-minimal blocks in reverse order to maintain correct indices\n+                for i in sorted(to_remove_indices, reverse=True):\n+                    del num_blocks[i]\n+                    del blocks[i]\n+                    del rep_blocks[i]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n"}
{"instance_id":"sympy__sympy-20154","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..cf7e141258 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1802,9 +1802,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n"}
{"instance_id":"sympy__sympy-20428","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/polyclasses.py b/sympy/polys/polyclasses.py\nindex 238a0f0b25..1c0acac4bf 100644\n--- a/sympy/polys/polyclasses.py\n+++ b/sympy/polys/polyclasses.py\n@@ -585,7 +585,10 @@ def l1_norm(f):\n \n     def clear_denoms(f):\n         \"\"\"Clear denominators, but keep the ground domain. \"\"\"\n+        from sympy.polys.densebasic import dmp_strip\n         coeff, F = dmp_clear_denoms(f.rep, f.lev, f.dom)\n+        # Ensure proper normalization of zero polynomials\n+        F = dmp_strip(F, f.lev)\n         return coeff, f.per(F)\n \n     def integrate(f, m=1, j=0):\n"}
{"instance_id":"sympy__sympy-20438","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 3c4aa86e36..d62b76643d 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1276,7 +1276,15 @@ def _contains(self, other):\n         return Or(*[s.contains(other) for s in self.args])\n \n     def is_subset(self, other):\n-        return fuzzy_and(s.is_subset(other) for s in self.args)\n+        from sympy import FiniteSet\n+        # First try comparing as ProductSets\n+        ret = fuzzy_and(s.is_subset(other) for s in self.args)\n+        if ret is not None:\n+            return ret\n+        # If other is FiniteSet and first check failed, convert self to FiniteSet\n+        if isinstance(other, FiniteSet):\n+            return self.rewrite(FiniteSet).is_subset(other)\n+        return None\n \n     def as_relational(self, symbol):\n         \"\"\"Rewrite a Union in terms of equalities and logic operators. \"\"\"\n"}
{"instance_id":"sympy__sympy-20590","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/_print_helpers.py b/sympy/core/_print_helpers.py\nindex 96d7e72676..40ac1cec31 100644\n--- a/sympy/core/_print_helpers.py\n+++ b/sympy/core/_print_helpers.py\n@@ -16,6 +16,7 @@ class Printable:\n \n     This also adds support for LaTeX printing in jupyter notebooks.\n     \"\"\"\n+    __slots__ = ()\n \n     # Note, we always use the default ordering (lex) in __str__ and __repr__,\n     # regardless of the global setting. See issue 5487.\n"}
{"instance_id":"sympy__sympy-20801","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..a2557d5251 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,10 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n"}
{"instance_id":"sympy__sympy-20916","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/pretty/pretty_symbology.py b/sympy/printing/pretty/pretty_symbology.py\nindex 3f7c4a2dc7..9337a06a32 100644\n--- a/sympy/printing/pretty/pretty_symbology.py\n+++ b/sympy/printing/pretty/pretty_symbology.py\n@@ -518,6 +518,17 @@ def pretty_symbol(symb_name, bold_name=False):\n     name, sups, subs = split_super_sub(symb_name)\n \n     def translate(s, bold_name) :\n+        # Check if string ends with digit after Greek letter\n+        if len(s) > 1 and s[-1].isdigit():\n+            base = s[:-1]\n+            if bold_name:\n+                gG = greek_bold_unicode.get(base)\n+            else:\n+                gG = greek_unicode.get(base)\n+            if gG is not None:\n+                # Convert digit to subscript\n+                return gG + sub.get(s[-1], s[-1])\n+\n         if bold_name:\n             gG = greek_bold_unicode.get(s)\n         else:\n"}
{"instance_id":"sympy__sympy-21379","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex bfec61de64..482d9ebb56 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4394,9 +4394,11 @@ def _parallel_poly_from_expr(exprs, opt):\n     if not opt.gens:\n         raise PolificationFailed(opt, origs, exprs, True)\n \n-    for k in opt.gens:\n-        if isinstance(k, Piecewise):\n-            raise PolynomialError(\"Piecewise generators do not make sense\")\n+    # Only check direct polynomial variables for Piecewise\n+    if opt.polys:\n+        for k in opt.gens:\n+            if isinstance(k, Piecewise):\n+                raise PolynomialError(\"Piecewise generators do not make sense\")\n \n     coeffs_list, lengths = [], []\n \n"}
{"instance_id":"sympy__sympy-21596","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py\nindex c54dc8f72a..cd41939b89 100644\n--- a/sympy/sets/handlers/intersection.py\n+++ b/sympy/sets/handlers/intersection.py\n@@ -278,7 +278,7 @@ def intersection_sets(self, other): # noqa:F811\n \n     if other == S.Reals:\n         from sympy.core.function import expand_complex\n-        from sympy.solvers.solvers import denoms, solve_linear\n+        from sympy.solvers.solvers import denoms, solve\n         from sympy.core.relational import Eq\n         f = self.lamda.expr\n         n = self.lamda.variables[0]\n@@ -292,34 +292,27 @@ def intersection_sets(self, other): # noqa:F811\n         re = re.subs(n_, n)\n         im = im.subs(n_, n)\n         ifree = im.free_symbols\n-        lam = Lambda(n, re)\n+        \n         if im.is_zero:\n-            # allow re-evaluation\n-            # of self in this case to make\n-            # the result canonical\n-            pass\n+            return self\n         elif im.is_zero is False:\n             return S.EmptySet\n         elif ifree != {n}:\n             return None\n         else:\n-            # univarite imaginary part in same variable\n-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])\n-            if x and all(i == n for i in x):\n-                base_set -= FiniteSet(xis)\n-            else:\n-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)\n-        # exclude values that make denominators 0\n-        for i in denoms(f):\n-            if i.has(n):\n-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))\n-                if sol != []:\n-                    x, xis = sol\n-                    if x and all(i == n for i in x):\n-                        base_set -= FiniteSet(xis)\n-                else:\n-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)\n-        return imageset(lam, base_set)\n+            # Find values where imaginary part is zero\n+            zeros = solve(im, n)\n+            if not zeros:\n+                return S.EmptySet\n+            \n+            # Filter base set to only include points where im(z) = 0\n+            filtered_base = FiniteSet(*[z for z in zeros if z in base_set])\n+            if not filtered_base:\n+                return S.EmptySet\n+                \n+            # Apply real part expression to filtered points\n+            lam = Lambda(n, re)\n+            return imageset(lam, filtered_base)\n \n     elif isinstance(other, Interval):\n         from sympy.solvers.solveset import (invert_real, invert_complex,\n"}
{"instance_id":"sympy__sympy-21612","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 2e4a45ad20..172929ad70 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -382,11 +382,11 @@ def convert_frac(frac):\n \n     expr_top = convert_expr(frac.upper)\n     expr_bot = convert_expr(frac.lower)\n-    inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)\n     if expr_top == 1:\n-        return inverse_denom\n+        return sympy.Pow(expr_bot, -1, evaluate=False)\n     else:\n-        return sympy.Mul(expr_top, inverse_denom, evaluate=False)\n+        # Create a proper fraction by using division to maintain structure\n+        return sympy.Mul(expr_top, 1, evaluate=False) / sympy.Mul(expr_bot, 1, evaluate=False)\n \n def convert_binom(binom):\n     expr_n = convert_expr(binom.n)\n"}
{"instance_id":"sympy__sympy-21847","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..d2cd3451e5 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n"}
{"instance_id":"sympy__sympy-21930","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\nindex d19ee2fc63..88c1fc3a51 100644\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -478,6 +478,8 @@ def __repr__(self):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n+        if hasattr(self, 'exp') and self.exp != 1:\n+            return \"{b^\\\\dagger_{%s}}^{%s}\" % (self.state.name, self.exp)\n         return \"b^\\\\dagger_{%s}\" % self.state.name\n \n B = AnnihilateBoson\n"}
{"instance_id":"sympy__sympy-22080","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex b669a2c783..ff6fe71167 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -234,6 +234,14 @@ def _print_ComplexInfinity(self, expr):\n \n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n+        # Handle special case of negative Mod\n+        if expr.args and expr.args[0].is_Mul and expr.args[0].args and expr.args[0].args[0] == -1:\n+            # For cases like -Mod(x,y), ensure it becomes -(x % y)\n+            inner_mul = expr.args[0].args[1] if len(expr.args[0].args) > 1 else expr.args[0]\n+            return '(-({} % {}))'.format(\n+                self.parenthesize(inner_mul, PREC),\n+                self.parenthesize(expr.args[1], PREC)\n+            )\n         return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n \n     def _print_Piecewise(self, expr):\n"}
{"instance_id":"sympy__sympy-22456","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex a02714b174..38ca097eee 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -895,7 +895,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n"}
{"instance_id":"sympy__sympy-22714","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..09f76a9dfc 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,8 +152,6 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n-            raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n \n@@ -166,6 +164,9 @@ def __new__(cls, *args, **kwargs):\n             coords = coords.xreplace({\n                 f: simplify(nsimplify(f, rational=True))\n                  for f in coords.atoms(Float)})\n+            # Only check for imaginary coordinates when evaluating\n+            if any(a.is_number and im(a) for a in coords):\n+                raise ValueError('Imaginary coordinates are not permitted.')\n \n         # return 2D or 3D instances\n         if len(coords) == 2:\n"}
{"instance_id":"sympy__sympy-22914","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 44ffd5ed74..3aa000fb1e 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -39,6 +39,12 @@ def _print_Symbol(self, expr):\n     def _print_module(self, expr):\n         raise ValueError('Modules in the expression are unacceptable')\n \n+    def _print_Min(self, expr):\n+        return \"min({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n+    def _print_Max(self, expr):\n+        return \"max({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n \n def python(expr, **settings):\n     \"\"\"Return Python interpretation of passed expression\n"}
{"instance_id":"sympy__sympy-23262","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 44ffd5ed74..6e96900483 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -39,6 +39,12 @@ def _print_Symbol(self, expr):\n     def _print_module(self, expr):\n         raise ValueError('Modules in the expression are unacceptable')\n \n+    def _print_tuple(self, expr):\n+        if len(expr) == 1:\n+            return \"(%s,)\" % self._print(expr[0])\n+        else:\n+            return \"(%s)\" % self.stringify(expr, \", \")\n+\n \n def python(expr, **settings):\n     \"\"\"Return Python interpretation of passed expression\n"}
{"instance_id":"sympy__sympy-23413","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/matrices/normalforms.py b/sympy/polys/matrices/normalforms.py\nindex 30f5534b08..5bdde88053 100644\n--- a/sympy/polys/matrices/normalforms.py\n+++ b/sympy/polys/matrices/normalforms.py\n@@ -397,7 +397,22 @@ def hermite_normal_form(A, *, D=None, check_rank=False):\n     \"\"\"\n     if not A.domain.is_ZZ:\n         raise DMDomainError('Matrix must be over domain ZZ.')\n-    if D is not None and (not check_rank or A.convert_to(QQ).rank() == A.shape[0]):\n+        \n+    # Convert to QQ for rank computation to avoid domain issues\n+    A_QQ = A.convert_to(QQ)\n+    true_rank = A_QQ.rank()\n+    orig_rows = A.shape[0]\n+    \n+    if D is not None and (not check_rank or true_rank == orig_rows):\n         return _hermite_normal_form_modulo_D(A, D)\n     else:\n-        return _hermite_normal_form(A)\n+        result = _hermite_normal_form(A)\n+        # Preserve rows if we have full row rank but rows were eliminated\n+        if result.shape[0] < orig_rows and true_rank == orig_rows:\n+            from sympy.polys.matrices import DomainMatrix\n+            matrix_list = result.to_dense().rep.to_list()\n+            zero_row = [A.domain.zero] * result.shape[1]\n+            while len(matrix_list) < orig_rows:\n+                matrix_list.append(zero_row[:])\n+            result = DomainMatrix(matrix_list, (orig_rows, result.shape[1]), A.domain)\n+        return result\n"}
{"instance_id":"sympy__sympy-23534","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex f4a555c13f..2aca8bab27 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -791,7 +791,7 @@ def literal(s):\n         return tuple(result)\n     else:\n         for name in names:\n-            result.append(symbols(name, **args))\n+            result.append(symbols(name, cls=cls, **args))\n \n         return type(names)(result)\n \n"}
{"instance_id":"sympy__sympy-23824","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex 23284e4a92..bf43facfb1 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -694,7 +694,7 @@ def kahane_simplify(expression):\n \n     # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n     # matrices in front of `expression`, so multiply by them:\n-    for i in range(0, first_dum_pos):\n+    for i in range(first_dum_pos - 1, -1, -1):\n         [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n \n     resulting_expr = S.Zero\n"}
{"instance_id":"sympy__sympy-23950","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex b2d4268d12..5ea2212928 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,8 @@ def binary_symbols(self):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        \"\"\"\n+        Returns the set that x is asserted to be in.\n+        For example, Contains(x, S) returns S.\n+        \"\"\"\n+        return self.args[1]\n"}
{"instance_id":"sympy__sympy-24066","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c108..3c09f21578 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -154,6 +154,8 @@ def _collect_factor_and_dimension(self, expr):\n         Return tuple with scale factor expression and dimension expression.\n         \"\"\"\n         from sympy.physics.units import Quantity\n+        from sympy import exp\n+        \n         if isinstance(expr, Quantity):\n             return expr.scale_factor, expr.dimension\n         elif isinstance(expr, Mul):\n@@ -190,10 +192,20 @@ def _collect_factor_and_dimension(self, expr):\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n-            fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            if expr.func == exp:\n+                # Handle exponential function\n+                if len(expr.args) != 1:\n+                    raise ValueError(\"exp takes exactly one argument\")\n+                factor, dim = self._collect_factor_and_dimension(expr.args[0])\n+                # Check if the argument is dimensionless\n+                if not self.get_dimension_system().is_dimensionless(dim):\n+                    raise ValueError(\"exp argument must be dimensionless\")\n+                return expr.func(factor), Dimension(1)\n+            else:\n+                fds = [self._collect_factor_and_dimension(\n+                    arg) for arg in expr.args]\n+                return (expr.func(*(f[0] for f in fds)),\n+                        *(d[1] for d in fds))\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n"}
{"instance_id":"sympy__sympy-24213","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n"}
{"instance_id":"sympy__sympy-24443","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf32ba..f0312cd859 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -333,8 +333,13 @@ def _image(r):\n             # both indices\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    if r[i] in gens:\n+                        s = domain.generators[gens.index(r[i])]\n+                    elif r[i]**-1 in gens:\n+                        s = domain.generators[gens.index(r[i]**-1)]**-1\n+                    else:\n+                        s = r[i]\n                 else:\n                     s = r[i]\n                 if s in images:\n"}
{"instance_id":"sympy__sympy-24539","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 12bd2fc920..f48260566c 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -616,10 +616,10 @@ def set_ring(self, new_ring):\n             return new_ring.from_dict(self, self.ring.domain)\n \n     def as_expr(self, *symbols):\n-        if symbols and len(symbols) != self.ring.ngens:\n-            raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n-        else:\n+        if not symbols:\n             symbols = self.ring.symbols\n+        elif len(symbols) != self.ring.ngens:\n+            raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n \n         return expr_from_dict(self.as_expr_dict(), *symbols)\n \n"}
{"instance_id":"sympy__sympy-24562","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 52f7ea45ad..672d58b7ba 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1625,20 +1625,30 @@ def __new__(cls, p, q=None, gcd=None):\n             q = 1\n             gcd = 1\n \n-        if not isinstance(p, SYMPY_INTS):\n+        if isinstance(p, str):\n+            p = fractions.Fraction(p)\n+            p = Rational(p.numerator, p.denominator)\n+        elif not isinstance(p, SYMPY_INTS):\n             p = Rational(p)\n-            q *= p.q\n-            p = p.p\n         else:\n             p = int(p)\n \n-        if not isinstance(q, SYMPY_INTS):\n+        if isinstance(q, str):\n+            q = fractions.Fraction(q)\n+            q = Rational(q.numerator, q.denominator)\n+        elif not isinstance(q, SYMPY_INTS):\n             q = Rational(q)\n-            p *= q.q\n-            q = q.p\n         else:\n             q = int(q)\n \n+        # Now p and q are either ints or Rationals\n+        if not isinstance(p, SYMPY_INTS):\n+            q *= p.q\n+            p = p.p\n+        if not isinstance(q, SYMPY_INTS):\n+            p *= q.q\n+            q = q.p\n+\n         # p and q are now ints\n         if q == 0:\n             if p == 0:\n"}
{"instance_id":"sympy__sympy-24661","model_name_or_path":"auto-code-roverbedrock/anthropic.claude-3-5-sonnet-20241022-v2:0","model_patch":"diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 52711d1324..3f85b13815 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1110,6 +1110,14 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n         ast.BitAnd: 'And',\n         ast.BitXor: 'Not',\n     }\n+    comparisons = {\n+        ast.Lt: 'Lt',\n+        ast.Gt: 'Gt', \n+        ast.LtE: 'Le',\n+        ast.GtE: 'Ge',\n+        ast.Eq: 'Eq',\n+        ast.NotEq: 'Ne'\n+    }\n     functions = (\n         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',\n         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',\n@@ -1192,6 +1200,22 @@ def visit_Call(self, node):\n             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))\n         return new_node\n \n+    def visit_Compare(self, node):\n+        if len(node.ops) == 1 and type(node.ops[0]) in self.comparisons:\n+            op = type(node.ops[0])\n+            sympy_class = self.comparisons[op]\n+            left = self.visit(node.left)\n+            right = self.visit(node.comparators[0])\n+            \n+            return ast.Call(\n+                func=ast.Name(id=sympy_class, ctx=ast.Load()),\n+                args=[left, right],\n+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],\n+                starargs=None,\n+                kwargs=None\n+            )\n+        return node\n+\n \n _transformation = {  # items can be added but never re-ordered\n 0: lambda_notation,\n"}
